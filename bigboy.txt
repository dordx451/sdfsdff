// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper {
    // Module: client.dll
    public static class Buttons {
        public const nint attack = 0x1882720;
        public const nint attack2 = 0x18827B0;
        public const nint back = 0x18829F0;
        public const nint duck = 0x1882CC0;
        public const nint forward = 0x1882960;
        public const nint jump = 0x1882C30;
        public const nint left = 0x1882A80;
        public const nint lookatweapon = 0x1AAB590;
        public const nint reload = 0x1882690;
        public const nint right = 0x1882B10;
        public const nint showscores = 0x1AAB470;
        public const nint sprint = 0x1882600;
        public const nint turnleft = 0x1882840;
        public const nint turnright = 0x18828D0;
        public const nint use = 0x1882BA0;
        public const nint zoom = 0x1AAB500;
    }
}





// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: client.dll
    // Class count: 427
    // Enum count: 7
    public static class ClientDll {
        // Alignment: 4
        // Member count: 15
        public enum CompositeMaterialInputLooseVariableType_t : uint {
            LOOSE_VARIABLE_TYPE_BOOLEAN = 0x0,
            LOOSE_VARIABLE_TYPE_INTEGER1 = 0x1,
            LOOSE_VARIABLE_TYPE_INTEGER2 = 0x2,
            LOOSE_VARIABLE_TYPE_INTEGER3 = 0x3,
            LOOSE_VARIABLE_TYPE_INTEGER4 = 0x4,
            LOOSE_VARIABLE_TYPE_FLOAT1 = 0x5,
            LOOSE_VARIABLE_TYPE_FLOAT2 = 0x6,
            LOOSE_VARIABLE_TYPE_FLOAT3 = 0x7,
            LOOSE_VARIABLE_TYPE_FLOAT4 = 0x8,
            LOOSE_VARIABLE_TYPE_COLOR4 = 0x9,
            LOOSE_VARIABLE_TYPE_STRING = 0xA,
            LOOSE_VARIABLE_TYPE_SYSTEMVAR = 0xB,
            LOOSE_VARIABLE_TYPE_RESOURCE_MATERIAL = 0xC,
            LOOSE_VARIABLE_TYPE_RESOURCE_TEXTURE = 0xD,
            LOOSE_VARIABLE_TYPE_PANORAMA_RENDER = 0xE
        }
        // Alignment: 4
        // Member count: 7
        public enum CompositeMaterialInputTextureType_t : uint {
            INPUT_TEXTURE_TYPE_DEFAULT = 0x0,
            INPUT_TEXTURE_TYPE_NORMALMAP = 0x1,
            INPUT_TEXTURE_TYPE_COLOR = 0x2,
            INPUT_TEXTURE_TYPE_MASKS = 0x3,
            INPUT_TEXTURE_TYPE_ROUGHNESS = 0x4,
            INPUT_TEXTURE_TYPE_PEARLESCENCE_MASK = 0x5,
            INPUT_TEXTURE_TYPE_AO = 0x6
        }
        // Alignment: 4
        // Member count: 6
        public enum CompositeMaterialInputContainerSourceType_t : uint {
            CONTAINER_SOURCE_TYPE_TARGET_MATERIAL = 0x0,
            CONTAINER_SOURCE_TYPE_MATERIAL_FROM_TARGET_ATTR = 0x1,
            CONTAINER_SOURCE_TYPE_SPECIFIC_MATERIAL = 0x2,
            CONTAINER_SOURCE_TYPE_LOOSE_VARIABLES = 0x3,
            CONTAINER_SOURCE_TYPE_VARIABLE_FROM_TARGET_ATTR = 0x4,
            CONTAINER_SOURCE_TYPE_TARGET_INSTANCE_MATERIAL = 0x5
        }
        // Alignment: 4
        // Member count: 10
        public enum CompMatPropertyMutatorType_t : uint {
            COMP_MAT_PROPERTY_MUTATOR_INIT = 0x0,
            COMP_MAT_PROPERTY_MUTATOR_COPY_MATCHING_KEYS = 0x1,
            COMP_MAT_PROPERTY_MUTATOR_COPY_KEYS_WITH_SUFFIX = 0x2,
            COMP_MAT_PROPERTY_MUTATOR_COPY_PROPERTY = 0x3,
            COMP_MAT_PROPERTY_MUTATOR_SET_VALUE = 0x4,
            COMP_MAT_PROPERTY_MUTATOR_GENERATE_TEXTURE = 0x5,
            COMP_MAT_PROPERTY_MUTATOR_CONDITIONAL_MUTATORS = 0x6,
            COMP_MAT_PROPERTY_MUTATOR_POP_INPUT_QUEUE = 0x7,
            COMP_MAT_PROPERTY_MUTATOR_DRAW_TEXT = 0x8,
            COMP_MAT_PROPERTY_MUTATOR_RANDOM_ROLL_INPUT_VARIABLES = 0x9
        }
        // Alignment: 4
        // Member count: 2
        public enum CompositeMaterialVarSystemVar_t : uint {
            COMPMATSYSVAR_COMPOSITETIME = 0x0,
            COMPMATSYSVAR_EMPTY_RESOURCE_SPACER = 0x1
        }
        // Alignment: 4
        // Member count: 6
        public enum CompositeMaterialMatchFilterType_t : uint {
            MATCH_FILTER_MATERIAL_ATTRIBUTE_EXISTS = 0x0,
            MATCH_FILTER_MATERIAL_SHADER = 0x1,
            MATCH_FILTER_MATERIAL_NAME_SUBSTR = 0x2,
            MATCH_FILTER_MATERIAL_ATTRIBUTE_EQUALS = 0x3,
            MATCH_FILTER_MATERIAL_PROPERTY_EXISTS = 0x4,
            MATCH_FILTER_MATERIAL_PROPERTY_EQUALS = 0x5
        }
        // Alignment: 4
        // Member count: 3
        public enum CompMatPropertyMutatorConditionType_t : uint {
            COMP_MAT_MUTATOR_CONDITION_INPUT_CONTAINER_EXISTS = 0x0,
            COMP_MAT_MUTATOR_CONDITION_INPUT_CONTAINER_VALUE_EXISTS = 0x1,
            COMP_MAT_MUTATOR_CONDITION_INPUT_CONTAINER_VALUE_EQUALS = 0x2
        }
        // Parent: C_CSGO_TeamPreviewCharacterPosition
        // Field count: 0
        public static class C_CSGO_TeamSelectCharacterPosition {
        }
        // Parent: C_BaseCSGrenade
        // Field count: 0
        public static class C_HEGrenade {
        }
        // Parent: C_BaseToggle
        // Field count: 0
        public static class C_FuncMover {
        }
        // Parent: C_BaseTrigger
        // Field count: 0
        public static class C_TriggerLerpObject {
        }
        // Parent: CPlayer_MovementServices_Humanoid
        // Field count: 38
        //
        // Metadata:
        // NetworkVarNames: m_vecLadderNormal (Vector)
        // NetworkVarNames: m_nLadderSurfacePropIndex (int)
        // NetworkVarNames: m_flDuckAmount (float)
        // NetworkVarNames: m_flDuckSpeed (float)
        // NetworkVarNames: m_bDuckOverride (bool)
        // NetworkVarNames: m_bDesiresDuck (bool)
        // NetworkVarNames: m_nDuckTimeMsecs (uint32)
        // NetworkVarNames: m_nDuckJumpTimeMsecs (uint32)
        // NetworkVarNames: m_nJumpTimeMsecs (uint32)
        // NetworkVarNames: m_flLastDuckTime (float)
        // NetworkVarNames: m_nGameCodeHasMovedPlayerAfterCommand (int)
        // NetworkVarNames: m_bOldJumpPressed (bool)
        // NetworkVarNames: m_fStashGrenadeParameterWhen (GameTime_t)
        // NetworkVarNames: m_nButtonDownMaskPrev (ButtonBitMask_t)
        // NetworkVarNames: m_flOffsetTickCompleteTime (float)
        // NetworkVarNames: m_flOffsetTickStashedSpeed (float)
        // NetworkVarNames: m_flStamina (float)
        public static class CCSPlayer_MovementServices {
            public const nint m_vecLadderNormal = 0x218; // Vector
            public const nint m_nLadderSurfacePropIndex = 0x224; // int32
            public const nint m_flDuckAmount = 0x228; // float32
            public const nint m_flDuckSpeed = 0x22C; // float32
            public const nint m_bDuckOverride = 0x230; // bool
            public const nint m_bDesiresDuck = 0x231; // bool
            public const nint m_flDuckOffset = 0x234; // float32
            public const nint m_nDuckTimeMsecs = 0x238; // uint32
            public const nint m_nDuckJumpTimeMsecs = 0x23C; // uint32
            public const nint m_nJumpTimeMsecs = 0x240; // uint32
            public const nint m_flLastDuckTime = 0x244; // float32
            public const nint m_vecLastPositionAtFullCrouchSpeed = 0x250; // Vector2D
            public const nint m_duckUntilOnGround = 0x258; // bool
            public const nint m_bHasWalkMovedSinceLastJump = 0x259; // bool
            public const nint m_bInStuckTest = 0x25A; // bool
            public const nint m_flStuckCheckTime = 0x268; // float32[64][2]
            public const nint m_nTraceCount = 0x468; // int32
            public const nint m_StuckLast = 0x46C; // int32
            public const nint m_bSpeedCropped = 0x470; // bool
            public const nint m_flGroundMoveEfficiency = 0x474; // float32
            public const nint m_nOldWaterLevel = 0x478; // int32
            public const nint m_flWaterEntryTime = 0x47C; // float32
            public const nint m_vecForward = 0x480; // Vector
            public const nint m_vecLeft = 0x48C; // Vector
            public const nint m_vecUp = 0x498; // Vector
            public const nint m_nGameCodeHasMovedPlayerAfterCommand = 0x4A4; // int32
            public const nint m_bOldJumpPressed = 0x4A8; // bool
            public const nint m_flJumpPressedTime = 0x4AC; // float32
            public const nint m_fStashGrenadeParameterWhen = 0x4B0; // GameTime_t
            public const nint m_nButtonDownMaskPrev = 0x4B8; // uint64
            public const nint m_flOffsetTickCompleteTime = 0x4C0; // float32
            public const nint m_flOffsetTickStashedSpeed = 0x4C4; // float32
            public const nint m_flStamina = 0x4C8; // float32
            public const nint m_flHeightAtJumpStart = 0x4CC; // float32
            public const nint m_flMaxJumpHeightThisJump = 0x4D0; // float32
            public const nint m_flMaxJumpHeightLastJump = 0x4D4; // float32
            public const nint m_flStaminaAtJumpStart = 0x4D8; // float32
            public const nint m_flAccumulatedJumpError = 0x4DC; // float32
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // NetworkVarNames: scale (int16)
        // NetworkVarNames: origin (Vector)
        // NetworkVarNames: bClip3DSkyBoxNearToWorldFar (bool)
        // NetworkVarNames: flClip3DSkyBoxNearToWorldFarOffset (float32)
        // NetworkVarNames: fog (fogparams_t)
        // NetworkVarNames: m_nWorldGroupID (WorldGroupId_t)
        public static class sky3dparams_t {
            public const nint scale = 0x8; // int16
            public const nint origin = 0xC; // Vector
            public const nint bClip3DSkyBoxNearToWorldFar = 0x18; // bool
            public const nint flClip3DSkyBoxNearToWorldFarOffset = 0x1C; // float32
            public const nint fog = 0x20; // fogparams_t
            public const nint m_nWorldGroupID = 0x88; // WorldGroupId_t
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponM4A1 {
        }
        // Parent: C_EconEntity
        // Field count: 1
        public static class C_Item {
            public const nint m_pReticleHintTextName = 0x1668; // char[256]
        }
        // Parent: C_SoundEventEntity
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_vecCornerPairsNetworked (SoundeventPathCornerPairNetworked_t)
        public static class C_SoundEventPathCornerEntity {
            public const nint m_vecCornerPairsNetworked = 0x628; // C_NetworkUtlVectorBase<SoundeventPathCornerPairNetworked_t>
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponM249 {
        }
        // Parent: C_TeamplayRules
        // Field count: 100
        //
        // Metadata:
        // NetworkVarNames: m_bFreezePeriod (bool)
        // NetworkVarNames: m_bWarmupPeriod (bool)
        // NetworkVarNames: m_fWarmupPeriodEnd (GameTime_t)
        // NetworkVarNames: m_fWarmupPeriodStart (GameTime_t)
        // NetworkVarNames: m_bServerPaused (bool)
        // NetworkVarNames: m_bTerroristTimeOutActive (bool)
        // NetworkVarNames: m_bCTTimeOutActive (bool)
        // NetworkVarNames: m_flTerroristTimeOutRemaining (float)
        // NetworkVarNames: m_flCTTimeOutRemaining (float)
        // NetworkVarNames: m_nTerroristTimeOuts (int)
        // NetworkVarNames: m_nCTTimeOuts (int)
        // NetworkVarNames: m_bTechnicalTimeOut (bool)
        // NetworkVarNames: m_bMatchWaitingForResume (bool)
        // NetworkVarNames: m_iRoundTime (int)
        // NetworkVarNames: m_fMatchStartTime (float)
        // NetworkVarNames: m_fRoundStartTime (GameTime_t)
        // NetworkVarNames: m_flRestartRoundTime (GameTime_t)
        // NetworkVarNames: m_bGameRestart (bool)
        // NetworkVarNames: m_flGameStartTime (float)
        // NetworkVarNames: m_timeUntilNextPhaseStarts (float)
        // NetworkVarNames: m_gamePhase (int)
        // NetworkVarNames: m_totalRoundsPlayed (int)
        // NetworkVarNames: m_nRoundsPlayedThisPhase (int)
        // NetworkVarNames: m_nOvertimePlaying (int)
        // NetworkVarNames: m_iHostagesRemaining (int)
        // NetworkVarNames: m_bAnyHostageReached (bool)
        // NetworkVarNames: m_bMapHasBombTarget (bool)
        // NetworkVarNames: m_bMapHasRescueZone (bool)
        // NetworkVarNames: m_bMapHasBuyZone (bool)
        // NetworkVarNames: m_bIsQueuedMatchmaking (bool)
        // NetworkVarNames: m_nQueuedMatchmakingMode (int)
        // NetworkVarNames: m_bIsValveDS (bool)
        // NetworkVarNames: m_bLogoMap (bool)
        // NetworkVarNames: m_bPlayAllStepSoundsOnServer (bool)
        // NetworkVarNames: m_iSpectatorSlotCount (int)
        // NetworkVarNames: m_MatchDevice (int)
        // NetworkVarNames: m_bHasMatchStarted (bool)
        // NetworkVarNames: m_nNextMapInMapgroup (int)
        // NetworkVarNames: m_szTournamentEventName (char)
        // NetworkVarNames: m_szTournamentEventStage (char)
        // NetworkVarNames: m_szMatchStatTxt (char)
        // NetworkVarNames: m_szTournamentPredictionsTxt (char)
        // NetworkVarNames: m_nTournamentPredictionsPct (int)
        // NetworkVarNames: m_flCMMItemDropRevealStartTime (GameTime_t)
        // NetworkVarNames: m_flCMMItemDropRevealEndTime (GameTime_t)
        // NetworkVarNames: m_bIsDroppingItems (bool)
        // NetworkVarNames: m_bIsQuestEligible (bool)
        // NetworkVarNames: m_bIsHltvActive (bool)
        // NetworkVarNames: m_arrProhibitedItemIndices (uint16)
        // NetworkVarNames: m_arrTournamentActiveCasterAccounts (uint32)
        // NetworkVarNames: m_numBestOfMaps (int)
        // NetworkVarNames: m_nHalloweenMaskListSeed (int)
        // NetworkVarNames: m_bBombDropped (bool)
        // NetworkVarNames: m_bBombPlanted (bool)
        // NetworkVarNames: m_iRoundWinStatus (int)
        // NetworkVarNames: m_eRoundWinReason (int)
        // NetworkVarNames: m_bTCantBuy (bool)
        // NetworkVarNames: m_bCTCantBuy (bool)
        // NetworkVarNames: m_iMatchStats_RoundResults (int)
        // NetworkVarNames: m_iMatchStats_PlayersAlive_CT (int)
        // NetworkVarNames: m_iMatchStats_PlayersAlive_T (int)
        // NetworkVarNames: m_TeamRespawnWaveTimes (float)
        // NetworkVarNames: m_flNextRespawnWave (GameTime_t)
        // NetworkVarNames: m_nServerQuestID (int)
        // NetworkVarNames: m_vMinimapMins (Vector)
        // NetworkVarNames: m_vMinimapMaxs (Vector)
        // NetworkVarNames: m_MinimapVerticalSectionHeights (float)
        // NetworkVarNames: m_nEndMatchMapGroupVoteTypes (int)
        // NetworkVarNames: m_nEndMatchMapGroupVoteOptions (int)
        // NetworkVarNames: m_nEndMatchMapVoteWinner (int)
        // NetworkVarNames: m_iNumConsecutiveCTLoses (int)
        // NetworkVarNames: m_iNumConsecutiveTerroristLoses (int)
        // NetworkVarNames: m_nMatchAbortedEarlyReason (int)
        // NetworkVarNames: m_pGameModeRules (CCSGameModeRules*)
        // NetworkVarNames: m_RetakeRules (CRetakeGameRules)
        // NetworkVarNames: m_nMatchEndCount (uint8)
        // NetworkVarNames: m_nTTeamIntroVariant (int)
        // NetworkVarNames: m_nCTTeamIntroVariant (int)
        // NetworkVarNames: m_bTeamIntroPeriod (bool)
        // NetworkVarNames: m_iRoundEndWinnerTeam (int)
        // NetworkVarNames: m_eRoundEndReason (int)
        // NetworkVarNames: m_bRoundEndShowTimerDefend (bool)
        // NetworkVarNames: m_iRoundEndTimerTime (int)
        // NetworkVarNames: m_sRoundEndFunFactToken (CUtlString)
        // NetworkVarNames: m_iRoundEndFunFactPlayerSlot (CPlayerSlot)
        // NetworkVarNames: m_iRoundEndFunFactData1 (int)
        // NetworkVarNames: m_iRoundEndFunFactData2 (int)
        // NetworkVarNames: m_iRoundEndFunFactData3 (int)
        // NetworkVarNames: m_sRoundEndMessage (CUtlString)
        // NetworkVarNames: m_iRoundEndPlayerCount (int)
        // NetworkVarNames: m_bRoundEndNoMusic (bool)
        // NetworkVarNames: m_iRoundEndLegacy (int)
        // NetworkVarNames: m_nRoundEndCount (uint8)
        // NetworkVarNames: m_iRoundStartRoundNumber (int)
        // NetworkVarNames: m_nRoundStartCount (uint8)
        public static class C_CSGameRules {
            public const nint m_bFreezePeriod = 0x40; // bool
            public const nint m_bWarmupPeriod = 0x41; // bool
            public const nint m_fWarmupPeriodEnd = 0x44; // GameTime_t
            public const nint m_fWarmupPeriodStart = 0x48; // GameTime_t
            public const nint m_bServerPaused = 0x4C; // bool
            public const nint m_bTerroristTimeOutActive = 0x4D; // bool
            public const nint m_bCTTimeOutActive = 0x4E; // bool
            public const nint m_flTerroristTimeOutRemaining = 0x50; // float32
            public const nint m_flCTTimeOutRemaining = 0x54; // float32
            public const nint m_nTerroristTimeOuts = 0x58; // int32
            public const nint m_nCTTimeOuts = 0x5C; // int32
            public const nint m_bTechnicalTimeOut = 0x60; // bool
            public const nint m_bMatchWaitingForResume = 0x61; // bool
            public const nint m_iRoundTime = 0x64; // int32
            public const nint m_fMatchStartTime = 0x68; // float32
            public const nint m_fRoundStartTime = 0x6C; // GameTime_t
            public const nint m_flRestartRoundTime = 0x70; // GameTime_t
            public const nint m_bGameRestart = 0x74; // bool
            public const nint m_flGameStartTime = 0x78; // float32
            public const nint m_timeUntilNextPhaseStarts = 0x7C; // float32
            public const nint m_gamePhase = 0x80; // int32
            public const nint m_totalRoundsPlayed = 0x84; // int32
            public const nint m_nRoundsPlayedThisPhase = 0x88; // int32
            public const nint m_nOvertimePlaying = 0x8C; // int32
            public const nint m_iHostagesRemaining = 0x90; // int32
            public const nint m_bAnyHostageReached = 0x94; // bool
            public const nint m_bMapHasBombTarget = 0x95; // bool
            public const nint m_bMapHasRescueZone = 0x96; // bool
            public const nint m_bMapHasBuyZone = 0x97; // bool
            public const nint m_bIsQueuedMatchmaking = 0x98; // bool
            public const nint m_nQueuedMatchmakingMode = 0x9C; // int32
            public const nint m_bIsValveDS = 0xA0; // bool
            public const nint m_bLogoMap = 0xA1; // bool
            public const nint m_bPlayAllStepSoundsOnServer = 0xA2; // bool
            public const nint m_iSpectatorSlotCount = 0xA4; // int32
            public const nint m_MatchDevice = 0xA8; // int32
            public const nint m_bHasMatchStarted = 0xAC; // bool
            public const nint m_nNextMapInMapgroup = 0xB0; // int32
            public const nint m_szTournamentEventName = 0xB4; // char[512]
            public const nint m_szTournamentEventStage = 0x2B4; // char[512]
            public const nint m_szMatchStatTxt = 0x4B4; // char[512]
            public const nint m_szTournamentPredictionsTxt = 0x6B4; // char[512]
            public const nint m_nTournamentPredictionsPct = 0x8B4; // int32
            public const nint m_flCMMItemDropRevealStartTime = 0x8B8; // GameTime_t
            public const nint m_flCMMItemDropRevealEndTime = 0x8BC; // GameTime_t
            public const nint m_bIsDroppingItems = 0x8C0; // bool
            public const nint m_bIsQuestEligible = 0x8C1; // bool
            public const nint m_bIsHltvActive = 0x8C2; // bool
            public const nint m_arrProhibitedItemIndices = 0x8C4; // uint16[100]
            public const nint m_arrTournamentActiveCasterAccounts = 0x98C; // uint32[4]
            public const nint m_numBestOfMaps = 0x99C; // int32
            public const nint m_nHalloweenMaskListSeed = 0x9A0; // int32
            public const nint m_bBombDropped = 0x9A4; // bool
            public const nint m_bBombPlanted = 0x9A5; // bool
            public const nint m_iRoundWinStatus = 0x9A8; // int32
            public const nint m_eRoundWinReason = 0x9AC; // int32
            public const nint m_bTCantBuy = 0x9B0; // bool
            public const nint m_bCTCantBuy = 0x9B1; // bool
            public const nint m_iMatchStats_RoundResults = 0x9B4; // int32[30]
            public const nint m_iMatchStats_PlayersAlive_CT = 0xA2C; // int32[30]
            public const nint m_iMatchStats_PlayersAlive_T = 0xAA4; // int32[30]
            public const nint m_TeamRespawnWaveTimes = 0xB1C; // float32[32]
            public const nint m_flNextRespawnWave = 0xB9C; // GameTime_t[32]
            public const nint m_nServerQuestID = 0xC1C; // int32
            public const nint m_vMinimapMins = 0xC20; // Vector
            public const nint m_vMinimapMaxs = 0xC2C; // Vector
            public const nint m_MinimapVerticalSectionHeights = 0xC38; // float32[8]
            public const nint m_bSpawnedTerrorHuntHeavy = 0xC58; // bool
            public const nint m_nEndMatchMapGroupVoteTypes = 0xC5C; // int32[10]
            public const nint m_nEndMatchMapGroupVoteOptions = 0xC84; // int32[10]
            public const nint m_nEndMatchMapVoteWinner = 0xCAC; // int32
            public const nint m_iNumConsecutiveCTLoses = 0xCB0; // int32
            public const nint m_iNumConsecutiveTerroristLoses = 0xCB4; // int32
            public const nint m_bMarkClientStopRecordAtRoundEnd = 0xCD0; // bool
            public const nint m_nMatchAbortedEarlyReason = 0xD78; // int32
            public const nint m_bHasTriggeredRoundStartMusic = 0xD7C; // bool
            public const nint m_bSwitchingTeamsAtRoundReset = 0xD7D; // bool
            public const nint m_pGameModeRules = 0xD98; // CCSGameModeRules*
            public const nint m_RetakeRules = 0xDA0; // C_RetakeGameRules
            public const nint m_nMatchEndCount = 0xEB8; // uint8
            public const nint m_nTTeamIntroVariant = 0xEBC; // int32
            public const nint m_nCTTeamIntroVariant = 0xEC0; // int32
            public const nint m_bTeamIntroPeriod = 0xEC4; // bool
            public const nint m_iRoundEndWinnerTeam = 0xEC8; // int32
            public const nint m_eRoundEndReason = 0xECC; // int32
            public const nint m_bRoundEndShowTimerDefend = 0xED0; // bool
            public const nint m_iRoundEndTimerTime = 0xED4; // int32
            public const nint m_sRoundEndFunFactToken = 0xED8; // CUtlString
            public const nint m_iRoundEndFunFactPlayerSlot = 0xEE0; // CPlayerSlot
            public const nint m_iRoundEndFunFactData1 = 0xEE4; // int32
            public const nint m_iRoundEndFunFactData2 = 0xEE8; // int32
            public const nint m_iRoundEndFunFactData3 = 0xEEC; // int32
            public const nint m_sRoundEndMessage = 0xEF0; // CUtlString
            public const nint m_iRoundEndPlayerCount = 0xEF8; // int32
            public const nint m_bRoundEndNoMusic = 0xEFC; // bool
            public const nint m_iRoundEndLegacy = 0xF00; // int32
            public const nint m_nRoundEndCount = 0xF04; // uint8
            public const nint m_iRoundStartRoundNumber = 0xF08; // int32
            public const nint m_nRoundStartCount = 0xF0C; // uint8
            public const nint m_flLastPerfSampleTime = 0x4F18; // float64
        }
        // Parent: CBodyComponent
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_skeletonInstance (CSkeletonInstance)
        public static class CBodyComponentSkeletonInstance {
            public const nint m_skeletonInstance = 0x50; // CSkeletonInstance
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponCZ75a {
        }
        // Parent: C_BaseEntity
        // Field count: 33
        //
        // Metadata:
        // NetworkVarNames: m_CRenderComponent (CRenderComponent::Storage_t)
        // NetworkVarNames: m_CHitboxComponent (CHitboxComponent::Storage_t)
        // NetworkVarNames: m_nRenderMode (RenderMode_t)
        // NetworkVarNames: m_nRenderFX (RenderFx_t)
        // NetworkVarNames: m_clrRender (Color)
        // NetworkVarNames: m_vecRenderAttributes (EntityRenderAttribute_t)
        // NetworkVarNames: m_bRenderToCubemaps (bool)
        // NetworkVarNames: m_bNoInterpolate (bool)
        // NetworkVarNames: m_Collision (CCollisionProperty)
        // NetworkVarNames: m_Glow (CGlowProperty)
        // NetworkVarNames: m_flGlowBackfaceMult (float)
        // NetworkVarNames: m_fadeMinDist (float32)
        // NetworkVarNames: m_fadeMaxDist (float32)
        // NetworkVarNames: m_flFadeScale (float32)
        // NetworkVarNames: m_flShadowStrength (float32)
        // NetworkVarNames: m_nObjectCulling (uint8)
        // NetworkVarNames: m_nAddDecal (int)
        // NetworkVarNames: m_vDecalPosition (Vector)
        // NetworkVarNames: m_vDecalForwardAxis (Vector)
        // NetworkVarNames: m_flDecalHealBloodRate (float)
        // NetworkVarNames: m_flDecalHealHeightRate (float)
        // NetworkVarNames: m_ConfigEntitiesToPropagateMaterialDecalsTo (CHandle<C_BaseModelEntity>)
        public static class C_BaseModelEntity {
            public const nint m_CRenderComponent = 0xA50; // CRenderComponent*
            public const nint m_CHitboxComponent = 0xA58; // CHitboxComponent
            public const nint m_LastHitGroup = 0xA80; // HitGroup_t
            public const nint m_bInitModelEffects = 0xAA8; // bool
            public const nint m_bIsStaticProp = 0xAA9; // bool
            public const nint m_nLastAddDecal = 0xAAC; // int32
            public const nint m_nDecalsAdded = 0xAB0; // int32
            public const nint m_iOldHealth = 0xAB4; // int32
            public const nint m_nRenderMode = 0xAB8; // RenderMode_t
            public const nint m_nRenderFX = 0xAB9; // RenderFx_t
            public const nint m_bAllowFadeInView = 0xABA; // bool
            public const nint m_clrRender = 0xAD8; // Color
            public const nint m_vecRenderAttributes = 0xAE0; // C_UtlVectorEmbeddedNetworkVar<EntityRenderAttribute_t>
            public const nint m_bRenderToCubemaps = 0xB48; // bool
            public const nint m_bNoInterpolate = 0xB49; // bool
            public const nint m_Collision = 0xB50; // CCollisionProperty
            public const nint m_Glow = 0xC00; // CGlowProperty
            public const nint m_flGlowBackfaceMult = 0xC58; // float32
            public const nint m_fadeMinDist = 0xC5C; // float32
            public const nint m_fadeMaxDist = 0xC60; // float32
            public const nint m_flFadeScale = 0xC64; // float32
            public const nint m_flShadowStrength = 0xC68; // float32
            public const nint m_nObjectCulling = 0xC6C; // uint8
            public const nint m_nAddDecal = 0xC70; // int32
            public const nint m_vDecalPosition = 0xC74; // Vector
            public const nint m_vDecalForwardAxis = 0xC80; // Vector
            public const nint m_flDecalHealBloodRate = 0xC8C; // float32
            public const nint m_flDecalHealHeightRate = 0xC90; // float32
            public const nint m_ConfigEntitiesToPropagateMaterialDecalsTo = 0xC98; // C_NetworkUtlVectorBase<CHandle<C_BaseModelEntity>>
            public const nint m_vecViewOffset = 0xCB0; // CNetworkViewOffsetVector
            public const nint m_pClientAlphaProperty = 0xCE0; // CClientAlphaProperty*
            public const nint m_ClientOverrideTint = 0xCE8; // Color
            public const nint m_bUseClientOverrideTint = 0xCEC; // bool
        }
        // Parent: C_BaseTrigger
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_source (string_t)
        // NetworkVarNames: m_destination (string_t)
        public static class C_FootstepControl {
            public const nint m_source = 0xD30; // CUtlSymbolLarge
            public const nint m_destination = 0xD38; // CUtlSymbolLarge
        }
        // Parent: C_BaseClientUIEntity
        // Field count: 13
        //
        // Metadata:
        // NetworkVarNames: m_bIgnoreInput (bool)
        // NetworkVarNames: m_flWidth (float)
        // NetworkVarNames: m_flHeight (float)
        // NetworkVarNames: m_flDPI (float)
        // NetworkVarNames: m_flInteractDistance (float)
        // NetworkVarNames: m_flDepthOffset (float)
        // NetworkVarNames: m_unOwnerContext (uint32)
        // NetworkVarNames: m_unHorizontalAlign (uint32)
        // NetworkVarNames: m_unVerticalAlign (uint32)
        // NetworkVarNames: m_unOrientation (uint32)
        // NetworkVarNames: m_bAllowInteractionFromAllSceneWorlds (bool)
        // NetworkVarNames: m_vecCSSClasses (string_t)
        public static class C_PointClientUIHUD {
            public const nint m_bCheckCSSClasses = 0xD60; // bool
            public const nint m_bIgnoreInput = 0xEE0; // bool
            public const nint m_flWidth = 0xEE4; // float32
            public const nint m_flHeight = 0xEE8; // float32
            public const nint m_flDPI = 0xEEC; // float32
            public const nint m_flInteractDistance = 0xEF0; // float32
            public const nint m_flDepthOffset = 0xEF4; // float32
            public const nint m_unOwnerContext = 0xEF8; // uint32
            public const nint m_unHorizontalAlign = 0xEFC; // uint32
            public const nint m_unVerticalAlign = 0xF00; // uint32
            public const nint m_unOrientation = 0xF04; // uint32
            public const nint m_bAllowInteractionFromAllSceneWorlds = 0xF08; // bool
            public const nint m_vecCSSClasses = 0xF10; // C_NetworkUtlVectorBase<CUtlSymbolLarge>
        }
        // Parent: C_BaseModelEntity
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_flLightScale (float32)
        // NetworkVarNames: m_Radius (float32)
        public static class C_SpotlightEnd {
            public const nint m_flLightScale = 0xD28; // float32
            public const nint m_Radius = 0xD2C; // float32
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // NetworkVarNames: m_iAttributeDefinitionIndex (attrib_definition_index_t)
        // NetworkVarNames: m_flValue (float)
        // NetworkVarNames: m_flInitialValue (float)
        // NetworkVarNames: m_nRefundableCurrency (int)
        // NetworkVarNames: m_bSetBonus (bool)
        public static class CEconItemAttribute {
            public const nint m_iAttributeDefinitionIndex = 0x30; // uint16
            public const nint m_flValue = 0x34; // float32
            public const nint m_flInitialValue = 0x38; // float32
            public const nint m_nRefundableCurrency = 0x3C; // int32
            public const nint m_bSetBonus = 0x40; // bool
        }
        // Parent: C_BaseEntity
        // Field count: 26
        //
        // Metadata:
        // NetworkVarNames: m_FOV (float)
        // NetworkVarNames: m_Resolution (float)
        // NetworkVarNames: m_bFogEnable (bool)
        // NetworkVarNames: m_FogColor (Color)
        // NetworkVarNames: m_flFogStart (float)
        // NetworkVarNames: m_flFogEnd (float)
        // NetworkVarNames: m_flFogMaxDensity (float)
        // NetworkVarNames: m_bActive (bool)
        // NetworkVarNames: m_bUseScreenAspectRatio (bool)
        // NetworkVarNames: m_flAspectRatio (float)
        // NetworkVarNames: m_bNoSky (bool)
        // NetworkVarNames: m_fBrightness (float)
        // NetworkVarNames: m_flZFar (float)
        // NetworkVarNames: m_flZNear (float)
        // NetworkVarNames: m_bCanHLTVUse (bool)
        // NetworkVarNames: m_bAlignWithParent (bool)
        // NetworkVarNames: m_bDofEnabled (bool)
        // NetworkVarNames: m_flDofNearBlurry (float)
        // NetworkVarNames: m_flDofNearCrisp (float)
        // NetworkVarNames: m_flDofFarCrisp (float)
        // NetworkVarNames: m_flDofFarBlurry (float)
        // NetworkVarNames: m_flDofTiltToGround (float)
        public static class C_PointCamera {
            public const nint m_FOV = 0x568; // float32
            public const nint m_Resolution = 0x56C; // float32
            public const nint m_bFogEnable = 0x570; // bool
            public const nint m_FogColor = 0x571; // Color
            public const nint m_flFogStart = 0x578; // float32
            public const nint m_flFogEnd = 0x57C; // float32
            public const nint m_flFogMaxDensity = 0x580; // float32
            public const nint m_bActive = 0x584; // bool
            public const nint m_bUseScreenAspectRatio = 0x585; // bool
            public const nint m_flAspectRatio = 0x588; // float32
            public const nint m_bNoSky = 0x58C; // bool
            public const nint m_fBrightness = 0x590; // float32
            public const nint m_flZFar = 0x594; // float32
            public const nint m_flZNear = 0x598; // float32
            public const nint m_bCanHLTVUse = 0x59C; // bool
            public const nint m_bAlignWithParent = 0x59D; // bool
            public const nint m_bDofEnabled = 0x59E; // bool
            public const nint m_flDofNearBlurry = 0x5A0; // float32
            public const nint m_flDofNearCrisp = 0x5A4; // float32
            public const nint m_flDofFarCrisp = 0x5A8; // float32
            public const nint m_flDofFarBlurry = 0x5AC; // float32
            public const nint m_flDofTiltToGround = 0x5B0; // float32
            public const nint m_TargetFOV = 0x5B4; // float32
            public const nint m_DegreesPerSecond = 0x5B8; // float32
            public const nint m_bIsOn = 0x5BC; // bool
            public const nint m_pNext = 0x5C0; // C_PointCamera*
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class CCSPointScriptExtensions_weapon_cs_base {
        }
        // Parent: C_LightEntity
        // Field count: 0
        public static class C_LightSpotEntity {
        }
        // Parent: C_BaseEntity
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_EnvWindShared (CEnvWindShared)
        public static class C_EnvWind {
            public const nint m_EnvWindShared = 0x568; // C_EnvWindShared
        }
        // Parent: C_BaseEntity
        // Field count: 0
        public static class C_GameRulesProxy {
        }
        // Parent: C_BaseFlex
        // Field count: 6
        //
        // Metadata:
        // MNetworkExcludeByUserGroup
        // NetworkVarNames: m_hMyWearables (CHandle<C_EconWearable>)
        public static class C_BaseCombatCharacter {
            public const nint m_hMyWearables = 0x1120; // C_NetworkUtlVectorBase<CHandle<C_EconWearable>>
            public const nint m_leftFootAttachment = 0x1138; // AttachmentHandle_t
            public const nint m_rightFootAttachment = 0x1139; // AttachmentHandle_t
            public const nint m_nWaterWakeMode = 0x113C; // C_BaseCombatCharacter::WaterWakeMode_t
            public const nint m_flWaterWorldZ = 0x1140; // float32
            public const nint m_flWaterNextTraceTime = 0x1144; // float32
        }
        // Parent: C_BaseCSGrenadeProjectile
        // Field count: 0
        public static class C_FlashbangProjectile {
        }
        // Parent: CEnvSoundscape
        // Field count: 0
        public static class CEnvSoundscapeTriggerable {
        }
        // Parent: C_SoundEventEntity
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_flRadius (float)
        public static class C_SoundEventSphereEntity {
            public const nint m_flRadius = 0x628; // float32
        }
        // Parent: CPlayerPawnComponent
        // Field count: 0
        public static class CPlayer_ViewModelServices {
        }
        // Parent: CCSGO_WingmanIntroCharacterPosition
        // Field count: 0
        public static class CCSGO_WingmanIntroCounterTerroristPosition {
        }
        // Parent: C_DynamicProp
        // Field count: 0
        public static class C_DynamicPropAlias_cable_dynamic {
        }
        // Parent: C_PointEntity
        // Field count: 0
        public static class C_InfoInstructorHintHostageRescueZone {
        }
        // Parent: C_PointEntity
        // Field count: 12
        //
        // Metadata:
        // NetworkVarNames: m_bIsPlayingBack (bool)
        // NetworkVarNames: m_bPaused (bool)
        // NetworkVarNames: m_bMultiplayer (bool)
        // NetworkVarNames: m_bAutogenerated (bool)
        // NetworkVarNames: m_flForceClientTime (float32)
        // NetworkVarNames: m_nSceneStringIndex (uint16)
        // NetworkVarNames: m_hActorList (CHandle<C_BaseFlex>)
        public static class C_SceneEntity {
            public const nint m_bIsPlayingBack = 0x570; // bool
            public const nint m_bPaused = 0x571; // bool
            public const nint m_bMultiplayer = 0x572; // bool
            public const nint m_bAutogenerated = 0x573; // bool
            public const nint m_flForceClientTime = 0x574; // float32
            public const nint m_nSceneStringIndex = 0x578; // uint16
            public const nint m_bClientOnly = 0x57A; // bool
            public const nint m_hOwner = 0x57C; // CHandle<C_BaseFlex>
            public const nint m_hActorList = 0x580; // C_NetworkUtlVectorBase<CHandle<C_BaseFlex>>
            public const nint m_bWasPlaying = 0x598; // bool
            public const nint m_QueuedEvents = 0x5A8; // CUtlVector<C_SceneEntity::QueuedEvents_t>
            public const nint m_flCurrentTime = 0x5C0; // float32
        }
        // Parent: CPlayerPawnComponent
        // Field count: 20
        //
        // Metadata:
        // NetworkVarNames: m_vecCsViewPunchAngle (QAngle)
        // NetworkVarNames: m_nCsViewPunchAngleTick (GameTick_t)
        // NetworkVarNames: m_flCsViewPunchAngleTickRatio (float32)
        // NetworkVarNames: m_PlayerFog (fogplayerparams_t)
        // NetworkVarNames: m_hColorCorrectionCtrl (CHandle<CColorCorrection>)
        // NetworkVarNames: m_hViewEntity (CHandle<CBaseEntity>)
        // NetworkVarNames: m_hTonemapController (CHandle<CTonemapController2>)
        // NetworkVarNames: m_audio (audioparams_t)
        // NetworkVarNames: m_PostProcessingVolumes (CHandle<C_PostProcessingVolume>)
        public static class CPlayer_CameraServices {
            public const nint m_vecCsViewPunchAngle = 0x40; // QAngle
            public const nint m_nCsViewPunchAngleTick = 0x4C; // GameTick_t
            public const nint m_flCsViewPunchAngleTickRatio = 0x50; // float32
            public const nint m_PlayerFog = 0x58; // C_fogplayerparams_t
            public const nint m_hColorCorrectionCtrl = 0x98; // CHandle<C_ColorCorrection>
            public const nint m_hViewEntity = 0x9C; // CHandle<C_BaseEntity>
            public const nint m_hTonemapController = 0xA0; // CHandle<C_TonemapController2>
            public const nint m_audio = 0xA8; // audioparams_t
            public const nint m_PostProcessingVolumes = 0x120; // C_NetworkUtlVectorBase<CHandle<C_PostProcessingVolume>>
            public const nint m_flOldPlayerZ = 0x138; // float32
            public const nint m_flOldPlayerViewOffsetZ = 0x13C; // float32
            public const nint m_CurrentFog = 0x140; // fogparams_t
            public const nint m_hOldFogController = 0x1A8; // CHandle<C_FogController>
            public const nint m_bOverrideFogColor = 0x1AC; // bool[5]
            public const nint m_OverrideFogColor = 0x1B1; // Color[5]
            public const nint m_bOverrideFogStartEnd = 0x1C5; // bool[5]
            public const nint m_fOverrideFogStart = 0x1CC; // float32[5]
            public const nint m_fOverrideFogEnd = 0x1E0; // float32[5]
            public const nint m_hActivePostProcessingVolume = 0x1F4; // CHandle<C_PostProcessingVolume>
            public const nint m_angDemoViewAngles = 0x1F8; // QAngle
        }
        // Parent: C_CSWeaponBase
        // Field count: 15
        //
        // Metadata:
        // NetworkVarNames: m_bRedraw (bool)
        // NetworkVarNames: m_bIsHeldByPlayer (bool)
        // NetworkVarNames: m_bPinPulled (bool)
        // NetworkVarNames: m_bJumpThrow (bool)
        // NetworkVarNames: m_bThrowAnimating (bool)
        // NetworkVarNames: m_fThrowTime (GameTime_t)
        // NetworkVarNames: m_flThrowStrength (float)
        // NetworkVarNames: m_flThrowStrengthApproach (float)
        // NetworkVarNames: m_fDropTime (GameTime_t)
        // NetworkVarNames: m_fPinPullTime (GameTime_t)
        // NetworkVarNames: m_bJustPulledPin (bool)
        // NetworkVarNames: m_nNextHoldTick (GameTick_t)
        // NetworkVarNames: m_flNextHoldFrac (float)
        // NetworkVarNames: m_hSwitchToWeaponAfterThrow (CHandle<CCSWeaponBase>)
        public static class C_BaseCSGrenade {
            public const nint m_bClientPredictDelete = 0x1B20; // bool
            public const nint m_bRedraw = 0x1B21; // bool
            public const nint m_bIsHeldByPlayer = 0x1B22; // bool
            public const nint m_bPinPulled = 0x1B23; // bool
            public const nint m_bJumpThrow = 0x1B24; // bool
            public const nint m_bThrowAnimating = 0x1B25; // bool
            public const nint m_fThrowTime = 0x1B28; // GameTime_t
            public const nint m_flThrowStrength = 0x1B2C; // float32
            public const nint m_flThrowStrengthApproach = 0x1B30; // float32
            public const nint m_fDropTime = 0x1B34; // GameTime_t
            public const nint m_fPinPullTime = 0x1B38; // GameTime_t
            public const nint m_bJustPulledPin = 0x1B3C; // bool
            public const nint m_nNextHoldTick = 0x1B40; // GameTick_t
            public const nint m_flNextHoldFrac = 0x1B44; // float32
            public const nint m_hSwitchToWeaponAfterThrow = 0x1B48; // CHandle<C_CSWeaponBase>
        }
        // Parent: C_FuncBrush
        // Field count: 8
        //
        // Metadata:
        // NetworkVarNames: m_targetCamera (CUtlString)
        // NetworkVarNames: m_nResolutionEnum (int)
        // NetworkVarNames: m_bRenderShadows (bool)
        // NetworkVarNames: m_bUseUniqueColorTarget (bool)
        // NetworkVarNames: m_brushModelName (CUtlString)
        // NetworkVarNames: m_hTargetCamera (EHANDLE)
        // NetworkVarNames: m_bEnabled (bool)
        // NetworkVarNames: m_bDraw3DSkybox (bool)
        public static class C_FuncMonitor {
            public const nint m_targetCamera = 0xD28; // CUtlString
            public const nint m_nResolutionEnum = 0xD30; // int32
            public const nint m_bRenderShadows = 0xD34; // bool
            public const nint m_bUseUniqueColorTarget = 0xD35; // bool
            public const nint m_brushModelName = 0xD38; // CUtlString
            public const nint m_hTargetCamera = 0xD40; // CHandle<C_BaseEntity>
            public const nint m_bEnabled = 0xD44; // bool
            public const nint m_bDraw3DSkybox = 0xD45; // bool
        }
        // Parent: C_BaseTrigger
        // Field count: 0
        public static class C_TriggerMultiple {
        }
        // Parent: None
        // Field count: 1
        public static class C_RopeKeyframe__CPhysicsDelegate {
            public const nint m_pKeyframe = 0x8; // C_RopeKeyframe*
        }
        // Parent: CEntityComponent
        // Field count: 2
        public static class CBodyComponent {
            public const nint m_pSceneNode = 0x8; // CGameSceneNode*
            public const nint __m_pChainEntity = 0x20; // CNetworkVarChainer
        }
        // Parent: C_SoundAreaEntityBase
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_flRadius (float)
        public static class C_SoundAreaEntitySphere {
            public const nint m_flRadius = 0x590; // float32
        }
        // Parent: CPlayer_MovementServices
        // Field count: 0
        public static class CCSObserver_MovementServices {
        }
        // Parent: C_BaseModelEntity
        // Field count: 8
        //
        // Metadata:
        // MNetworkIncludeByUserGroup
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // NetworkVarNames: m_nHorizontalSize (uint32)
        // NetworkVarNames: m_nVerticalSize (uint32)
        // NetworkVarNames: m_nMinDist (uint32)
        // NetworkVarNames: m_nMaxDist (uint32)
        // NetworkVarNames: m_nOuterMaxDist (uint32)
        // NetworkVarNames: m_flGlowProxySize (float32)
        // NetworkVarNames: m_flHDRColorScale (float32)
        public static class C_LightGlow {
            public const nint m_nHorizontalSize = 0xD28; // uint32
            public const nint m_nVerticalSize = 0xD2C; // uint32
            public const nint m_nMinDist = 0xD30; // uint32
            public const nint m_nMaxDist = 0xD34; // uint32
            public const nint m_nOuterMaxDist = 0xD38; // uint32
            public const nint m_flGlowProxySize = 0xD3C; // float32
            public const nint m_flHDRColorScale = 0xD40; // float32
            public const nint m_GlowOverlay = 0xD48; // C_LightGlowOverlay
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // NetworkVarNames: m_duration (float32)
        // NetworkVarNames: m_timestamp (GameTime_t)
        // NetworkVarNames: m_timescale (float32)
        // NetworkVarNames: m_nWorldGroupId (WorldGroupId_t)
        public static class CountdownTimer {
            public const nint m_duration = 0x8; // float32
            public const nint m_timestamp = 0xC; // GameTime_t
            public const nint m_timescale = 0x10; // float32
            public const nint m_nWorldGroupId = 0x14; // WorldGroupId_t
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_hOwner (CEntityHandle)
        // NetworkVarNames: m_name (CUtlStringToken)
        public static class CGameSceneNodeHandle {
            public const nint m_hOwner = 0x8; // CEntityHandle
            public const nint m_name = 0xC; // CUtlStringToken
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // NetworkVarNames: nTagTick (GameTick_t)
        // NetworkVarNames: flFlinchModSmall (float)
        // NetworkVarNames: flFlinchModLarge (float)
        // NetworkVarNames: flFriendlyFireDamageReductionRatio (float)
        public static class PredictedDamageTag_t {
            public const nint nTagTick = 0x30; // GameTick_t
            public const nint flFlinchModSmall = 0x34; // float32
            public const nint flFlinchModLarge = 0x38; // float32
            public const nint flFriendlyFireDamageReductionRatio = 0x3C; // float32
        }
        // Parent: CBaseAnimGraph
        // Field count: 14
        public static class C_ClientRagdoll {
            public const nint m_bFadeOut = 0xF88; // bool
            public const nint m_bImportant = 0xF89; // bool
            public const nint m_flEffectTime = 0xF8C; // GameTime_t
            public const nint m_gibDespawnTime = 0xF90; // GameTime_t
            public const nint m_iCurrentFriction = 0xF94; // int32
            public const nint m_iMinFriction = 0xF98; // int32
            public const nint m_iMaxFriction = 0xF9C; // int32
            public const nint m_iFrictionAnimState = 0xFA0; // int32
            public const nint m_bReleaseRagdoll = 0xFA4; // bool
            public const nint m_iEyeAttachment = 0xFA5; // AttachmentHandle_t
            public const nint m_bFadingOut = 0xFA6; // bool
            public const nint m_flScaleEnd = 0xFA8; // float32[10]
            public const nint m_flScaleTimeStart = 0xFD0; // GameTime_t[10]
            public const nint m_flScaleTimeEnd = 0xFF8; // GameTime_t[10]
        }
        // Parent: C_BaseEntity
        // Field count: 1
        public static class C_GlobalLight {
            public const nint m_WindClothForceHandle = 0xA30; // uint16
        }
        // Parent: C_BaseEntity
        // Field count: 10
        //
        // Metadata:
        // NetworkVarNames: m_bHostageAlive (bool)
        // NetworkVarNames: m_isHostageFollowingSomeone (bool)
        // NetworkVarNames: m_iHostageEntityIDs (CEntityIndex)
        // NetworkVarNames: m_bombsiteCenterA (Vector)
        // NetworkVarNames: m_bombsiteCenterB (Vector)
        // NetworkVarNames: m_hostageRescueX (int)
        // NetworkVarNames: m_hostageRescueY (int)
        // NetworkVarNames: m_hostageRescueZ (int)
        // NetworkVarNames: m_bEndMatchNextMapAllVoted (bool)
        public static class C_CSPlayerResource {
            public const nint m_bHostageAlive = 0x568; // bool[12]
            public const nint m_isHostageFollowingSomeone = 0x574; // bool[12]
            public const nint m_iHostageEntityIDs = 0x580; // CEntityIndex[12]
            public const nint m_bombsiteCenterA = 0x5B0; // Vector
            public const nint m_bombsiteCenterB = 0x5BC; // Vector
            public const nint m_hostageRescueX = 0x5C8; // int32[4]
            public const nint m_hostageRescueY = 0x5D8; // int32[4]
            public const nint m_hostageRescueZ = 0x5E8; // int32[4]
            public const nint m_bEndMatchNextMapAllVoted = 0x5F8; // bool
            public const nint m_foundGoalPositions = 0x5F9; // bool
        }
        // Parent: CGameSceneNode
        // Field count: 8
        //
        // Metadata:
        // NetworkVarNames: m_modelState (CModelState)
        // NetworkVarNames: m_bIsAnimationEnabled (bool)
        // NetworkVarNames: m_bUseParentRenderBounds (bool)
        // NetworkVarNames: m_materialGroup (CUtlStringToken)
        // NetworkVarNames: m_nHitboxSet (uint8)
        public static class CSkeletonInstance {
            public const nint m_modelState = 0x170; // CModelState
            public const nint m_bIsAnimationEnabled = 0x3A0; // bool
            public const nint m_bUseParentRenderBounds = 0x3A1; // bool
            public const nint m_bDisableSolidCollisionsForHierarchy = 0x3A2; // bool
            public const nint m_bDirtyMotionType = 0x0; // bitfield:1
            public const nint m_bIsGeneratingLatchedParentSpaceState = 0x0; // bitfield:1
            public const nint m_materialGroup = 0x3A4; // CUtlStringToken
            public const nint m_nHitboxSet = 0x3A8; // uint8
        }
        // Parent: CBodyComponentSkeletonInstance
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_animationController (CBaseAnimGraphController)
        public static class CBodyComponentBaseAnimGraph {
            public const nint m_animationController = 0x490; // CBaseAnimGraphController
        }
        // Parent: CBodyComponent
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_sceneNode (CGameSceneNode)
        public static class CBodyComponentPoint {
            public const nint m_sceneNode = 0x50; // CGameSceneNode
        }
        // Parent: C_BaseCSGrenadeProjectile
        // Field count: 10
        //
        // Metadata:
        // NetworkVarNames: m_nSmokeEffectTickBegin (int)
        // NetworkVarNames: m_bDidSmokeEffect (bool)
        // NetworkVarNames: m_nRandomSeed (int)
        // NetworkVarNames: m_vSmokeColor (Vector)
        // NetworkVarNames: m_vSmokeDetonationPos (Vector)
        // NetworkVarNames: m_VoxelFrameData (uint8)
        // NetworkVarNames: m_nVoxelFrameDataSize (int)
        // NetworkVarNames: m_nVoxelUpdate (int)
        public static class C_SmokeGrenadeProjectile {
            public const nint m_nSmokeEffectTickBegin = 0x1210; // int32
            public const nint m_bDidSmokeEffect = 0x1214; // bool
            public const nint m_nRandomSeed = 0x1218; // int32
            public const nint m_vSmokeColor = 0x121C; // Vector
            public const nint m_vSmokeDetonationPos = 0x1228; // Vector
            public const nint m_VoxelFrameData = 0x1238; // C_NetworkUtlVectorBase<uint8>
            public const nint m_nVoxelFrameDataSize = 0x1250; // int32
            public const nint m_nVoxelUpdate = 0x1254; // int32
            public const nint m_bSmokeVolumeDataReceived = 0x1258; // bool
            public const nint m_bSmokeEffectSpawned = 0x1259; // bool
        }
        // Parent: C_SoundEventEntity
        // Field count: 0
        public static class C_SoundEventEntityAlias_snd_event_point {
        }
        // Parent: C_BaseEntity
        // Field count: 8
        public static class C_CSGO_MapPreviewCameraPath {
            public const nint m_flZFar = 0x568; // float32
            public const nint m_flZNear = 0x56C; // float32
            public const nint m_bLoop = 0x570; // bool
            public const nint m_bVerticalFOV = 0x571; // bool
            public const nint m_bConstantSpeed = 0x572; // bool
            public const nint m_flDuration = 0x574; // float32
            public const nint m_flPathLength = 0x5B8; // float32
            public const nint m_flPathDuration = 0x5BC; // float32
        }
        // Parent: CCSGO_WingmanIntroCharacterPosition
        // Field count: 0
        public static class CCSGO_WingmanIntroTerroristPosition {
        }
        // Parent: C_BaseModelEntity
        // Field count: 24
        //
        // Metadata:
        // NetworkVarNames: m_firePositions (Vector)
        // NetworkVarNames: m_fireParentPositions (Vector)
        // NetworkVarNames: m_bFireIsBurning (bool)
        // NetworkVarNames: m_BurnNormal (Vector)
        // NetworkVarNames: m_fireCount (int)
        // NetworkVarNames: m_nInfernoType (int)
        // NetworkVarNames: m_nFireLifetime (float)
        // NetworkVarNames: m_bInPostEffectTime (bool)
        // NetworkVarNames: m_nFireEffectTickBegin (int)
        public static class C_Inferno {
            public const nint m_nfxFireDamageEffect = 0xD68; // ParticleIndex_t
            public const nint m_hInfernoPointsSnapshot = 0xD70; // CStrongHandle<InfoForResourceTypeIParticleSnapshot>
            public const nint m_hInfernoFillerPointsSnapshot = 0xD78; // CStrongHandle<InfoForResourceTypeIParticleSnapshot>
            public const nint m_hInfernoOutlinePointsSnapshot = 0xD80; // CStrongHandle<InfoForResourceTypeIParticleSnapshot>
            public const nint m_hInfernoClimbingOutlinePointsSnapshot = 0xD88; // CStrongHandle<InfoForResourceTypeIParticleSnapshot>
            public const nint m_hInfernoDecalsSnapshot = 0xD90; // CStrongHandle<InfoForResourceTypeIParticleSnapshot>
            public const nint m_firePositions = 0xD98; // Vector[64]
            public const nint m_fireParentPositions = 0x1098; // Vector[64]
            public const nint m_bFireIsBurning = 0x1398; // bool[64]
            public const nint m_BurnNormal = 0x13D8; // Vector[64]
            public const nint m_fireCount = 0x16D8; // int32
            public const nint m_nInfernoType = 0x16DC; // int32
            public const nint m_nFireLifetime = 0x16E0; // float32
            public const nint m_bInPostEffectTime = 0x16E4; // bool
            public const nint m_lastFireCount = 0x16E8; // int32
            public const nint m_nFireEffectTickBegin = 0x16EC; // int32
            public const nint m_drawableCount = 0x82F0; // int32
            public const nint m_blosCheck = 0x82F4; // bool
            public const nint m_nlosperiod = 0x82F8; // int32
            public const nint m_maxFireHalfWidth = 0x82FC; // float32
            public const nint m_maxFireHeight = 0x8300; // float32
            public const nint m_minBounds = 0x8304; // Vector
            public const nint m_maxBounds = 0x8310; // Vector
            public const nint m_flLastGrassBurnThink = 0x831C; // float32
        }
        // Parent: CBaseAnimGraph
        // Field count: 0
        public static class C_HostageCarriableProp {
        }
        // Parent: C_CSGO_TeamPreviewCamera
        // Field count: 0
        public static class C_CSGO_TerroristWingmanIntroCamera {
        }
        // Parent: C_BaseEntity
        // Field count: 5
        //
        // Metadata:
        // NetworkVarNames: m_hPlayer (CHandle<CCSPlayerPawn>)
        // NetworkVarNames: m_hPingedEntity (CHandle<CBaseEntity>)
        // NetworkVarNames: m_iType (int)
        // NetworkVarNames: m_bUrgent (bool)
        // NetworkVarNames: m_szPlaceName (char)
        public static class C_PlayerPing {
            public const nint m_hPlayer = 0x598; // CHandle<C_CSPlayerPawn>
            public const nint m_hPingedEntity = 0x59C; // CHandle<C_BaseEntity>
            public const nint m_iType = 0x5A0; // int32
            public const nint m_bUrgent = 0x5A4; // bool
            public const nint m_szPlaceName = 0x5A5; // char[18]
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponMP7 {
        }
        // Parent: C_Team
        // Field count: 10
        //
        // Metadata:
        // NetworkVarNames: m_szTeamMatchStat (char)
        // NetworkVarNames: m_numMapVictories (int)
        // NetworkVarNames: m_bSurrendered (bool)
        // NetworkVarNames: m_scoreFirstHalf (int32)
        // NetworkVarNames: m_scoreSecondHalf (int32)
        // NetworkVarNames: m_scoreOvertime (int32)
        // NetworkVarNames: m_szClanTeamname (char)
        // NetworkVarNames: m_iClanID (uint32)
        // NetworkVarNames: m_szTeamFlagImage (char)
        // NetworkVarNames: m_szTeamLogoImage (char)
        public static class C_CSTeam {
            public const nint m_szTeamMatchStat = 0x620; // char[512]
            public const nint m_numMapVictories = 0x820; // int32
            public const nint m_bSurrendered = 0x824; // bool
            public const nint m_scoreFirstHalf = 0x828; // int32
            public const nint m_scoreSecondHalf = 0x82C; // int32
            public const nint m_scoreOvertime = 0x830; // int32
            public const nint m_szClanTeamname = 0x834; // char[129]
            public const nint m_iClanID = 0x8B8; // uint32
            public const nint m_szTeamFlagImage = 0x8BC; // char[8]
            public const nint m_szTeamLogoImage = 0x8C4; // char[8]
        }
        // Parent: C_BaseEntity
        // Field count: 10
        public static class C_CSGO_MapPreviewCameraPathNode {
            public const nint m_szParentPathUniqueID = 0x568; // CUtlSymbolLarge
            public const nint m_nPathIndex = 0x570; // int32
            public const nint m_vInTangentLocal = 0x574; // Vector
            public const nint m_vOutTangentLocal = 0x580; // Vector
            public const nint m_flFOV = 0x58C; // float32
            public const nint m_flCameraSpeed = 0x590; // float32
            public const nint m_flEaseIn = 0x594; // float32
            public const nint m_flEaseOut = 0x598; // float32
            public const nint m_vInTangentWorld = 0x59C; // Vector
            public const nint m_vOutTangentWorld = 0x5A8; // Vector
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponMag7 {
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_DEagle {
        }
        // Parent: C_CSPlayerPawnBase
        // Field count: 104
        //
        // Metadata:
        // NetworkVarNames: m_pBulletServices (CCSPlayer_BulletServices*)
        // NetworkVarNames: m_pHostageServices (CCSPlayer_HostageServices*)
        // NetworkVarNames: m_pBuyServices (CCSPlayer_BuyServices*)
        // NetworkVarNames: m_pGlowServices (CCSPlayer_GlowServices*)
        // NetworkVarNames: m_pActionTrackingServices (CCSPlayer_ActionTrackingServices*)
        // MNetworkVarTypeOverride
        // MNetworkIncludeByName
        // MNetworkVarTypeOverride
        // MNetworkIncludeByName
        // MNetworkVarTypeOverride
        // MNetworkIncludeByName
        // MNetworkVarTypeOverride
        // MNetworkIncludeByName
        // MNetworkVarTypeOverride
        // MNetworkIncludeByName
        // MNetworkVarTypeOverride
        // MNetworkIncludeByName
        // MNetworkVarTypeOverride
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // NetworkVarNames: m_flHealthShotBoostExpirationTime (GameTime_t)
        // NetworkVarNames: m_bHasFemaleVoice (bool)
        // NetworkVarNames: m_szLastPlaceName (char)
        // NetworkVarNames: m_bInBuyZone (bool)
        // NetworkVarNames: m_aimPunchAngle (QAngle)
        // NetworkVarNames: m_aimPunchAngleVel (QAngle)
        // NetworkVarNames: m_aimPunchTickBase (int)
        // NetworkVarNames: m_aimPunchTickFraction (float)
        // NetworkVarNames: m_bInHostageRescueZone (bool)
        // NetworkVarNames: m_bInBombZone (bool)
        // NetworkVarNames: m_bIsBuyMenuOpen (bool)
        // NetworkVarNames: m_flTimeOfLastInjury (GameTime_t)
        // NetworkVarNames: m_flNextSprayDecalTime (GameTime_t)
        // NetworkVarNames: m_iRetakesOffering (int)
        // NetworkVarNames: m_iRetakesOfferingCard (int)
        // NetworkVarNames: m_bRetakesHasDefuseKit (bool)
        // NetworkVarNames: m_bRetakesMVPLastRound (bool)
        // NetworkVarNames: m_iRetakesMVPBoostItem (int)
        // NetworkVarNames: m_RetakesMVPBoostExtraUtility (loadout_slot_t)
        // NetworkVarNames: m_EconGloves (CEconItemView)
        // NetworkVarNames: m_nEconGlovesChanged (uint8)
        // NetworkVarNames: m_nRagdollDamageBone (int)
        // NetworkVarNames: m_vRagdollDamageForce (Vector)
        // NetworkVarNames: m_vRagdollDamagePosition (Vector)
        // NetworkVarNames: m_szRagdollDamageWeaponName (char)
        // NetworkVarNames: m_bRagdollDamageHeadshot (bool)
        // NetworkVarNames: m_vRagdollServerOrigin (Vector)
        // MNetworkReplayCompatField
        // NetworkVarNames: m_qDeathEyeAngles (QAngle)
        // NetworkVarNames: m_bLeftHanded (bool)
        // NetworkVarNames: m_fSwitchedHandednessTime (GameTime_t)
        // NetworkVarNames: m_flViewmodelOffsetX (float)
        // NetworkVarNames: m_flViewmodelOffsetY (float)
        // NetworkVarNames: m_flViewmodelOffsetZ (float)
        // NetworkVarNames: m_flViewmodelFOV (float)
        // NetworkVarNames: m_vecPlayerPatchEconIndices (uint32)
        // NetworkVarNames: m_GunGameImmunityColor (Color)
        // NetworkVarNames: m_bIsWalking (bool)
        // NetworkVarNames: m_entitySpottedState (EntitySpottedState_t)
        // NetworkVarNames: m_bIsScoped (bool)
        // NetworkVarNames: m_bResumeZoom (bool)
        // NetworkVarNames: m_bIsDefusing (bool)
        // NetworkVarNames: m_bIsGrabbingHostage (bool)
        // NetworkVarNames: m_iBlockingUseActionInProgress (CSPlayerBlockingUseAction_t)
        // NetworkVarNames: m_flEmitSoundTime (GameTime_t)
        // NetworkVarNames: m_bInNoDefuseArea (bool)
        // NetworkVarNames: m_nWhichBombZone (int)
        // NetworkVarNames: m_iShotsFired (int)
        // NetworkVarNames: m_flFlinchStack (float)
        // NetworkVarNames: m_flVelocityModifier (float)
        // NetworkVarNames: m_flHitHeading (float)
        // NetworkVarNames: m_nHitBodyPart (int)
        // NetworkVarNames: m_bWaitForNoAttack (bool)
        // NetworkVarNames: m_bKilledByHeadshot (bool)
        // NetworkVarNames: m_ArmorValue (int32)
        // NetworkVarNames: m_unCurrentEquipmentValue (uint16)
        // NetworkVarNames: m_unRoundStartEquipmentValue (uint16)
        // NetworkVarNames: m_unFreezetimeEndEquipmentValue (uint16)
        // NetworkVarNames: m_nLastKillerIndex (CEntityIndex)
        // NetworkVarNames: m_PredictedDamageTags (PredictedDamageTag_t)
        public static class C_CSPlayerPawn {
            public const nint m_pBulletServices = 0x1518; // CCSPlayer_BulletServices*
            public const nint m_pHostageServices = 0x1520; // CCSPlayer_HostageServices*
            public const nint m_pBuyServices = 0x1528; // CCSPlayer_BuyServices*
            public const nint m_pGlowServices = 0x1530; // CCSPlayer_GlowServices*
            public const nint m_pActionTrackingServices = 0x1538; // CCSPlayer_ActionTrackingServices*
            public const nint m_pDamageReactServices = 0x1540; // CCSPlayer_DamageReactServices*
            public const nint m_flHealthShotBoostExpirationTime = 0x1548; // GameTime_t
            public const nint m_flLastFiredWeaponTime = 0x154C; // GameTime_t
            public const nint m_bHasFemaleVoice = 0x1550; // bool
            public const nint m_flLandingTimeSeconds = 0x1554; // float32
            public const nint m_flOldFallVelocity = 0x1558; // float32
            public const nint m_szLastPlaceName = 0x155C; // char[18]
            public const nint m_bPrevDefuser = 0x156E; // bool
            public const nint m_bPrevHelmet = 0x156F; // bool
            public const nint m_nPrevArmorVal = 0x1570; // int32
            public const nint m_nPrevGrenadeAmmoCount = 0x1574; // int32
            public const nint m_unPreviousWeaponHash = 0x1578; // uint32
            public const nint m_unWeaponHash = 0x157C; // uint32
            public const nint m_bInBuyZone = 0x1580; // bool
            public const nint m_bPreviouslyInBuyZone = 0x1581; // bool
            public const nint m_aimPunchAngle = 0x1584; // QAngle
            public const nint m_aimPunchAngleVel = 0x1590; // QAngle
            public const nint m_aimPunchTickBase = 0x159C; // int32
            public const nint m_aimPunchTickFraction = 0x15A0; // float32
            public const nint m_aimPunchCache = 0x15A8; // CUtlVector<QAngle>
            public const nint m_bInLanding = 0x15C8; // bool
            public const nint m_flLandingStartTime = 0x15CC; // float32
            public const nint m_bInHostageRescueZone = 0x15D0; // bool
            public const nint m_bInBombZone = 0x15D1; // bool
            public const nint m_bIsBuyMenuOpen = 0x15D2; // bool
            public const nint m_flTimeOfLastInjury = 0x15D4; // GameTime_t
            public const nint m_flNextSprayDecalTime = 0x15D8; // GameTime_t
            public const nint m_iRetakesOffering = 0x1730; // int32
            public const nint m_iRetakesOfferingCard = 0x1734; // int32
            public const nint m_bRetakesHasDefuseKit = 0x1738; // bool
            public const nint m_bRetakesMVPLastRound = 0x1739; // bool
            public const nint m_iRetakesMVPBoostItem = 0x173C; // int32
            public const nint m_RetakesMVPBoostExtraUtility = 0x1740; // loadout_slot_t
            public const nint m_bNeedToReApplyGloves = 0x1760; // bool
            public const nint m_EconGloves = 0x1768; // C_EconItemView
            public const nint m_nEconGlovesChanged = 0x1BB0; // uint8
            public const nint m_bMustSyncRagdollState = 0x1BB1; // bool
            public const nint m_nRagdollDamageBone = 0x1BB4; // int32
            public const nint m_vRagdollDamageForce = 0x1BB8; // Vector
            public const nint m_vRagdollDamagePosition = 0x1BC4; // Vector
            public const nint m_szRagdollDamageWeaponName = 0x1BD0; // char[64]
            public const nint m_bRagdollDamageHeadshot = 0x1C10; // bool
            public const nint m_vRagdollServerOrigin = 0x1C14; // Vector
            public const nint m_bLastHeadBoneTransformIsValid = 0x2290; // bool
            public const nint m_lastLandTime = 0x2294; // GameTime_t
            public const nint m_bOnGroundLastTick = 0x2298; // bool
            public const nint m_qDeathEyeAngles = 0x22B4; // QAngle
            public const nint m_bSkipOneHeadConstraintUpdate = 0x22C0; // bool
            public const nint m_bLeftHanded = 0x22C1; // bool
            public const nint m_fSwitchedHandednessTime = 0x22C4; // GameTime_t
            public const nint m_flViewmodelOffsetX = 0x22C8; // float32
            public const nint m_flViewmodelOffsetY = 0x22CC; // float32
            public const nint m_flViewmodelOffsetZ = 0x22D0; // float32
            public const nint m_flViewmodelFOV = 0x22D4; // float32
            public const nint m_vecPlayerPatchEconIndices = 0x22D8; // uint32[5]
            public const nint m_GunGameImmunityColor = 0x2310; // Color
            public const nint m_vecBulletHitModels = 0x2360; // CUtlVector<C_BulletHitModel*>
            public const nint m_bIsWalking = 0x2378; // bool
            public const nint m_thirdPersonHeading = 0x2380; // QAngle
            public const nint m_flSlopeDropOffset = 0x2398; // float32
            public const nint m_flSlopeDropHeight = 0x23A8; // float32
            public const nint m_vHeadConstraintOffset = 0x23B8; // Vector
            public const nint m_entitySpottedState = 0x23D0; // EntitySpottedState_t
            public const nint m_bIsScoped = 0x23E8; // bool
            public const nint m_bResumeZoom = 0x23E9; // bool
            public const nint m_bIsDefusing = 0x23EA; // bool
            public const nint m_bIsGrabbingHostage = 0x23EB; // bool
            public const nint m_iBlockingUseActionInProgress = 0x23EC; // CSPlayerBlockingUseAction_t
            public const nint m_flEmitSoundTime = 0x23F0; // GameTime_t
            public const nint m_bInNoDefuseArea = 0x23F4; // bool
            public const nint m_nWhichBombZone = 0x23F8; // int32
            public const nint m_iShotsFired = 0x23FC; // int32
            public const nint m_flFlinchStack = 0x2400; // float32
            public const nint m_flVelocityModifier = 0x2404; // float32
            public const nint m_flHitHeading = 0x2408; // float32
            public const nint m_nHitBodyPart = 0x240C; // int32
            public const nint m_bWaitForNoAttack = 0x2410; // bool
            public const nint m_ignoreLadderJumpTime = 0x2414; // float32
            public const nint m_bKilledByHeadshot = 0x2419; // bool
            public const nint m_ArmorValue = 0x241C; // int32
            public const nint m_unCurrentEquipmentValue = 0x2420; // uint16
            public const nint m_unRoundStartEquipmentValue = 0x2422; // uint16
            public const nint m_unFreezetimeEndEquipmentValue = 0x2424; // uint16
            public const nint m_nLastKillerIndex = 0x2428; // CEntityIndex
            public const nint m_bOldIsScoped = 0x242C; // bool
            public const nint m_bHasDeathInfo = 0x242D; // bool
            public const nint m_flDeathInfoTime = 0x2430; // float32
            public const nint m_vecDeathInfoOrigin = 0x2434; // Vector
            public const nint m_grenadeParameterStashTime = 0x2440; // GameTime_t
            public const nint m_bGrenadeParametersStashed = 0x2444; // bool
            public const nint m_angStashedShootAngles = 0x2448; // QAngle
            public const nint m_vecStashedGrenadeThrowPosition = 0x2454; // Vector
            public const nint m_vecStashedVelocity = 0x2460; // Vector
            public const nint m_angShootAngleHistory = 0x246C; // QAngle[2]
            public const nint m_vecThrowPositionHistory = 0x2484; // Vector[2]
            public const nint m_vecVelocityHistory = 0x249C; // Vector[2]
            public const nint m_PredictedDamageTags = 0x24B8; // C_UtlVectorEmbeddedNetworkVar<PredictedDamageTag_t>
            public const nint m_nPrevHighestReceivedDamageTagTick = 0x2508; // GameTick_t
            public const nint m_nHighestAppliedDamageTagTick = 0x250C; // int32
        }
        // Parent: C_RagdollProp
        // Field count: 7
        //
        // Metadata:
        // NetworkVarNames: m_boneIndexAttached (uint32)
        // NetworkVarNames: m_ragdollAttachedObjectIndex (uint32)
        // NetworkVarNames: m_attachmentPointBoneSpace (Vector)
        // NetworkVarNames: m_attachmentPointRagdollSpace (Vector)
        public static class C_RagdollPropAttached {
            public const nint m_boneIndexAttached = 0x1000; // uint32
            public const nint m_ragdollAttachedObjectIndex = 0x1004; // uint32
            public const nint m_attachmentPointBoneSpace = 0x1008; // Vector
            public const nint m_attachmentPointRagdollSpace = 0x1014; // Vector
            public const nint m_vecOffset = 0x1020; // Vector
            public const nint m_parentTime = 0x102C; // float32
            public const nint m_bHasParent = 0x1030; // bool
        }
        // Parent: C_BaseGrenade
        // Field count: 16
        //
        // Metadata:
        // NetworkVarNames: m_vInitialPosition (Vector)
        // NetworkVarNames: m_vInitialVelocity (Vector)
        // NetworkVarNames: m_nBounces (int)
        // NetworkVarNames: m_nExplodeEffectIndex (HParticleSystemDefinitionStrong)
        // NetworkVarNames: m_nExplodeEffectTickBegin (int)
        // NetworkVarNames: m_vecExplodeEffectOrigin (Vector)
        public static class C_BaseCSGrenadeProjectile {
            public const nint m_vInitialPosition = 0x1170; // Vector
            public const nint m_vInitialVelocity = 0x117C; // Vector
            public const nint m_nBounces = 0x1188; // int32
            public const nint m_nExplodeEffectIndex = 0x1190; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_nExplodeEffectTickBegin = 0x1198; // int32
            public const nint m_vecExplodeEffectOrigin = 0x119C; // Vector
            public const nint m_flSpawnTime = 0x11A8; // GameTime_t
            public const nint vecLastTrailLinePos = 0x11AC; // Vector
            public const nint flNextTrailLineTime = 0x11B8; // GameTime_t
            public const nint m_bExplodeEffectBegan = 0x11BC; // bool
            public const nint m_bCanCreateGrenadeTrail = 0x11BD; // bool
            public const nint m_nSnapshotTrajectoryEffectIndex = 0x11C0; // ParticleIndex_t
            public const nint m_hSnapshotTrajectoryParticleSnapshot = 0x11C8; // CStrongHandle<InfoForResourceTypeIParticleSnapshot>
            public const nint m_arrTrajectoryTrailPoints = 0x11D0; // CUtlVector<Vector>
            public const nint m_arrTrajectoryTrailPointCreationTimes = 0x11E8; // CUtlVector<float32>
            public const nint m_flTrajectoryTrailEffectCreationTime = 0x1200; // float32
        }
        // Parent: C_BaseToggle
        // Field count: 2
        //
        // Metadata:
        // MNetworkIncludeByName
        // NetworkVarNames: m_bDisabled (bool)
        // NetworkVarNames: m_bClientSidePredicted (bool)
        public static class C_BaseTrigger {
            public const nint m_bDisabled = 0xD28; // bool
            public const nint m_bClientSidePredicted = 0xD29; // bool
        }
        // Parent: C_CSWeaponBase
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_SequenceCompleteTimer (CountdownTimer)
        // NetworkVarNames: m_bRedraw (bool)
        public static class C_WeaponBaseItem {
            public const nint m_SequenceCompleteTimer = 0x1B20; // CountdownTimer
            public const nint m_bRedraw = 0x1B38; // bool
        }
        // Parent: None
        // Field count: 21
        //
        // Metadata:
        // NetworkVarNames: m_vOrigin (Vector)
        // NetworkVarNames: m_vStart (Vector)
        // NetworkVarNames: m_vNormal (Vector)
        // NetworkVarNames: m_vAngles (QAngle)
        // NetworkVarNames: m_hEntity (CEntityHandle)
        // NetworkVarNames: m_hOtherEntity (CEntityHandle)
        // NetworkVarNames: m_flScale (float32)
        // NetworkVarNames: m_flMagnitude (float32)
        // NetworkVarNames: m_flRadius (float32)
        // NetworkVarNames: m_nSurfaceProp (CUtlStringToken)
        // NetworkVarNames: m_nEffectIndex (HParticleSystemDefinition)
        // NetworkVarNames: m_nDamageType (uint32)
        // NetworkVarNames: m_nPenetrate (uint8)
        // NetworkVarNames: m_nMaterial (uint16)
        // NetworkVarNames: m_nHitBox (uint16)
        // NetworkVarNames: m_nColor (uint8)
        // NetworkVarNames: m_fFlags (uint8)
        // NetworkVarNames: m_nAttachmentIndex (AttachmentHandle_t)
        // NetworkVarNames: m_nAttachmentName (CUtlStringToken)
        // NetworkVarNames: m_iEffectName (uint16)
        // NetworkVarNames: m_nExplosionType (uint8)
        public static class CEffectData {
            public const nint m_vOrigin = 0x8; // Vector
            public const nint m_vStart = 0x14; // Vector
            public const nint m_vNormal = 0x20; // Vector
            public const nint m_vAngles = 0x2C; // QAngle
            public const nint m_hEntity = 0x38; // CEntityHandle
            public const nint m_hOtherEntity = 0x3C; // CEntityHandle
            public const nint m_flScale = 0x40; // float32
            public const nint m_flMagnitude = 0x44; // float32
            public const nint m_flRadius = 0x48; // float32
            public const nint m_nSurfaceProp = 0x4C; // CUtlStringToken
            public const nint m_nEffectIndex = 0x50; // CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_nDamageType = 0x58; // uint32
            public const nint m_nPenetrate = 0x5C; // uint8
            public const nint m_nMaterial = 0x5E; // uint16
            public const nint m_nHitBox = 0x60; // uint16
            public const nint m_nColor = 0x62; // uint8
            public const nint m_fFlags = 0x63; // uint8
            public const nint m_nAttachmentIndex = 0x64; // AttachmentHandle_t
            public const nint m_nAttachmentName = 0x68; // CUtlStringToken
            public const nint m_iEffectName = 0x6C; // uint16
            public const nint m_nExplosionType = 0x6E; // uint8
        }
        // Parent: C_BaseCSGrenadeProjectile
        // Field count: 0
        public static class C_SensorGrenadeProjectile {
        }
        // Parent: C_BaseCSGrenade
        // Field count: 0
        public static class C_MolotovGrenade {
        }
        // Parent: C_BaseToggle
        // Field count: 3
        //
        // Metadata:
        // NetworkVarNames: m_glowEntity (CHandle<C_BaseModelEntity>)
        // NetworkVarNames: m_usable (bool)
        // NetworkVarNames: m_szDisplayText (string_t)
        public static class C_BaseButton {
            public const nint m_glowEntity = 0xD28; // CHandle<C_BaseModelEntity>
            public const nint m_usable = 0xD2C; // bool
            public const nint m_szDisplayText = 0xD30; // CUtlSymbolLarge
        }
        // Parent: CPlayer_ViewModelServices
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_hViewModel (CHandle<CBaseViewModel>)
        public static class CCSPlayer_ViewModelServices {
            public const nint m_hViewModel = 0x40; // CHandle<C_BaseViewModel>[3]
        }
        // Parent: C_PointEntity
        // Field count: 0
        public static class CInfoParticleTarget {
        }
        // Parent: CPlayer_MovementServices
        // Field count: 12
        //
        // Metadata:
        // NetworkVarNames: m_flFallVelocity (float32)
        // NetworkVarNames: m_bInCrouch (bool)
        // NetworkVarNames: m_nCrouchState (uint32)
        // NetworkVarNames: m_flCrouchTransitionStartTime (GameTime_t)
        // NetworkVarNames: m_bDucked (bool)
        // NetworkVarNames: m_bDucking (bool)
        // NetworkVarNames: m_bInDuckJump (bool)
        public static class CPlayer_MovementServices_Humanoid {
            public const nint m_flStepSoundTime = 0x1D8; // float32
            public const nint m_flFallVelocity = 0x1DC; // float32
            public const nint m_bInCrouch = 0x1E0; // bool
            public const nint m_nCrouchState = 0x1E4; // uint32
            public const nint m_flCrouchTransitionStartTime = 0x1E8; // GameTime_t
            public const nint m_bDucked = 0x1EC; // bool
            public const nint m_bDucking = 0x1ED; // bool
            public const nint m_bInDuckJump = 0x1EE; // bool
            public const nint m_groundNormal = 0x1F0; // Vector
            public const nint m_flSurfaceFriction = 0x1FC; // float32
            public const nint m_surfaceProps = 0x200; // CUtlStringToken
            public const nint m_nStepside = 0x210; // int32
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponAug {
        }
        // Parent: CEnvSoundscapeProxy
        // Field count: 0
        public static class CEnvSoundscapeProxyAlias_snd_soundscape_proxy {
        }
        // Parent: C_BaseClientUIEntity
        // Field count: 28
        //
        // Metadata:
        // NetworkVarNames: m_bIgnoreInput (bool)
        // NetworkVarNames: m_bLit (bool)
        // NetworkVarNames: m_bFollowPlayerAcrossTeleport (bool)
        // NetworkVarNames: m_flWidth (float)
        // NetworkVarNames: m_flHeight (float)
        // NetworkVarNames: m_flDPI (float)
        // NetworkVarNames: m_flInteractDistance (float)
        // NetworkVarNames: m_flDepthOffset (float)
        // NetworkVarNames: m_unOwnerContext (uint32)
        // NetworkVarNames: m_unHorizontalAlign (uint32)
        // NetworkVarNames: m_unVerticalAlign (uint32)
        // NetworkVarNames: m_unOrientation (uint32)
        // NetworkVarNames: m_bAllowInteractionFromAllSceneWorlds (bool)
        // NetworkVarNames: m_vecCSSClasses (string_t)
        // NetworkVarNames: m_bOpaque (bool)
        // NetworkVarNames: m_bNoDepth (bool)
        // NetworkVarNames: m_bRenderBackface (bool)
        // NetworkVarNames: m_bUseOffScreenIndicator (bool)
        // NetworkVarNames: m_bExcludeFromSaveGames (bool)
        // NetworkVarNames: m_bGrabbable (bool)
        // NetworkVarNames: m_bOnlyRenderToTexture (bool)
        // NetworkVarNames: m_bDisableMipGen (bool)
        // NetworkVarNames: m_nExplicitImageLayout (int32)
        public static class C_PointClientUIWorldPanel {
            public const nint m_bForceRecreateNextUpdate = 0xD60; // bool
            public const nint m_bMoveViewToPlayerNextThink = 0xD61; // bool
            public const nint m_bCheckCSSClasses = 0xD62; // bool
            public const nint m_anchorDeltaTransform = 0xD70; // CTransform
            public const nint m_pOffScreenIndicator = 0xF08; // CPointOffScreenIndicatorUi*
            public const nint m_bIgnoreInput = 0xF30; // bool
            public const nint m_bLit = 0xF31; // bool
            public const nint m_bFollowPlayerAcrossTeleport = 0xF32; // bool
            public const nint m_flWidth = 0xF34; // float32
            public const nint m_flHeight = 0xF38; // float32
            public const nint m_flDPI = 0xF3C; // float32
            public const nint m_flInteractDistance = 0xF40; // float32
            public const nint m_flDepthOffset = 0xF44; // float32
            public const nint m_unOwnerContext = 0xF48; // uint32
            public const nint m_unHorizontalAlign = 0xF4C; // uint32
            public const nint m_unVerticalAlign = 0xF50; // uint32
            public const nint m_unOrientation = 0xF54; // uint32
            public const nint m_bAllowInteractionFromAllSceneWorlds = 0xF58; // bool
            public const nint m_vecCSSClasses = 0xF60; // C_NetworkUtlVectorBase<CUtlSymbolLarge>
            public const nint m_bOpaque = 0xF78; // bool
            public const nint m_bNoDepth = 0xF79; // bool
            public const nint m_bRenderBackface = 0xF7A; // bool
            public const nint m_bUseOffScreenIndicator = 0xF7B; // bool
            public const nint m_bExcludeFromSaveGames = 0xF7C; // bool
            public const nint m_bGrabbable = 0xF7D; // bool
            public const nint m_bOnlyRenderToTexture = 0xF7E; // bool
            public const nint m_bDisableMipGen = 0xF7F; // bool
            public const nint m_nExplicitImageLayout = 0xF80; // int32
        }
        // Parent: C_BaseEntity
        // Field count: 0
        public static class C_CSMinimapBoundary {
        }
        // Parent: CCSGameModeRules
        // Field count: 3
        //
        // Metadata:
        // NetworkVarNames: m_flDMBonusStartTime (GameTime_t)
        // NetworkVarNames: m_flDMBonusTimeLength (float)
        // NetworkVarNames: m_sDMBonusWeapon (CUtlString)
        public static class CCSGameModeRules_Deathmatch {
            public const nint m_flDMBonusStartTime = 0x30; // GameTime_t
            public const nint m_flDMBonusTimeLength = 0x34; // float32
            public const nint m_sDMBonusWeapon = 0x38; // CUtlString
        }
        // Parent: C_CSGO_TeamPreviewCharacterPosition
        // Field count: 0
        public static class C_CSGO_EndOfMatchCharacterPosition {
        }
        // Parent: C_SoundOpvarSetPointEntity
        // Field count: 0
        public static class C_SoundOpvarSetAABBEntity {
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // NetworkVarNames: m_nTotalPausedTicks (int)
        // NetworkVarNames: m_nPauseStartTick (int)
        // NetworkVarNames: m_bGamePaused (bool)
        public static class C_GameRules {
            public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
            public const nint m_nTotalPausedTicks = 0x30; // int32
            public const nint m_nPauseStartTick = 0x34; // int32
            public const nint m_bGamePaused = 0x38; // bool
        }
        // Parent: C_BasePropDoor
        // Field count: 0
        public static class C_PropDoorRotating {
        }
        // Parent: C_BaseEntity
        // Field count: 4
        //
        // Metadata:
        // MNetworkIncludeByName
        // NetworkVarNames: m_aPlayerControllers (CHandle<CBasePlayerController>)
        // NetworkVarNames: m_aPlayers (CHandle<C_BasePlayerPawn>)
        // NetworkVarNames: m_iScore (int32)
        // NetworkVarNames: m_szTeamname (char)
        public static class C_Team {
            public const nint m_aPlayerControllers = 0x568; // C_NetworkUtlVectorBase<CHandle<CBasePlayerController>>
            public const nint m_aPlayers = 0x580; // 
            public const nint m_iScore = 0x598; // int32
            public const nint m_szTeamname = 0x59C; // char[129]
        }
        // Parent: C_SoundAreaEntityBase
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_vMin (Vector)
        // NetworkVarNames: m_vMax (Vector)
        public static class C_SoundAreaEntityOrientedBox {
            public const nint m_vMin = 0x590; // Vector
            public const nint m_vMax = 0x59C; // Vector
        }
        // Parent: C_BaseModelEntity
        // Field count: 8
        //
        // Metadata:
        // NetworkVarNames: m_bLoop (bool)
        // NetworkVarNames: m_flFPS (float)
        // NetworkVarNames: m_hPositionKeys (HRenderTextureStrong)
        // NetworkVarNames: m_hRotationKeys (HRenderTextureStrong)
        // NetworkVarNames: m_vAnimationBoundsMin (Vector)
        // NetworkVarNames: m_vAnimationBoundsMax (Vector)
        // NetworkVarNames: m_flStartTime (float)
        // NetworkVarNames: m_flStartFrame (float)
        public static class C_TextureBasedAnimatable {
            public const nint m_bLoop = 0xD28; // bool
            public const nint m_flFPS = 0xD2C; // float32
            public const nint m_hPositionKeys = 0xD30; // 
            public const nint m_hRotationKeys = 0xD38; // 
            public const nint m_vAnimationBoundsMin = 0xD40; // Vector
            public const nint m_vAnimationBoundsMax = 0xD4C; // Vector
            public const nint m_flStartTime = 0xD58; // float32
            public const nint m_flStartFrame = 0xD5C; // float32
        }
        // Parent: C_SoundOpvarSetPointBase
        // Field count: 0
        public static class C_SoundOpvarSetPointEntity {
        }
        // Parent: C_LightEntity
        // Field count: 0
        public static class C_LightOrthoEntity {
        }
        // Parent: CPlayer_WaterServices
        // Field count: 3
        public static class CCSPlayer_WaterServices {
            public const nint m_flWaterJumpTime = 0x40; // float32
            public const nint m_vecWaterJumpVel = 0x44; // Vector
            public const nint m_flSwimSoundTime = 0x50; // float32
        }
        // Parent: C_BaseEntity
        // Field count: 2
        public static class CSkyboxReference {
            public const nint m_worldGroupId = 0x568; // WorldGroupId_t
            public const nint m_hSkyCamera = 0x56C; // CHandle<C_SkyCamera>
        }
        // Parent: C_TonemapController2
        // Field count: 0
        public static class C_TonemapController2Alias_env_tonemap_controller2 {
        }
        // Parent: None
        // Field count: 30
        //
        // Metadata:
        // NetworkVarNames: m_hTargetEntity (CHandle<C_BaseEntity>)
        // NetworkVarNames: m_bState (bool)
        // NetworkVarNames: m_bAlwaysUpdate (bool)
        // NetworkVarNames: m_flLightFOV (float32)
        // NetworkVarNames: m_bEnableShadows (bool)
        // NetworkVarNames: m_bSimpleProjection (bool)
        // NetworkVarNames: m_bLightOnlyTarget (bool)
        // NetworkVarNames: m_bLightWorld (bool)
        // NetworkVarNames: m_bCameraSpace (bool)
        // NetworkVarNames: m_flBrightnessScale (float32)
        // NetworkVarNames: m_LightColor (Color)
        // NetworkVarNames: m_flIntensity (float32)
        // NetworkVarNames: m_flLinearAttenuation (float32)
        // NetworkVarNames: m_flQuadraticAttenuation (float32)
        // NetworkVarNames: m_bVolumetric (bool)
        // NetworkVarNames: m_flVolumetricIntensity (float32)
        // NetworkVarNames: m_flNoiseStrength (float32)
        // NetworkVarNames: m_flFlashlightTime (float32)
        // NetworkVarNames: m_nNumPlanes (uint32)
        // NetworkVarNames: m_flPlaneOffset (float32)
        // NetworkVarNames: m_flColorTransitionTime (float32)
        // NetworkVarNames: m_flAmbient (float32)
        // NetworkVarNames: m_SpotlightTextureName (char)
        // NetworkVarNames: m_nSpotlightTextureFrame (int32)
        // NetworkVarNames: m_nShadowQuality (uint32)
        // NetworkVarNames: m_flNearZ (float32)
        // NetworkVarNames: m_flFarZ (float32)
        // NetworkVarNames: m_flProjectionSize (float32)
        // NetworkVarNames: m_flRotation (float32)
        // NetworkVarNames: m_bFlipHorizontal (bool)
        public static class CProjectedTextureBase {
            public const nint m_hTargetEntity = 0xC; // CHandle<C_BaseEntity>
            public const nint m_bState = 0x10; // bool
            public const nint m_bAlwaysUpdate = 0x11; // bool
            public const nint m_flLightFOV = 0x14; // float32
            public const nint m_bEnableShadows = 0x18; // bool
            public const nint m_bSimpleProjection = 0x19; // bool
            public const nint m_bLightOnlyTarget = 0x1A; // bool
            public const nint m_bLightWorld = 0x1B; // bool
            public const nint m_bCameraSpace = 0x1C; // bool
            public const nint m_flBrightnessScale = 0x20; // float32
            public const nint m_LightColor = 0x24; // Color
            public const nint m_flIntensity = 0x28; // float32
            public const nint m_flLinearAttenuation = 0x2C; // float32
            public const nint m_flQuadraticAttenuation = 0x30; // float32
            public const nint m_bVolumetric = 0x34; // bool
            public const nint m_flVolumetricIntensity = 0x38; // float32
            public const nint m_flNoiseStrength = 0x3C; // float32
            public const nint m_flFlashlightTime = 0x40; // float32
            public const nint m_nNumPlanes = 0x44; // uint32
            public const nint m_flPlaneOffset = 0x48; // float32
            public const nint m_flColorTransitionTime = 0x4C; // float32
            public const nint m_flAmbient = 0x50; // float32
            public const nint m_SpotlightTextureName = 0x54; // char[512]
            public const nint m_nSpotlightTextureFrame = 0x254; // int32
            public const nint m_nShadowQuality = 0x258; // uint32
            public const nint m_flNearZ = 0x25C; // float32
            public const nint m_flFarZ = 0x260; // float32
            public const nint m_flProjectionSize = 0x264; // float32
            public const nint m_flRotation = 0x268; // float32
            public const nint m_bFlipHorizontal = 0x26C; // bool
        }
        // Parent: CPlayerControllerComponent
        // Field count: 8
        //
        // Metadata:
        // NetworkVarNames: m_unMusicID (item_definition_index_t)
        // NetworkVarNames: m_rank (MedalRank_t)
        // NetworkVarNames: m_nPersonaDataPublicLevel (int)
        // NetworkVarNames: m_nPersonaDataPublicCommendsLeader (int)
        // NetworkVarNames: m_nPersonaDataPublicCommendsTeacher (int)
        // NetworkVarNames: m_nPersonaDataPublicCommendsFriendly (int)
        // NetworkVarNames: m_nPersonaDataXpTrailLevel (int)
        // NetworkVarNames: m_vecServerAuthoritativeWeaponSlots (ServerAuthoritativeWeaponSlot_t)
        public static class CCSPlayerController_InventoryServices {
            public const nint m_unMusicID = 0x40; // uint16
            public const nint m_rank = 0x44; // MedalRank_t[6]
            public const nint m_nPersonaDataPublicLevel = 0x5C; // int32
            public const nint m_nPersonaDataPublicCommendsLeader = 0x60; // int32
            public const nint m_nPersonaDataPublicCommendsTeacher = 0x64; // int32
            public const nint m_nPersonaDataPublicCommendsFriendly = 0x68; // int32
            public const nint m_nPersonaDataXpTrailLevel = 0x6C; // int32
            public const nint m_vecServerAuthoritativeWeaponSlots = 0x70; // C_UtlVectorEmbeddedNetworkVar<ServerAuthoritativeWeaponSlot_t>
        }
        // Parent: C_PathParticleRope
        // Field count: 0
        public static class C_PathParticleRopeAlias_path_particle_rope_clientside {
        }
        // Parent: CPlayerPawnComponent
        // Field count: 0
        public static class CPlayer_UseServices {
        }
        // Parent: C_PredictedViewModel
        // Field count: 4
        //
        // Metadata:
        // NetworkVarNames: m_bShouldIgnoreOffsetAndAccuracy (bool)
        public static class C_CSGOViewModel {
            public const nint m_bShouldIgnoreOffsetAndAccuracy = 0x1021; // bool
            public const nint m_nLastKnownAssociatedWeaponEntIndex = 0x1024; // CEntityIndex
            public const nint m_bNeedToQueueHighResComposite = 0x1028; // bool
            public const nint m_vLoweredWeaponOffset = 0x1078; // QAngle
        }
        // Parent: CEntityComponent
        // Field count: 1
        public static class CScriptComponent {
            public const nint m_scriptClassName = 0x30; // CUtlSymbolLarge
        }
        // Parent: C_BaseEntity
        // Field count: 17
        //
        // Metadata:
        // NetworkVarNames: m_Entity_hLightProbeTexture (HRenderTextureStrong)
        // NetworkVarNames: m_Entity_hLightProbeDirectLightIndicesTexture (HRenderTextureStrong)
        // NetworkVarNames: m_Entity_hLightProbeDirectLightScalarsTexture (HRenderTextureStrong)
        // NetworkVarNames: m_Entity_hLightProbeDirectLightShadowsTexture (HRenderTextureStrong)
        // NetworkVarNames: m_Entity_vBoxMins (Vector)
        // NetworkVarNames: m_Entity_vBoxMaxs (Vector)
        // NetworkVarNames: m_Entity_bMoveable (bool)
        // NetworkVarNames: m_Entity_nHandshake (int)
        // NetworkVarNames: m_Entity_nPriority (int)
        // NetworkVarNames: m_Entity_bStartDisabled (bool)
        // NetworkVarNames: m_Entity_nLightProbeSizeX (int)
        // NetworkVarNames: m_Entity_nLightProbeSizeY (int)
        // NetworkVarNames: m_Entity_nLightProbeSizeZ (int)
        // NetworkVarNames: m_Entity_nLightProbeAtlasX (int)
        // NetworkVarNames: m_Entity_nLightProbeAtlasY (int)
        // NetworkVarNames: m_Entity_nLightProbeAtlasZ (int)
        // NetworkVarNames: m_Entity_bEnabled (bool)
        public static class C_EnvLightProbeVolume {
            public const nint m_Entity_hLightProbeTexture = 0x1548; // 
            public const nint m_Entity_hLightProbeDirectLightIndicesTexture = 0x1550; // 
            public const nint m_Entity_hLightProbeDirectLightScalarsTexture = 0x1558; // 
            public const nint m_Entity_hLightProbeDirectLightShadowsTexture = 0x1560; // 
            public const nint m_Entity_vBoxMins = 0x1568; // Vector
            public const nint m_Entity_vBoxMaxs = 0x1574; // Vector
            public const nint m_Entity_bMoveable = 0x1580; // bool
            public const nint m_Entity_nHandshake = 0x1584; // int32
            public const nint m_Entity_nPriority = 0x1588; // int32
            public const nint m_Entity_bStartDisabled = 0x158C; // bool
            public const nint m_Entity_nLightProbeSizeX = 0x1590; // int32
            public const nint m_Entity_nLightProbeSizeY = 0x1594; // int32
            public const nint m_Entity_nLightProbeSizeZ = 0x1598; // int32
            public const nint m_Entity_nLightProbeAtlasX = 0x159C; // int32
            public const nint m_Entity_nLightProbeAtlasY = 0x15A0; // int32
            public const nint m_Entity_nLightProbeAtlasZ = 0x15A4; // int32
            public const nint m_Entity_bEnabled = 0x15B1; // bool
        }
        // Parent: CBaseAnimGraph
        // Field count: 2
        public static class C_ViewmodelAttachmentModel {
            public const nint m_bShouldFrontFaceCullLeftHanded = 0xF90; // bool
            public const nint m_bCreatedLeftHanded = 0xF91; // bool
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class CCSPointScriptExtensions_player_controller {
        }
        // Parent: C_BaseCSGrenade
        // Field count: 0
        public static class C_Flashbang {
        }
        // Parent: C_CSWeaponBase
        // Field count: 0
        public static class CBumpMine {
        }
        // Parent: None
        // Field count: 13
        //
        // Metadata:
        // NetworkVarNames: m_iKills (int)
        // NetworkVarNames: m_iDeaths (int)
        // NetworkVarNames: m_iAssists (int)
        // NetworkVarNames: m_iDamage (int)
        // NetworkVarNames: m_iEquipmentValue (int)
        // NetworkVarNames: m_iMoneySaved (int)
        // NetworkVarNames: m_iKillReward (int)
        // NetworkVarNames: m_iLiveTime (int)
        // NetworkVarNames: m_iHeadShotKills (int)
        // NetworkVarNames: m_iObjective (int)
        // NetworkVarNames: m_iCashEarned (int)
        // NetworkVarNames: m_iUtilityDamage (int)
        // NetworkVarNames: m_iEnemiesFlashed (int)
        public static class CSPerRoundStats_t {
            public const nint m_iKills = 0x30; // int32
            public const nint m_iDeaths = 0x34; // int32
            public const nint m_iAssists = 0x38; // int32
            public const nint m_iDamage = 0x3C; // int32
            public const nint m_iEquipmentValue = 0x40; // int32
            public const nint m_iMoneySaved = 0x44; // int32
            public const nint m_iKillReward = 0x48; // int32
            public const nint m_iLiveTime = 0x4C; // int32
            public const nint m_iHeadShotKills = 0x50; // int32
            public const nint m_iObjective = 0x54; // int32
            public const nint m_iCashEarned = 0x58; // int32
            public const nint m_iUtilityDamage = 0x5C; // int32
            public const nint m_iEnemiesFlashed = 0x60; // int32
        }
        // Parent: C_BaseEntity
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_iCurrentMaxRagdollCount (int8)
        public static class CRagdollManager {
            public const nint m_iCurrentMaxRagdollCount = 0x568; // int8
        }
        // Parent: C_BaseEntity
        // Field count: 30
        //
        // Metadata:
        // NetworkVarNames: m_bTimerPaused (bool)
        // NetworkVarNames: m_flTimeRemaining (float)
        // NetworkVarNames: m_flTimerEndTime (GameTime_t)
        // NetworkVarNames: m_bIsDisabled (bool)
        // NetworkVarNames: m_bShowInHUD (bool)
        // NetworkVarNames: m_nTimerLength (int)
        // NetworkVarNames: m_nTimerInitialLength (int)
        // NetworkVarNames: m_nTimerMaxLength (int)
        // NetworkVarNames: m_bAutoCountdown (bool)
        // NetworkVarNames: m_nSetupTimeLength (int)
        // NetworkVarNames: m_nState (int)
        // NetworkVarNames: m_bStartPaused (bool)
        // NetworkVarNames: m_bInCaptureWatchState (bool)
        // NetworkVarNames: m_flTotalTime (float)
        // NetworkVarNames: m_bStopWatchTimer (bool)
        public static class C_TeamRoundTimer {
            public const nint m_bTimerPaused = 0x568; // bool
            public const nint m_flTimeRemaining = 0x56C; // float32
            public const nint m_flTimerEndTime = 0x570; // GameTime_t
            public const nint m_bIsDisabled = 0x574; // bool
            public const nint m_bShowInHUD = 0x575; // bool
            public const nint m_nTimerLength = 0x578; // int32
            public const nint m_nTimerInitialLength = 0x57C; // int32
            public const nint m_nTimerMaxLength = 0x580; // int32
            public const nint m_bAutoCountdown = 0x584; // bool
            public const nint m_nSetupTimeLength = 0x588; // int32
            public const nint m_nState = 0x58C; // int32
            public const nint m_bStartPaused = 0x590; // bool
            public const nint m_bInCaptureWatchState = 0x591; // bool
            public const nint m_flTotalTime = 0x594; // float32
            public const nint m_bStopWatchTimer = 0x598; // bool
            public const nint m_bFireFinished = 0x599; // bool
            public const nint m_bFire5MinRemain = 0x59A; // bool
            public const nint m_bFire4MinRemain = 0x59B; // bool
            public const nint m_bFire3MinRemain = 0x59C; // bool
            public const nint m_bFire2MinRemain = 0x59D; // bool
            public const nint m_bFire1MinRemain = 0x59E; // bool
            public const nint m_bFire30SecRemain = 0x59F; // bool
            public const nint m_bFire10SecRemain = 0x5A0; // bool
            public const nint m_bFire5SecRemain = 0x5A1; // bool
            public const nint m_bFire4SecRemain = 0x5A2; // bool
            public const nint m_bFire3SecRemain = 0x5A3; // bool
            public const nint m_bFire2SecRemain = 0x5A4; // bool
            public const nint m_bFire1SecRemain = 0x5A5; // bool
            public const nint m_nOldTimerLength = 0x5A8; // int32
            public const nint m_nOldTimerState = 0x5AC; // int32
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_nItemDefIndex (uint16)
        // NetworkVarNames: m_nCount (uint16)
        public static class WeaponPurchaseCount_t {
            public const nint m_nItemDefIndex = 0x30; // uint16
            public const nint m_nCount = 0x32; // uint16
        }
        // Parent: C_BaseCSGrenade
        // Field count: 0
        public static class C_SmokeGrenade {
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponGalilAR {
        }
        // Parent: CBaseAnimGraph
        // Field count: 0
        public static class C_WorldModelGloves {
        }
        // Parent: C_ModelPointEntity
        // Field count: 0
        public static class C_EnvProjectedTexture {
        }
        // Parent: C_BaseEntity
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_pathString (CUtlString)
        public static class CPathSimple {
            public const nint m_pathString = 0x5C0; // CUtlString
        }
        // Parent: CPlayer_CameraServices
        // Field count: 6
        //
        // Metadata:
        // NetworkVarNames: m_iFOV (uint32)
        // NetworkVarNames: m_iFOVStart (uint32)
        // NetworkVarNames: m_flFOVTime (GameTime_t)
        // NetworkVarNames: m_flFOVRate (float32)
        // NetworkVarNames: m_hZoomOwner (CHandle<CBaseEntity>)
        public static class CCSPlayerBase_CameraServices {
            public const nint m_iFOV = 0x210; // uint32
            public const nint m_iFOVStart = 0x214; // uint32
            public const nint m_flFOVTime = 0x218; // GameTime_t
            public const nint m_flFOVRate = 0x21C; // float32
            public const nint m_hZoomOwner = 0x220; // CHandle<C_BaseEntity>
            public const nint m_flLastShotFOV = 0x224; // float32
        }
        // Parent: C_PointClientUIWorldPanel
        // Field count: 4
        public static class CPointOffScreenIndicatorUi {
            public const nint m_bBeenEnabled = 0xF90; // bool
            public const nint m_bHide = 0xF91; // bool
            public const nint m_flSeenTargetTime = 0xF94; // float32
            public const nint m_pTargetPanel = 0xF98; // C_PointClientUIWorldPanel*
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class CCSPointScriptExtensions_entity {
        }
        // Parent: CBodyComponentSkeletonInstance
        // Field count: 0
        public static class CBodyComponentBaseModelEntity {
        }
        // Parent: C_CSWeaponBase
        // Field count: 6
        //
        // Metadata:
        // NetworkVarNames: m_zoomLevel (int)
        // NetworkVarNames: m_iBurstShotsRemaining (int)
        // NetworkVarNames: m_bNeedsBoltAction (bool)
        public static class C_CSWeaponBaseGun {
            public const nint m_zoomLevel = 0x1B20; // int32
            public const nint m_iBurstShotsRemaining = 0x1B24; // int32
            public const nint m_iSilencerBodygroup = 0x1B28; // int32
            public const nint m_silencedModelIndex = 0x1B38; // int32
            public const nint m_inPrecache = 0x1B3C; // bool
            public const nint m_bNeedsBoltAction = 0x1B3D; // bool
        }
        // Parent: C_BaseEntity
        // Field count: 4
        //
        // Metadata:
        // NetworkVarNames: m_skyboxData (sky3dparams_t)
        // NetworkVarNames: m_skyboxSlotToken (CUtlStringToken)
        public static class C_SkyCamera {
            public const nint m_skyboxData = 0x568; // sky3dparams_t
            public const nint m_skyboxSlotToken = 0x5F8; // CUtlStringToken
            public const nint m_bUseAngles = 0x5FC; // bool
            public const nint m_pNext = 0x600; // C_SkyCamera*
        }
        // Parent: C_BaseModelEntity
        // Field count: 0
        public static class C_World {
        }
        // Parent: C_BaseModelEntity
        // Field count: 13
        //
        // Metadata:
        // NetworkVarNames: m_flStartTime (GameTime_t)
        // NetworkVarNames: m_flFadeInStart (float32)
        // NetworkVarNames: m_flFadeInLength (float32)
        // NetworkVarNames: m_flFadeOutModelStart (float32)
        // NetworkVarNames: m_flFadeOutModelLength (float32)
        // NetworkVarNames: m_flFadeOutStart (float32)
        // NetworkVarNames: m_flFadeOutLength (float32)
        // NetworkVarNames: m_nDissolveType (EntityDisolveType_t)
        // NetworkVarNames: m_vDissolverOrigin (Vector)
        // NetworkVarNames: m_nMagnitude (uint32)
        public static class C_EntityDissolve {
            public const nint m_flStartTime = 0xD30; // GameTime_t
            public const nint m_flFadeInStart = 0xD34; // float32
            public const nint m_flFadeInLength = 0xD38; // float32
            public const nint m_flFadeOutModelStart = 0xD3C; // float32
            public const nint m_flFadeOutModelLength = 0xD40; // float32
            public const nint m_flFadeOutStart = 0xD44; // float32
            public const nint m_flFadeOutLength = 0xD48; // float32
            public const nint m_flNextSparkTime = 0xD4C; // GameTime_t
            public const nint m_nDissolveType = 0xD50; // EntityDisolveType_t
            public const nint m_vDissolverOrigin = 0xD54; // Vector
            public const nint m_nMagnitude = 0xD60; // uint32
            public const nint m_bCoreExplode = 0xD64; // bool
            public const nint m_bLinkedToServerEnt = 0xD65; // bool
        }
        // Parent: CPlayer_UseServices
        // Field count: 0
        public static class CCSObserver_UseServices {
        }
        // Parent: None
        // Field count: 14
        //
        // Metadata:
        // NetworkVarNames: m_hCtrl (CHandle<CFogController>)
        public static class C_fogplayerparams_t {
            public const nint m_hCtrl = 0x8; // CHandle<C_FogController>
            public const nint m_flTransitionTime = 0xC; // float32
            public const nint m_OldColor = 0x10; // Color
            public const nint m_flOldStart = 0x14; // float32
            public const nint m_flOldEnd = 0x18; // float32
            public const nint m_flOldMaxDensity = 0x1C; // float32
            public const nint m_flOldHDRColorScale = 0x20; // float32
            public const nint m_flOldFarZ = 0x24; // float32
            public const nint m_NewColor = 0x28; // Color
            public const nint m_flNewStart = 0x2C; // float32
            public const nint m_flNewEnd = 0x30; // float32
            public const nint m_flNewMaxDensity = 0x34; // float32
            public const nint m_flNewHDRColorScale = 0x38; // float32
            public const nint m_flNewFarZ = 0x3C; // float32
        }
        // Parent: C_BasePlayerPawn
        // Field count: 65
        //
        // Metadata:
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByUserGroup
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // NetworkVarNames: m_pPingServices (CCSPlayer_PingServices*)
        // NetworkVarNames: m_pViewModelServices (CPlayer_ViewModelServices*)
        // NetworkVarNames: m_iPlayerState (CSPlayerState)
        // NetworkVarNames: m_bIsRescuing (bool)
        // NetworkVarNames: m_fImmuneToGunGameDamageTime (GameTime_t)
        // NetworkVarNames: m_bGunGameImmunity (bool)
        // NetworkVarNames: m_bHasMovedSinceSpawn (bool)
        // NetworkVarNames: m_fMolotovUseTime (float)
        // NetworkVarNames: m_fMolotovDamageTime (float)
        // NetworkVarNames: m_iThrowGrenadeCounter (int)
        // NetworkVarNames: m_iProgressBarDuration (int)
        // NetworkVarNames: m_flProgressBarStartTime (float)
        // NetworkVarNames: m_flFlashMaxAlpha (float)
        // NetworkVarNames: m_flFlashDuration (float)
        // NetworkVarNames: m_cycleLatch (int)
        // NetworkVarNames: m_hOriginalController (CHandle<CCSPlayerController>)
        public static class C_CSPlayerPawnBase {
            public const nint m_pPingServices = 0x1360; // CCSPlayer_PingServices*
            public const nint m_pViewModelServices = 0x1368; // CPlayer_ViewModelServices*
            public const nint m_fRenderingClipPlane = 0x1370; // float32[4]
            public const nint m_nLastClipPlaneSetupFrame = 0x1380; // int32
            public const nint m_vecLastClipCameraPos = 0x1384; // Vector
            public const nint m_vecLastClipCameraForward = 0x1390; // Vector
            public const nint m_bClipHitStaticWorld = 0x139C; // bool
            public const nint m_bCachedPlaneIsValid = 0x139D; // bool
            public const nint m_pClippingWeapon = 0x13A0; // C_CSWeaponBase*
            public const nint m_previousPlayerState = 0x13A8; // CSPlayerState
            public const nint m_iPlayerState = 0x13AC; // CSPlayerState
            public const nint m_bIsRescuing = 0x13B0; // bool
            public const nint m_fImmuneToGunGameDamageTime = 0x13B4; // GameTime_t
            public const nint m_fImmuneToGunGameDamageTimeLast = 0x13B8; // GameTime_t
            public const nint m_bGunGameImmunity = 0x13BC; // bool
            public const nint m_bHasMovedSinceSpawn = 0x13BD; // bool
            public const nint m_fMolotovUseTime = 0x13C0; // float32
            public const nint m_fMolotovDamageTime = 0x13C4; // float32
            public const nint m_iThrowGrenadeCounter = 0x13C8; // int32
            public const nint m_flLastSpawnTimeIndex = 0x13CC; // GameTime_t
            public const nint m_iProgressBarDuration = 0x13D0; // int32
            public const nint m_flProgressBarStartTime = 0x13D4; // float32
            public const nint m_vecIntroStartEyePosition = 0x13D8; // Vector
            public const nint m_vecIntroStartPlayerForward = 0x13E4; // Vector
            public const nint m_flClientDeathTime = 0x13F0; // GameTime_t
            public const nint m_bScreenTearFrameCaptured = 0x13F4; // bool
            public const nint m_flFlashBangTime = 0x13F8; // float32
            public const nint m_flFlashScreenshotAlpha = 0x13FC; // float32
            public const nint m_flFlashOverlayAlpha = 0x1400; // float32
            public const nint m_bFlashBuildUp = 0x1404; // bool
            public const nint m_bFlashDspHasBeenCleared = 0x1405; // bool
            public const nint m_bFlashScreenshotHasBeenGrabbed = 0x1406; // bool
            public const nint m_flFlashMaxAlpha = 0x1408; // float32
            public const nint m_flFlashDuration = 0x140C; // float32
            public const nint m_iHealthBarRenderMaskIndex = 0x1410; // int32
            public const nint m_flHealthFadeValue = 0x1414; // float32
            public const nint m_flHealthFadeAlpha = 0x1418; // float32
            public const nint m_flDeathCCWeight = 0x1428; // float32
            public const nint m_flPrevRoundEndTime = 0x142C; // float32
            public const nint m_flPrevMatchEndTime = 0x1430; // float32
            public const nint m_angEyeAngles = 0x1438; // QAngle
            public const nint m_fNextThinkPushAway = 0x1450; // float32
            public const nint m_bShouldAutobuyDMWeapons = 0x1454; // bool
            public const nint m_bShouldAutobuyNow = 0x1455; // bool
            public const nint m_iIDEntIndex = 0x1458; // CEntityIndex
            public const nint m_delayTargetIDTimer = 0x1460; // CountdownTimer
            public const nint m_iTargetItemEntIdx = 0x1478; // CEntityIndex
            public const nint m_iOldIDEntIndex = 0x147C; // CEntityIndex
            public const nint m_holdTargetIDTimer = 0x1480; // CountdownTimer
            public const nint m_flCurrentMusicStartTime = 0x149C; // float32
            public const nint m_flMusicRoundStartTime = 0x14A0; // float32
            public const nint m_bDeferStartMusicOnWarmup = 0x14A4; // bool
            public const nint m_cycleLatch = 0x14A8; // int32
            public const nint m_serverIntendedCycle = 0x14AC; // float32
            public const nint m_flLastSmokeOverlayAlpha = 0x14B0; // float32
            public const nint m_flLastSmokeAge = 0x14B4; // float32
            public const nint m_vLastSmokeOverlayColor = 0x14B8; // Vector
            public const nint m_nPlayerSmokedFx = 0x14C4; // ParticleIndex_t
            public const nint m_nPlayerInfernoBodyFx = 0x14C8; // ParticleIndex_t
            public const nint m_nPlayerInfernoFootFx = 0x14CC; // ParticleIndex_t
            public const nint m_flNextMagDropTime = 0x14D0; // float32
            public const nint m_nLastMagDropAttachmentIndex = 0x14D4; // int32
            public const nint m_vecLastAliveLocalVelocity = 0x14D8; // Vector
            public const nint m_bGuardianShouldSprayCustomXMark = 0x1500; // bool
            public const nint m_hOriginalController = 0x1508; // CHandle<CCSPlayerController>
        }
        // Parent: C_WeaponBaseItem
        // Field count: 0
        public static class C_Item_Healthshot {
        }
        // Parent: None
        // Field count: 29
        //
        // Metadata:
        // NetworkVarNames: m_flStartTime (GameTime_t)
        // NetworkVarNames: m_iWindSeed (uint32)
        // NetworkVarNames: m_iMinWind (uint16)
        // NetworkVarNames: m_iMaxWind (uint16)
        // NetworkVarNames: m_windRadius (int32)
        // NetworkVarNames: m_iMinGust (uint16)
        // NetworkVarNames: m_iMaxGust (uint16)
        // NetworkVarNames: m_flMinGustDelay (float32)
        // NetworkVarNames: m_flMaxGustDelay (float32)
        // NetworkVarNames: m_flGustDuration (float32)
        // NetworkVarNames: m_iGustDirChange (uint16)
        // NetworkVarNames: m_location (Vector)
        // NetworkVarNames: m_iInitialWindDir (uint16)
        // NetworkVarNames: m_flInitialWindSpeed (float32)
        public static class C_EnvWindShared {
            public const nint m_flStartTime = 0x8; // GameTime_t
            public const nint m_iWindSeed = 0xC; // uint32
            public const nint m_iMinWind = 0x10; // uint16
            public const nint m_iMaxWind = 0x12; // uint16
            public const nint m_windRadius = 0x14; // int32
            public const nint m_iMinGust = 0x18; // uint16
            public const nint m_iMaxGust = 0x1A; // uint16
            public const nint m_flMinGustDelay = 0x1C; // float32
            public const nint m_flMaxGustDelay = 0x20; // float32
            public const nint m_flGustDuration = 0x24; // float32
            public const nint m_iGustDirChange = 0x28; // uint16
            public const nint m_location = 0x2C; // Vector
            public const nint m_iszGustSound = 0x38; // int32
            public const nint m_iWindDir = 0x3C; // int32
            public const nint m_flWindSpeed = 0x40; // float32
            public const nint m_currentWindVector = 0x44; // Vector
            public const nint m_CurrentSwayVector = 0x50; // Vector
            public const nint m_PrevSwayVector = 0x5C; // Vector
            public const nint m_iInitialWindDir = 0x68; // uint16
            public const nint m_flInitialWindSpeed = 0x6C; // float32
            public const nint m_flVariationTime = 0x70; // GameTime_t
            public const nint m_flSwayTime = 0x74; // GameTime_t
            public const nint m_flSimTime = 0x78; // GameTime_t
            public const nint m_flSwitchTime = 0x7C; // GameTime_t
            public const nint m_flAveWindSpeed = 0x80; // float32
            public const nint m_bGusting = 0x84; // bool
            public const nint m_flWindAngleVariation = 0x88; // float32
            public const nint m_flWindSpeedVariation = 0x8C; // float32
            public const nint m_hEntOwner = 0x90; // CHandle<C_BaseEntity>
        }
        // Parent: C_BaseTrigger
        // Field count: 16
        //
        // Metadata:
        // NetworkVarNames: m_hPostSettings (HPostProcessingStrong)
        // NetworkVarNames: m_flFadeDuration (float)
        // NetworkVarNames: m_flMinLogExposure (float)
        // NetworkVarNames: m_flMaxLogExposure (float)
        // NetworkVarNames: m_flMinExposure (float)
        // NetworkVarNames: m_flMaxExposure (float)
        // NetworkVarNames: m_flExposureCompensation (float)
        // NetworkVarNames: m_flExposureFadeSpeedUp (float)
        // NetworkVarNames: m_flExposureFadeSpeedDown (float)
        // NetworkVarNames: m_flTonemapEVSmoothingRange (float)
        // NetworkVarNames: m_bMaster (bool)
        // NetworkVarNames: m_bExposureControl (bool)
        // NetworkVarNames: m_flRate (float)
        // NetworkVarNames: m_flTonemapPercentTarget (float)
        // NetworkVarNames: m_flTonemapPercentBrightPixels (float)
        // NetworkVarNames: m_flTonemapMinAvgLum (float)
        public static class C_PostProcessingVolume {
            public const nint m_hPostSettings = 0xD40; // CStrongHandle<InfoForResourceTypeCPostProcessingResource>
            public const nint m_flFadeDuration = 0xD48; // float32
            public const nint m_flMinLogExposure = 0xD4C; // float32
            public const nint m_flMaxLogExposure = 0xD50; // float32
            public const nint m_flMinExposure = 0xD54; // float32
            public const nint m_flMaxExposure = 0xD58; // float32
            public const nint m_flExposureCompensation = 0xD5C; // float32
            public const nint m_flExposureFadeSpeedUp = 0xD60; // float32
            public const nint m_flExposureFadeSpeedDown = 0xD64; // float32
            public const nint m_flTonemapEVSmoothingRange = 0xD68; // float32
            public const nint m_bMaster = 0xD6C; // bool
            public const nint m_bExposureControl = 0xD6D; // bool
            public const nint m_flRate = 0xD70; // float32
            public const nint m_flTonemapPercentTarget = 0xD74; // float32
            public const nint m_flTonemapPercentBrightPixels = 0xD78; // float32
            public const nint m_flTonemapMinAvgLum = 0xD7C; // float32
        }
        // Parent: CPlayerPawnComponent
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_hPlayerPing (CHandle<CBaseEntity>)
        public static class CCSPlayer_PingServices {
            public const nint m_hPlayerPing = 0x40; // CHandle<C_BaseEntity>
        }
        // Parent: CPlayerPawnComponent
        // Field count: 0
        public static class CPlayer_FlashlightServices {
        }
        // Parent: C_BaseModelEntity
        // Field count: 0
        public static class CServerOnlyModelEntity {
        }
        // Parent: CAttributeManager
        // Field count: 3
        //
        // Metadata:
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // NetworkVarNames: m_Item (CEconItemView)
        public static class C_AttributeContainer {
            public const nint m_Item = 0x50; // C_EconItemView
            public const nint m_iExternalItemProviderRegisteredToken = 0x498; // int32
            public const nint m_ullRegisteredAsItemID = 0x4A0; // uint64
        }
        // Parent: C_BaseModelEntity
        // Field count: 0
        //
        // Metadata:
        // MNetworkOverride
        // MNetworkOverride
        public static class C_FuncRotating {
        }
        // Parent: C_BaseEntity
        // Field count: 4
        //
        // Metadata:
        // NetworkVarNames: m_flScale (float32)
        // NetworkVarNames: m_flStartScale (float32)
        // NetworkVarNames: m_flScaleTime (float)
        // NetworkVarNames: m_nFlags (uint32)
        public static class C_BaseFire {
            public const nint m_flScale = 0x568; // float32
            public const nint m_flStartScale = 0x56C; // float32
            public const nint m_flScaleTime = 0x570; // float32
            public const nint m_nFlags = 0x574; // uint32
        }
        // Parent: C_BaseEntity
        // Field count: 16
        //
        // Metadata:
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkUserGroupProxy
        // MNetworkUserGroupProxy
        // MNetworkIncludeByUserGroup
        // NetworkVarNames: m_nTickBase (uint32)
        // NetworkVarNames: m_hPawn (CHandle<CBasePlayerPawn>)
        // NetworkVarNames: m_bKnownTeamMismatch (bool)
        // NetworkVarNames: m_iConnected (PlayerConnectedState)
        // NetworkVarNames: m_iszPlayerName (char)
        // NetworkVarNames: m_steamID (uint64)
        // NetworkVarNames: m_iDesiredFOV (uint32)
        // MNetworkReplayCompatField
        public static class CBasePlayerController {
            public const nint m_nFinalPredictedTick = 0x570; // int32
            public const nint m_CommandContext = 0x578; // C_CommandContext
            public const nint m_nInButtonsWhichAreToggles = 0x620; // uint64
            public const nint m_nTickBase = 0x628; // uint32
            public const nint m_hPawn = 0x62C; // CHandle<C_BasePlayerPawn>
            public const nint m_bKnownTeamMismatch = 0x630; // bool
            public const nint m_hPredictedPawn = 0x634; // CHandle<C_BasePlayerPawn>
            public const nint m_nSplitScreenSlot = 0x638; // CSplitScreenSlot
            public const nint m_hSplitOwner = 0x63C; // CHandle<CBasePlayerController>
            public const nint m_hSplitScreenPlayers = 0x640; // CUtlVector<CHandle<CBasePlayerController>>
            public const nint m_bIsHLTV = 0x658; // bool
            public const nint m_iConnected = 0x65C; // PlayerConnectedState
            public const nint m_iszPlayerName = 0x660; // char[128]
            public const nint m_steamID = 0x6E8; // uint64
            public const nint m_bIsLocalPlayerController = 0x6F0; // bool
            public const nint m_iDesiredFOV = 0x6F4; // uint32
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class CPointTemplateAPI {
        }
        // Parent: C_BaseCSGrenadeProjectile
        // Field count: 3
        //
        // Metadata:
        // NetworkVarNames: m_nDecoyShotTick (int)
        public static class C_DecoyProjectile {
            public const nint m_nDecoyShotTick = 0x1208; // int32
            public const nint m_nClientLastKnownDecoyShotTick = 0x120C; // int32
            public const nint m_flTimeParticleEffectSpawn = 0x1230; // GameTime_t
        }
        // Parent: CBaseAnimGraph
        // Field count: 0
        public static class C_WaterBullet {
        }
        // Parent: C_CSPlayerPawn
        // Field count: 3
        public static class C_CSGO_PreviewPlayer {
            public const nint m_animgraph = 0x3A40; // CUtlString
            public const nint m_animgraphCharacterModeString = 0x3A48; // CGlobalSymbol
            public const nint m_flInitialModelScale = 0x3A50; // float32
        }
        // Parent: CSkeletonAnimationController
        // Field count: 14
        //
        // Metadata:
        // NetworkVarNames: m_animGraphNetworkedVars (CAnimGraphNetworkedVariables)
        // NetworkVarNames: m_hSequence (HSequence)
        // NetworkVarNames: m_flSeqStartTime (GameTime_t)
        // NetworkVarNames: m_flSeqFixedCycle (float)
        // NetworkVarNames: m_nAnimLoopMode (AnimLoopMode_t)
        public static class CBaseAnimGraphController {
            public const nint m_animGraphNetworkedVars = 0x18; // CAnimGraphNetworkedVariables
            public const nint m_bSequenceFinished = 0x14A8; // bool
            public const nint m_flSoundSyncTime = 0x14AC; // float32
            public const nint m_nActiveIKChainMask = 0x14B0; // uint32
            public const nint m_hSequence = 0x14B4; // HSequence
            public const nint m_flSeqStartTime = 0x14B8; // GameTime_t
            public const nint m_flSeqFixedCycle = 0x14BC; // float32
            public const nint m_nAnimLoopMode = 0x14C0; // AnimLoopMode_t
            public const nint m_flPlaybackRate = 0x14C4; // CNetworkedQuantizedFloat
            public const nint m_nNotifyState = 0x14D0; // SequenceFinishNotifyState_t
            public const nint m_bNetworkedAnimationInputsChanged = 0x14D2; // bool
            public const nint m_bNetworkedSequenceChanged = 0x14D3; // bool
            public const nint m_bLastUpdateSkipped = 0x14D4; // bool
            public const nint m_flPrevAnimUpdateTime = 0x14D8; // GameTime_t
        }
        // Parent: C_BaseEntity
        // Field count: 0
        public static class CCSPointScriptEntity {
        }
        // Parent: C_CSWeaponBase
        // Field count: 11
        //
        // Metadata:
        // NetworkVarNames: m_bStartedArming (bool)
        // NetworkVarNames: m_fArmedTime (GameTime_t)
        // NetworkVarNames: m_bBombPlacedAnimation (bool)
        // NetworkVarNames: m_bIsPlantingViaUse (bool)
        // NetworkVarNames: m_entitySpottedState (EntitySpottedState_t)
        public static class C_C4 {
            public const nint m_szScreenText = 0x1B20; // char[32]
            public const nint m_activeLightParticleIndex = 0x1B40; // ParticleIndex_t
            public const nint m_eActiveLightEffect = 0x1B44; // C4LightEffect_t
            public const nint m_bStartedArming = 0x1B48; // bool
            public const nint m_fArmedTime = 0x1B4C; // GameTime_t
            public const nint m_bBombPlacedAnimation = 0x1B50; // bool
            public const nint m_bIsPlantingViaUse = 0x1B51; // bool
            public const nint m_entitySpottedState = 0x1B58; // EntitySpottedState_t
            public const nint m_nSpotRules = 0x1B70; // int32
            public const nint m_bPlayedArmingBeeps = 0x1B74; // bool[7]
            public const nint m_bBombPlanted = 0x1B7B; // bool
        }
        // Parent: C_BaseModelEntity
        // Field count: 13
        //
        // Metadata:
        // MNetworkIncludeByName
        // NetworkVarNames: m_bInitiallyPopulateInterpHistory (bool)
        // NetworkVarNames: m_bAnimGraphUpdateEnabled (bool)
        // NetworkVarNames: m_vecForce (Vector)
        // NetworkVarNames: m_nForceBone (int32)
        // NetworkVarNames: m_RagdollPose (PhysicsRagdollPose_t)
        // NetworkVarNames: m_bRagdollClientSide (bool)
        public static class CBaseAnimGraph {
            public const nint m_bInitiallyPopulateInterpHistory = 0xDA0; // bool
            public const nint m_bSuppressAnimEventSounds = 0xDA2; // bool
            public const nint m_bAnimGraphUpdateEnabled = 0xDB0; // bool
            public const nint m_flMaxSlopeDistance = 0xDB4; // float32
            public const nint m_vLastSlopeCheckPos = 0xDB8; // Vector
            public const nint m_bAnimationUpdateScheduled = 0xDC4; // bool
            public const nint m_vecForce = 0xDC8; // Vector
            public const nint m_nForceBone = 0xDD4; // int32
            public const nint m_pClientsideRagdoll = 0xDD8; // CBaseAnimGraph*
            public const nint m_bBuiltRagdoll = 0xDE0; // bool
            public const nint m_RagdollPose = 0xDF8; // PhysicsRagdollPose_t
            public const nint m_bRagdollClientSide = 0xE40; // bool
            public const nint m_bHasAnimatedMaterialAttributes = 0xE50; // bool
        }
        // Parent: C_CSWeaponBase
        // Field count: 0
        public static class C_Melee {
        }
        // Parent: C_BaseGrenade
        // Field count: 0
        public static class CBreachChargeProjectile {
        }
        // Parent: C_BaseEntity
        // Field count: 0
        public static class C_PointEntity {
        }
        // Parent: C_GameRules
        // Field count: 0
        public static class C_MultiplayRules {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class CBasePlayerControllerAPI {
        }
        // Parent: C_BaseEntity
        // Field count: 16
        //
        // Metadata:
        // NetworkVarNames: m_flParticleSpacing (float)
        // NetworkVarNames: m_flSlack (float)
        // NetworkVarNames: m_flRadius (float)
        // NetworkVarNames: m_ColorTint (Color)
        // NetworkVarNames: m_nEffectState (int)
        // NetworkVarNames: m_iEffectIndex (HParticleSystemDefinitionStrong)
        // NetworkVarNames: m_PathNodes_Position (Vector)
        // NetworkVarNames: m_PathNodes_TangentIn (Vector)
        // NetworkVarNames: m_PathNodes_TangentOut (Vector)
        // NetworkVarNames: m_PathNodes_Color (Vector)
        // NetworkVarNames: m_PathNodes_PinEnabled (bool)
        // NetworkVarNames: m_PathNodes_RadiusScale (float)
        public static class C_PathParticleRope {
            public const nint m_bStartActive = 0x570; // bool
            public const nint m_flMaxSimulationTime = 0x574; // float32
            public const nint m_iszEffectName = 0x578; // CUtlSymbolLarge
            public const nint m_PathNodes_Name = 0x580; // CUtlVector<CUtlSymbolLarge>
            public const nint m_flParticleSpacing = 0x598; // float32
            public const nint m_flSlack = 0x59C; // float32
            public const nint m_flRadius = 0x5A0; // float32
            public const nint m_ColorTint = 0x5A4; // Color
            public const nint m_nEffectState = 0x5A8; // int32
            public const nint m_iEffectIndex = 0x5B0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_PathNodes_Position = 0x5B8; // C_NetworkUtlVectorBase<Vector>
            public const nint m_PathNodes_TangentIn = 0x5D0; // C_NetworkUtlVectorBase<Vector>
            public const nint m_PathNodes_TangentOut = 0x5E8; // C_NetworkUtlVectorBase<Vector>
            public const nint m_PathNodes_Color = 0x600; // C_NetworkUtlVectorBase<Vector>
            public const nint m_PathNodes_PinEnabled = 0x618; // C_NetworkUtlVectorBase<bool>
            public const nint m_PathNodes_RadiusScale = 0x630; // C_NetworkUtlVectorBase<float32>
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class CCSPointScriptExtensions_CCSWeaponBaseVData {
        }
        // Parent: C_SoundEventEntity
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_vMins (Vector)
        // NetworkVarNames: m_vMaxs (Vector)
        public static class C_SoundEventAABBEntity {
            public const nint m_vMins = 0x628; // Vector
            public const nint m_vMaxs = 0x634; // Vector
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponP90 {
        }
        // Parent: CEnvSoundscape
        // Field count: 0
        public static class CEnvSoundscapeAlias_snd_soundscape {
        }
        // Parent: C_EconEntity
        // Field count: 7
        //
        // Metadata:
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkIncludeByName
        // MNetworkExcludeByUserGroup
        // MNetworkExcludeByUserGroup
        // MNetworkExcludeByUserGroup
        // MNetworkUserGroupProxy
        // NetworkVarNames: m_nNextPrimaryAttackTick (GameTick_t)
        // NetworkVarNames: m_flNextPrimaryAttackTickRatio (float32)
        // NetworkVarNames: m_nNextSecondaryAttackTick (GameTick_t)
        // NetworkVarNames: m_flNextSecondaryAttackTickRatio (float32)
        // NetworkVarNames: m_iClip1 (int32)
        // NetworkVarNames: m_iClip2 (int32)
        // NetworkVarNames: m_pReserveAmmo (int)
        public static class C_BasePlayerWeapon {
            public const nint m_nNextPrimaryAttackTick = 0x1668; // GameTick_t
            public const nint m_flNextPrimaryAttackTickRatio = 0x166C; // float32
            public const nint m_nNextSecondaryAttackTick = 0x1670; // GameTick_t
            public const nint m_flNextSecondaryAttackTickRatio = 0x1674; // float32
            public const nint m_iClip1 = 0x1678; // int32
            public const nint m_iClip2 = 0x167C; // int32
            public const nint m_pReserveAmmo = 0x1680; // 
        }
        // Parent: CEntitySubclassVDataBase
        // Field count: 22
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CBasePlayerWeaponVData {
            public const nint m_szWorldModel = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_sToolsOnlyOwnerModelName = 0x108; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_bBuiltRightHanded = 0x1E8; // bool
            public const nint m_bAllowFlipping = 0x1E9; // bool
            public const nint m_sMuzzleAttachment = 0x1F0; // CAttachmentNameSymbolWithStorage
            public const nint m_szMuzzleFlashParticle = 0x210; // 
            public const nint m_bLinkedCooldowns = 0x2F0; // bool
            public const nint m_iFlags = 0x2F1; // ItemFlagTypes_t
            public const nint m_nPrimaryAmmoType = 0x2F2; // AmmoIndex_t
            public const nint m_nSecondaryAmmoType = 0x2F3; // AmmoIndex_t
            public const nint m_iMaxClip1 = 0x2F4; // int32
            public const nint m_iMaxClip2 = 0x2F8; // int32
            public const nint m_iDefaultClip1 = 0x2FC; // int32
            public const nint m_iDefaultClip2 = 0x300; // int32
            public const nint m_bReserveAmmoAsClips = 0x304; // bool
            public const nint m_iWeight = 0x308; // int32
            public const nint m_bAutoSwitchTo = 0x30C; // bool
            public const nint m_bAutoSwitchFrom = 0x30D; // bool
            public const nint m_iRumbleEffect = 0x310; // 
            public const nint m_iSlot = 0x314; // int32
            public const nint m_iPosition = 0x318; // int32
            public const nint m_aShootSounds = 0x320; // CUtlOrderedMap<WeaponSound_t,CSoundEventName>
        }
        // Parent: CBaseAnimGraph
        // Field count: 23
        //
        // Metadata:
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // NetworkVarNames: m_poolOrigin (Vector)
        // NetworkVarNames: m_waterLevel (float32)
        // NetworkVarNames: m_x (float32)
        // NetworkVarNames: m_y (float32)
        // NetworkVarNames: m_z (float32)
        // NetworkVarNames: m_angle (float32)
        public static class C_Fish {
            public const nint m_pos = 0xF88; // Vector
            public const nint m_vel = 0xF94; // Vector
            public const nint m_angles = 0xFA0; // QAngle
            public const nint m_localLifeState = 0xFAC; // int32
            public const nint m_deathDepth = 0xFB0; // float32
            public const nint m_deathAngle = 0xFB4; // float32
            public const nint m_buoyancy = 0xFB8; // float32
            public const nint m_wiggleTimer = 0xFC0; // CountdownTimer
            public const nint m_wigglePhase = 0xFD8; // float32
            public const nint m_wiggleRate = 0xFDC; // float32
            public const nint m_actualPos = 0xFE0; // Vector
            public const nint m_actualAngles = 0xFEC; // QAngle
            public const nint m_poolOrigin = 0xFF8; // Vector
            public const nint m_waterLevel = 0x1004; // float32
            public const nint m_gotUpdate = 0x1008; // bool
            public const nint m_x = 0x100C; // float32
            public const nint m_y = 0x1010; // float32
            public const nint m_z = 0x1014; // float32
            public const nint m_angle = 0x1018; // float32
            public const nint m_errorHistory = 0x101C; // float32[20]
            public const nint m_errorHistoryIndex = 0x106C; // int32
            public const nint m_errorHistoryCount = 0x1070; // int32
            public const nint m_averageError = 0x1074; // float32
        }
        // Parent: IntervalTimer
        // Field count: 7
        //
        // Metadata:
        // NetworkVarNames: m_flValues (float)
        // NetworkVarNames: m_nValueCounts (int)
        // NetworkVarNames: m_nBucketCount (int)
        // NetworkVarNames: m_flInterval (float)
        // NetworkVarNames: m_flFinalValue (float)
        // NetworkVarNames: m_nCompressionType (TimelineCompression_t)
        // NetworkVarNames: m_bStopped (bool)
        public static class CTimeline {
            public const nint m_flValues = 0x10; // float32[64]
            public const nint m_nValueCounts = 0x110; // int32[64]
            public const nint m_nBucketCount = 0x210; // int32
            public const nint m_flInterval = 0x214; // float32
            public const nint m_flFinalValue = 0x218; // float32
            public const nint m_nCompressionType = 0x21C; // TimelineCompression_t
            public const nint m_bStopped = 0x220; // bool
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponAWP {
        }
        // Parent: C_BaseCombatCharacter
        // Field count: 28
        //
        // Metadata:
        // MNetworkUserGroupProxy
        // MNetworkUserGroupProxy
        // MNetworkExcludeByUserGroup
        // MNetworkIncludeByUserGroup
        // MNetworkIncludeByUserGroup
        // MNetworkIncludeByUserGroup
        // MNetworkOverride
        // MNetworkOverride
        // MNetworkOverride
        // MNetworkOverride
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // NetworkVarNames: m_pWeaponServices (CPlayer_WeaponServices*)
        // NetworkVarNames: m_pItemServices (CPlayer_ItemServices*)
        // NetworkVarNames: m_pAutoaimServices (CPlayer_AutoaimServices*)
        // NetworkVarNames: m_pObserverServices (CPlayer_ObserverServices*)
        // NetworkVarNames: m_pWaterServices (CPlayer_WaterServices*)
        // NetworkVarNames: m_pUseServices (CPlayer_UseServices*)
        // NetworkVarNames: m_pFlashlightServices (CPlayer_FlashlightServices*)
        // NetworkVarNames: m_pCameraServices (CPlayer_CameraServices*)
        // NetworkVarNames: m_pMovementServices (CPlayer_MovementServices*)
        // NetworkVarNames: m_ServerViewAngleChanges (ViewAngleServerChange_t)
        // NetworkVarNames: m_iHideHUD (uint32)
        // NetworkVarNames: m_skybox3d (sky3dparams_t)
        // NetworkVarNames: m_flDeathTime (GameTime_t)
        // NetworkVarNames: m_hController (CHandle<CBasePlayerController>)
        public static class C_BasePlayerPawn {
            public const nint m_pWeaponServices = 0x11A8; // CPlayer_WeaponServices*
            public const nint m_pItemServices = 0x11B0; // CPlayer_ItemServices*
            public const nint m_pAutoaimServices = 0x11B8; // CPlayer_AutoaimServices*
            public const nint m_pObserverServices = 0x11C0; // CPlayer_ObserverServices*
            public const nint m_pWaterServices = 0x11C8; // CPlayer_WaterServices*
            public const nint m_pUseServices = 0x11D0; // CPlayer_UseServices*
            public const nint m_pFlashlightServices = 0x11D8; // CPlayer_FlashlightServices*
            public const nint m_pCameraServices = 0x11E0; // CPlayer_CameraServices*
            public const nint m_pMovementServices = 0x11E8; // CPlayer_MovementServices*
            public const nint m_ServerViewAngleChanges = 0x11F8; // C_UtlVectorEmbeddedNetworkVar<ViewAngleServerChange_t>
            public const nint m_nHighestConsumedServerViewAngleChangeIndex = 0x1248; // uint32
            public const nint v_angle = 0x124C; // QAngle
            public const nint v_anglePrevious = 0x1258; // QAngle
            public const nint m_iHideHUD = 0x1264; // uint32
            public const nint m_skybox3d = 0x1268; // sky3dparams_t
            public const nint m_flDeathTime = 0x12F8; // GameTime_t
            public const nint m_vecPredictionError = 0x12FC; // Vector
            public const nint m_flPredictionErrorTime = 0x1308; // GameTime_t
            public const nint m_vecLastCameraSetupLocalOrigin = 0x130C; // Vector
            public const nint m_flLastCameraSetupTime = 0x1318; // GameTime_t
            public const nint m_flFOVSensitivityAdjust = 0x131C; // float32
            public const nint m_flMouseSensitivity = 0x1320; // float32
            public const nint m_vOldOrigin = 0x1324; // Vector
            public const nint m_flOldSimulationTime = 0x1330; // float32
            public const nint m_nLastExecutedCommandNumber = 0x1334; // int32
            public const nint m_nLastExecutedCommandTick = 0x1338; // int32
            public const nint m_hController = 0x133C; // CHandle<CBasePlayerController>
            public const nint m_bIsSwappingToPredictableController = 0x1340; // bool
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // NetworkVarNames: m_iReapplyProvisionParity (int)
        // NetworkVarNames: m_hOuter (EHANDLE)
        // NetworkVarNames: m_ProviderType (attributeprovidertypes_t)
        public static class CAttributeManager {
            public const nint m_Providers = 0x8; // CUtlVector<CHandle<C_BaseEntity>>
            public const nint m_iReapplyProvisionParity = 0x20; // int32
            public const nint m_hOuter = 0x24; // CHandle<C_BaseEntity>
            public const nint m_bPreventLoopback = 0x28; // bool
            public const nint m_ProviderType = 0x2C; // attributeprovidertypes_t
            public const nint m_CachedResults = 0x30; // CUtlVector<CAttributeManager::cached_attribute_float_t>
        }
        // Parent: C_BaseEntity
        // Field count: 0
        public static class CLogicalEntity {
        }
        // Parent: None
        // Field count: 24
        //
        // Metadata:
        // NetworkVarNames: m_PredNetBoolVariables (uint32)
        // NetworkVarNames: m_PredNetByteVariables (byte)
        // NetworkVarNames: m_PredNetUInt16Variables (uint16)
        // NetworkVarNames: m_PredNetIntVariables (int32)
        // NetworkVarNames: m_PredNetUInt32Variables (uint32)
        // NetworkVarNames: m_PredNetUInt64Variables (uint64)
        // NetworkVarNames: m_PredNetFloatVariables (float)
        // NetworkVarNames: m_PredNetVectorVariables (Vector)
        // NetworkVarNames: m_PredNetQuaternionVariables (Quaternion)
        // NetworkVarNames: m_PredNetGlobalSymbolVariables (CGlobalSymbol)
        // NetworkVarNames: m_OwnerOnlyPredNetBoolVariables (uint32)
        // NetworkVarNames: m_OwnerOnlyPredNetByteVariables (byte)
        // NetworkVarNames: m_OwnerOnlyPredNetUInt16Variables (uint16)
        // NetworkVarNames: m_OwnerOnlyPredNetIntVariables (int32)
        // NetworkVarNames: m_OwnerOnlyPredNetUInt32Variables (uint32)
        // NetworkVarNames: m_OwnerOnlyPredNetUInt64Variables (uint64)
        // NetworkVarNames: m_OwnerOnlyPredNetFloatVariables (float)
        // NetworkVarNames: m_OwnerOnlyPredNetVectorVariables (Vector)
        // NetworkVarNames: m_OwnerOnlyPredNetQuaternionVariables (Quaternion)
        // NetworkVarNames: m_OwnerOnlyPredNetGlobalSymbolVariables (CGlobalSymbol)
        // NetworkVarNames: m_nBoolVariablesCount (int)
        // NetworkVarNames: m_nOwnerOnlyBoolVariablesCount (int)
        // NetworkVarNames: m_nRandomSeedOffset (int)
        // NetworkVarNames: m_flLastTeleportTime (float)
        public static class CAnimGraphNetworkedVariables {
            public const nint m_PredNetBoolVariables = 0x8; // C_NetworkUtlVectorBase<uint32>
            public const nint m_PredNetByteVariables = 0x20; // C_NetworkUtlVectorBase<uint8>
            public const nint m_PredNetUInt16Variables = 0x38; // C_NetworkUtlVectorBase<uint16>
            public const nint m_PredNetIntVariables = 0x50; // C_NetworkUtlVectorBase<int32>
            public const nint m_PredNetUInt32Variables = 0x68; // C_NetworkUtlVectorBase<uint32>
            public const nint m_PredNetUInt64Variables = 0x80; // C_NetworkUtlVectorBase<uint64>
            public const nint m_PredNetFloatVariables = 0x98; // C_NetworkUtlVectorBase<float32>
            public const nint m_PredNetVectorVariables = 0xB0; // C_NetworkUtlVectorBase<Vector>
            public const nint m_PredNetQuaternionVariables = 0xC8; // C_NetworkUtlVectorBase<Quaternion>
            public const nint m_PredNetGlobalSymbolVariables = 0xE0; // C_NetworkUtlVectorBase<CGlobalSymbol>
            public const nint m_OwnerOnlyPredNetBoolVariables = 0xF8; // C_NetworkUtlVectorBase<uint32>
            public const nint m_OwnerOnlyPredNetByteVariables = 0x110; // C_NetworkUtlVectorBase<uint8>
            public const nint m_OwnerOnlyPredNetUInt16Variables = 0x128; // C_NetworkUtlVectorBase<uint16>
            public const nint m_OwnerOnlyPredNetIntVariables = 0x140; // C_NetworkUtlVectorBase<int32>
            public const nint m_OwnerOnlyPredNetUInt32Variables = 0x158; // C_NetworkUtlVectorBase<uint32>
            public const nint m_OwnerOnlyPredNetUInt64Variables = 0x170; // C_NetworkUtlVectorBase<uint64>
            public const nint m_OwnerOnlyPredNetFloatVariables = 0x188; // C_NetworkUtlVectorBase<float32>
            public const nint m_OwnerOnlyPredNetVectorVariables = 0x1A0; // C_NetworkUtlVectorBase<Vector>
            public const nint m_OwnerOnlyPredNetQuaternionVariables = 0x1B8; // C_NetworkUtlVectorBase<Quaternion>
            public const nint m_OwnerOnlyPredNetGlobalSymbolVariables = 0x1D0; // C_NetworkUtlVectorBase<CGlobalSymbol>
            public const nint m_nBoolVariablesCount = 0x1E8; // int32
            public const nint m_nOwnerOnlyBoolVariablesCount = 0x1EC; // int32
            public const nint m_nRandomSeedOffset = 0x1F0; // int32
            public const nint m_flLastTeleportTime = 0x1F4; // float32
        }
        // Parent: C_BaseTrigger
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_flFluidDensity (float)
        public static class C_TriggerBuoyancy {
            public const nint m_BuoyancyHelper = 0xD30; // CBuoyancyHelper
            public const nint m_flFluidDensity = 0xDB0; // float32
        }
        // Parent: C_BaseModelEntity
        // Field count: 41
        //
        // Metadata:
        // MNetworkIncludeByUserGroup
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // NetworkVarNames: m_flScrollSpeed (float32)
        // NetworkVarNames: m_RopeFlags (uint16)
        // NetworkVarNames: m_iRopeMaterialModelIndex (HMaterialStrong)
        // NetworkVarNames: m_nSegments (uint8)
        // NetworkVarNames: m_hStartPoint (CHandle<C_BaseEntity>)
        // NetworkVarNames: m_hEndPoint (CHandle<C_BaseEntity>)
        // NetworkVarNames: m_iStartAttachment (AttachmentHandle_t)
        // NetworkVarNames: m_iEndAttachment (AttachmentHandle_t)
        // NetworkVarNames: m_Subdiv (uint8)
        // NetworkVarNames: m_RopeLength (int16)
        // NetworkVarNames: m_Slack (int16)
        // NetworkVarNames: m_TextureScale (float32)
        // NetworkVarNames: m_fLockedPoints (uint8)
        // NetworkVarNames: m_nChangeCount (uint8)
        // NetworkVarNames: m_Width (float32)
        // NetworkVarNames: m_bConstrainBetweenEndpoints (bool)
        public static class C_RopeKeyframe {
            public const nint m_LinksTouchingSomething = 0xD30; // CBitVec<10>
            public const nint m_nLinksTouchingSomething = 0xD34; // int32
            public const nint m_bApplyWind = 0xD38; // bool
            public const nint m_fPrevLockedPoints = 0xD3C; // int32
            public const nint m_iForcePointMoveCounter = 0xD40; // int32
            public const nint m_bPrevEndPointPos = 0xD44; // bool[2]
            public const nint m_vPrevEndPointPos = 0xD48; // Vector[2]
            public const nint m_flCurScroll = 0xD60; // float32
            public const nint m_flScrollSpeed = 0xD64; // float32
            public const nint m_RopeFlags = 0xD68; // uint16
            public const nint m_iRopeMaterialModelIndex = 0xD70; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_LightValues = 0xFE8; // Vector[10]
            public const nint m_nSegments = 0x1060; // uint8
            public const nint m_hStartPoint = 0x1064; // CHandle<C_BaseEntity>
            public const nint m_hEndPoint = 0x1068; // CHandle<C_BaseEntity>
            public const nint m_iStartAttachment = 0x106C; // AttachmentHandle_t
            public const nint m_iEndAttachment = 0x106D; // AttachmentHandle_t
            public const nint m_Subdiv = 0x106E; // uint8
            public const nint m_RopeLength = 0x1070; // int16
            public const nint m_Slack = 0x1072; // int16
            public const nint m_TextureScale = 0x1074; // float32
            public const nint m_fLockedPoints = 0x1078; // uint8
            public const nint m_nChangeCount = 0x1079; // uint8
            public const nint m_Width = 0x107C; // float32
            public const nint m_PhysicsDelegate = 0x1080; // C_RopeKeyframe::CPhysicsDelegate
            public const nint m_hMaterial = 0x1090; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_TextureHeight = 0x1098; // int32
            public const nint m_vecImpulse = 0x109C; // Vector
            public const nint m_vecPreviousImpulse = 0x10A8; // Vector
            public const nint m_flCurrentGustTimer = 0x10B4; // float32
            public const nint m_flCurrentGustLifetime = 0x10B8; // float32
            public const nint m_flTimeToNextGust = 0x10BC; // float32
            public const nint m_vWindDir = 0x10C0; // Vector
            public const nint m_vColorMod = 0x10CC; // Vector
            public const nint m_vCachedEndPointAttachmentPos = 0x10D8; // Vector[2]
            public const nint m_vCachedEndPointAttachmentAngle = 0x10F0; // QAngle[2]
            public const nint m_bConstrainBetweenEndpoints = 0x1108; // bool
            public const nint m_bEndPointAttachmentPositionsDirty = 0x0; // bitfield:1
            public const nint m_bEndPointAttachmentAnglesDirty = 0x0; // bitfield:1
            public const nint m_bNewDataThisFrame = 0x0; // bitfield:1
            public const nint m_bPhysicsInitted = 0x0; // bitfield:1
        }
        // Parent: C_BaseEntity
        // Field count: 16
        //
        // Metadata:
        // NetworkVarNames: m_hGradientFogTexture (HRenderTextureStrong)
        // NetworkVarNames: m_flFogStartDistance (float)
        // NetworkVarNames: m_flFogEndDistance (float)
        // NetworkVarNames: m_bHeightFogEnabled (bool)
        // NetworkVarNames: m_flFogStartHeight (float)
        // NetworkVarNames: m_flFogEndHeight (float)
        // NetworkVarNames: m_flFarZ (float)
        // NetworkVarNames: m_flFogMaxOpacity (float)
        // NetworkVarNames: m_flFogFalloffExponent (float)
        // NetworkVarNames: m_flFogVerticalExponent (float)
        // NetworkVarNames: m_fogColor (Color)
        // NetworkVarNames: m_flFogStrength (float)
        // NetworkVarNames: m_flFadeTime (float)
        // NetworkVarNames: m_bStartDisabled (bool)
        // NetworkVarNames: m_bIsEnabled (bool)
        public static class C_GradientFog {
            public const nint m_hGradientFogTexture = 0x568; // 
            public const nint m_flFogStartDistance = 0x570; // float32
            public const nint m_flFogEndDistance = 0x574; // float32
            public const nint m_bHeightFogEnabled = 0x578; // bool
            public const nint m_flFogStartHeight = 0x57C; // float32
            public const nint m_flFogEndHeight = 0x580; // float32
            public const nint m_flFarZ = 0x584; // float32
            public const nint m_flFogMaxOpacity = 0x588; // float32
            public const nint m_flFogFalloffExponent = 0x58C; // float32
            public const nint m_flFogVerticalExponent = 0x590; // float32
            public const nint m_fogColor = 0x594; // Color
            public const nint m_flFogStrength = 0x598; // float32
            public const nint m_flFadeTime = 0x59C; // float32
            public const nint m_bStartDisabled = 0x5A0; // bool
            public const nint m_bIsEnabled = 0x5A1; // bool
            public const nint m_bGradientFogNeedsTextures = 0x5A2; // bool
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_bSpotted (bool)
        // NetworkVarNames: m_bSpottedByMask (uint32)
        public static class EntitySpottedState_t {
            public const nint m_bSpotted = 0x8; // bool
            public const nint m_bSpottedByMask = 0xC; // uint32[2]
        }
        // Parent: C_CSGO_MapPreviewCameraPath
        // Field count: 7
        public static class C_CSGO_TeamPreviewCamera {
            public const nint m_nVariant = 0x5D8; // int32
            public const nint m_bDofEnabled = 0x5DC; // bool
            public const nint m_flDofNearBlurry = 0x5E0; // float32
            public const nint m_flDofNearCrisp = 0x5E4; // float32
            public const nint m_flDofFarCrisp = 0x5E8; // float32
            public const nint m_flDofFarBlurry = 0x5EC; // float32
            public const nint m_flDofTiltToGround = 0x5F0; // float32
        }
        // Parent: CCSPlayerBase_CameraServices
        // Field count: 2
        public static class CCSPlayer_CameraServices {
            public const nint m_flDeathCamTilt = 0x228; // float32
            public const nint m_vClientScopeInaccuracy = 0x230; // Vector
        }
        // Parent: C_CSGO_TeamSelectCharacterPosition
        // Field count: 0
        public static class C_CSGO_TeamSelectCounterTerroristPosition {
        }
        // Parent: C_EconEntity
        // Field count: 2
        public static class C_EconWearable {
            public const nint m_nForceSkin = 0x1668; // int32
            public const nint m_bAlwaysAllow = 0x166C; // bool
        }
        // Parent: C_CSGO_TeamIntroCharacterPosition
        // Field count: 0
        public static class CCSGO_WingmanIntroCharacterPosition {
        }
        // Parent: CSPerRoundStats_t
        // Field count: 5
        //
        // Metadata:
        // NetworkVarNames: m_iEnemy5Ks (int)
        // NetworkVarNames: m_iEnemy4Ks (int)
        // NetworkVarNames: m_iEnemy3Ks (int)
        // NetworkVarNames: m_iEnemyKnifeKills (int)
        // NetworkVarNames: m_iEnemyTaserKills (int)
        public static class CSMatchStats_t {
            public const nint m_iEnemy5Ks = 0x68; // int32
            public const nint m_iEnemy4Ks = 0x6C; // int32
            public const nint m_iEnemy3Ks = 0x70; // int32
            public const nint m_iEnemyKnifeKills = 0x74; // int32
            public const nint m_iEnemyTaserKills = 0x78; // int32
        }
        // Parent: C_BaseModelEntity
        // Field count: 0
        public static class C_BaseToggle {
        }
        // Parent: C_BaseEntity
        // Field count: 16
        //
        // Metadata:
        // NetworkVarNames: m_bActive (bool)
        // NetworkVarNames: m_vBoxMins (Vector)
        // NetworkVarNames: m_vBoxMaxs (Vector)
        // NetworkVarNames: m_bStartDisabled (bool)
        // NetworkVarNames: m_flStrength (float)
        // NetworkVarNames: m_nFalloffShape (int)
        // NetworkVarNames: m_flFalloffExponent (float)
        // NetworkVarNames: m_flHeightFogDepth (float)
        // NetworkVarNames: m_fHeightFogEdgeWidth (float)
        // NetworkVarNames: m_fIndirectLightStrength (float)
        // NetworkVarNames: m_fSunLightStrength (float)
        // NetworkVarNames: m_fNoiseStrength (float)
        // NetworkVarNames: m_bOverrideIndirectLightStrength (bool)
        // NetworkVarNames: m_bOverrideSunLightStrength (bool)
        // NetworkVarNames: m_bOverrideNoiseStrength (bool)
        // NetworkVarNames: m_bAllowLPVIndirect (bool)
        public static class C_EnvVolumetricFogVolume {
            public const nint m_bActive = 0x568; // bool
            public const nint m_vBoxMins = 0x56C; // Vector
            public const nint m_vBoxMaxs = 0x578; // Vector
            public const nint m_bStartDisabled = 0x584; // bool
            public const nint m_flStrength = 0x588; // float32
            public const nint m_nFalloffShape = 0x58C; // int32
            public const nint m_flFalloffExponent = 0x590; // float32
            public const nint m_flHeightFogDepth = 0x594; // float32
            public const nint m_fHeightFogEdgeWidth = 0x598; // float32
            public const nint m_fIndirectLightStrength = 0x59C; // float32
            public const nint m_fSunLightStrength = 0x5A0; // float32
            public const nint m_fNoiseStrength = 0x5A4; // float32
            public const nint m_bOverrideIndirectLightStrength = 0x5A8; // bool
            public const nint m_bOverrideSunLightStrength = 0x5A9; // bool
            public const nint m_bOverrideNoiseStrength = 0x5AA; // bool
            public const nint m_bAllowLPVIndirect = 0x5AB; // bool
        }
        // Parent: C_BaseModelEntity
        // Field count: 0
        public static class CWaterSplasher {
        }
        // Parent: C_BaseModelEntity
        // Field count: 0
        public static class C_ModelPointEntity {
        }
        // Parent: CPlayer_ViewModelServices
        // Field count: 0
        public static class CCSObserver_ViewModelServices {
        }
        // Parent: C_BaseFire
        // Field count: 13
        //
        // Metadata:
        // MNetworkOverride
        // MNetworkOverride
        // NetworkVarNames: m_nFlameModelIndex (int32)
        // NetworkVarNames: m_nFlameFromAboveModelIndex (int32)
        public static class C_FireSmoke {
            public const nint m_nFlameModelIndex = 0x578; // int32
            public const nint m_nFlameFromAboveModelIndex = 0x57C; // int32
            public const nint m_flScaleRegister = 0x580; // float32
            public const nint m_flScaleStart = 0x584; // float32
            public const nint m_flScaleEnd = 0x588; // float32
            public const nint m_flScaleTimeStart = 0x58C; // GameTime_t
            public const nint m_flScaleTimeEnd = 0x590; // GameTime_t
            public const nint m_flChildFlameSpread = 0x594; // float32
            public const nint m_flClipPerc = 0x5A8; // float32
            public const nint m_bClipTested = 0x5AC; // bool
            public const nint m_bFadingOut = 0x5AD; // bool
            public const nint m_tParticleSpawn = 0x5B0; // TimedEvent
            public const nint m_pFireOverlay = 0x5B8; // CFireOverlay*
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponRevolver {
        }
        // Parent: C_Sprite
        // Field count: 0
        public static class C_FireFromAboveSprite {
        }
        // Parent: C_BaseEntity
        // Field count: 24
        //
        // Metadata:
        // NetworkVarNames: m_Entity_Color (Color)
        // NetworkVarNames: m_Entity_flBrightness (float)
        // NetworkVarNames: m_Entity_hCubemapTexture (HRenderTextureStrong)
        // NetworkVarNames: m_Entity_bCustomCubemapTexture (bool)
        // NetworkVarNames: m_Entity_hLightProbeTexture (HRenderTextureStrong)
        // NetworkVarNames: m_Entity_hLightProbeDirectLightIndicesTexture (HRenderTextureStrong)
        // NetworkVarNames: m_Entity_hLightProbeDirectLightScalarsTexture (HRenderTextureStrong)
        // NetworkVarNames: m_Entity_hLightProbeDirectLightShadowsTexture (HRenderTextureStrong)
        // NetworkVarNames: m_Entity_vBoxMins (Vector)
        // NetworkVarNames: m_Entity_vBoxMaxs (Vector)
        // NetworkVarNames: m_Entity_bMoveable (bool)
        // NetworkVarNames: m_Entity_nHandshake (int)
        // NetworkVarNames: m_Entity_nEnvCubeMapArrayIndex (int)
        // NetworkVarNames: m_Entity_nPriority (int)
        // NetworkVarNames: m_Entity_bStartDisabled (bool)
        // NetworkVarNames: m_Entity_flEdgeFadeDist (float)
        // NetworkVarNames: m_Entity_vEdgeFadeDists (Vector)
        // NetworkVarNames: m_Entity_nLightProbeSizeX (int)
        // NetworkVarNames: m_Entity_nLightProbeSizeY (int)
        // NetworkVarNames: m_Entity_nLightProbeSizeZ (int)
        // NetworkVarNames: m_Entity_nLightProbeAtlasX (int)
        // NetworkVarNames: m_Entity_nLightProbeAtlasY (int)
        // NetworkVarNames: m_Entity_nLightProbeAtlasZ (int)
        // NetworkVarNames: m_Entity_bEnabled (bool)
        public static class C_EnvCombinedLightProbeVolume {
            public const nint m_Entity_Color = 0x15C8; // Color
            public const nint m_Entity_flBrightness = 0x15CC; // float32
            public const nint m_Entity_hCubemapTexture = 0x15D0; // 
            public const nint m_Entity_bCustomCubemapTexture = 0x15D8; // bool
            public const nint m_Entity_hLightProbeTexture = 0x15E0; // 
            public const nint m_Entity_hLightProbeDirectLightIndicesTexture = 0x15E8; // 
            public const nint m_Entity_hLightProbeDirectLightScalarsTexture = 0x15F0; // 
            public const nint m_Entity_hLightProbeDirectLightShadowsTexture = 0x15F8; // 
            public const nint m_Entity_vBoxMins = 0x1600; // Vector
            public const nint m_Entity_vBoxMaxs = 0x160C; // Vector
            public const nint m_Entity_bMoveable = 0x1618; // bool
            public const nint m_Entity_nHandshake = 0x161C; // int32
            public const nint m_Entity_nEnvCubeMapArrayIndex = 0x1620; // int32
            public const nint m_Entity_nPriority = 0x1624; // int32
            public const nint m_Entity_bStartDisabled = 0x1628; // bool
            public const nint m_Entity_flEdgeFadeDist = 0x162C; // float32
            public const nint m_Entity_vEdgeFadeDists = 0x1630; // Vector
            public const nint m_Entity_nLightProbeSizeX = 0x163C; // int32
            public const nint m_Entity_nLightProbeSizeY = 0x1640; // int32
            public const nint m_Entity_nLightProbeSizeZ = 0x1644; // int32
            public const nint m_Entity_nLightProbeAtlasX = 0x1648; // int32
            public const nint m_Entity_nLightProbeAtlasY = 0x164C; // int32
            public const nint m_Entity_nLightProbeAtlasZ = 0x1650; // int32
            public const nint m_Entity_bEnabled = 0x1669; // bool
        }
        // Parent: C_SoundOpvarSetPointBase
        // Field count: 0
        public static class C_SoundOpvarSetOBBWindEntity {
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // NetworkVarNames: m_Handle (ModelConfigHandle_t)
        // NetworkVarNames: m_Name (string_t)
        // NetworkVarNames: m_AssociatedEntities (CHandle<C_BaseModelEntity>)
        // NetworkVarNames: m_AssociatedEntityNames (string_t)
        public static class ActiveModelConfig_t {
            public const nint m_Handle = 0x28; // ModelConfigHandle_t
            public const nint m_Name = 0x30; // CUtlSymbolLarge
            public const nint m_AssociatedEntities = 0x38; // C_NetworkUtlVectorBase<CHandle<C_BaseModelEntity>>
            public const nint m_AssociatedEntityNames = 0x50; // C_NetworkUtlVectorBase<CUtlSymbolLarge>
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponMP5SD {
        }
        // Parent: C_DynamicProp
        // Field count: 0
        public static class C_DynamicPropAlias_dynamic_prop {
        }
        // Parent: CPlayerPawnComponent
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_totalHitsOnServer (int32)
        public static class CCSPlayer_BulletServices {
            public const nint m_totalHitsOnServer = 0x40; // int32
        }
        // Parent: CLogicalEntity
        // Field count: 7
        public static class CLogicRelay {
            public const nint m_OnTrigger = 0x568; // CEntityIOOutput
            public const nint m_OnSpawn = 0x590; // CEntityIOOutput
            public const nint m_bDisabled = 0x5B8; // bool
            public const nint m_bWaitForRefire = 0x5B9; // bool
            public const nint m_bTriggerOnce = 0x5BA; // bool
            public const nint m_bFastRetrigger = 0x5BB; // bool
            public const nint m_bPassthoughCaller = 0x5BC; // bool
        }
        // Parent: C_PointCamera
        // Field count: 1
        public static class C_PointCameraVFOV {
            public const nint m_flVerticalFOV = 0x5C8; // float32
        }
        // Parent: CPlayer_ItemServices
        // Field count: 3
        //
        // Metadata:
        // NetworkVarNames: m_bHasDefuser (bool)
        // NetworkVarNames: m_bHasHelmet (bool)
        // NetworkVarNames: m_bHasHeavyArmor (bool)
        public static class CCSPlayer_ItemServices {
            public const nint m_bHasDefuser = 0x40; // bool
            public const nint m_bHasHelmet = 0x41; // bool
            public const nint m_bHasHeavyArmor = 0x42; // bool
        }
        // Parent: C_BaseModelEntity
        // Field count: 73
        //
        // Metadata:
        // NetworkVarNames: m_bEnabled (bool)
        // NetworkVarNames: m_nColorMode (int)
        // NetworkVarNames: m_Color (Color)
        // NetworkVarNames: m_flColorTemperature (float)
        // NetworkVarNames: m_flBrightness (float)
        // NetworkVarNames: m_flBrightnessScale (float)
        // NetworkVarNames: m_nDirectLight (int)
        // NetworkVarNames: m_nBakedShadowIndex (int)
        // NetworkVarNames: m_nLuminaireShape (int)
        // NetworkVarNames: m_flLuminaireSize (float)
        // NetworkVarNames: m_flLuminaireAnisotropy (float)
        // NetworkVarNames: m_LightStyleString (CUtlString)
        // NetworkVarNames: m_flLightStyleStartTime (GameTime_t)
        // NetworkVarNames: m_QueuedLightStyleStrings (CUtlString)
        // NetworkVarNames: m_LightStyleEvents (CUtlString)
        // NetworkVarNames: m_LightStyleTargets (CHandle<C_BaseModelEntity>)
        // NetworkVarNames: m_hLightCookie (HRenderTextureStrong)
        // NetworkVarNames: m_flShape (float)
        // NetworkVarNames: m_flSoftX (float)
        // NetworkVarNames: m_flSoftY (float)
        // NetworkVarNames: m_flSkirt (float)
        // NetworkVarNames: m_flSkirtNear (float)
        // NetworkVarNames: m_vSizeParams (Vector)
        // NetworkVarNames: m_flRange (float)
        // NetworkVarNames: m_vShear (Vector)
        // NetworkVarNames: m_nBakeSpecularToCubemaps (int)
        // NetworkVarNames: m_vBakeSpecularToCubemapsSize (Vector)
        // NetworkVarNames: m_nCastShadows (int)
        // NetworkVarNames: m_nShadowMapSize (int)
        // NetworkVarNames: m_nShadowPriority (int)
        // NetworkVarNames: m_bContactShadow (bool)
        // NetworkVarNames: m_nBounceLight (int)
        // NetworkVarNames: m_flBounceScale (float)
        // NetworkVarNames: m_flMinRoughness (float)
        // NetworkVarNames: m_vAlternateColor (Vector)
        // NetworkVarNames: m_fAlternateColorBrightness (float)
        // NetworkVarNames: m_nFog (int)
        // NetworkVarNames: m_flFogStrength (float)
        // NetworkVarNames: m_nFogShadows (int)
        // NetworkVarNames: m_flFogScale (float)
        // NetworkVarNames: m_bFogMixedShadows (bool)
        // NetworkVarNames: m_flFadeSizeStart (float)
        // NetworkVarNames: m_flFadeSizeEnd (float)
        // NetworkVarNames: m_flShadowFadeSizeStart (float)
        // NetworkVarNames: m_flShadowFadeSizeEnd (float)
        // NetworkVarNames: m_bPrecomputedFieldsValid (bool)
        // NetworkVarNames: m_vPrecomputedBoundsMins (Vector)
        // NetworkVarNames: m_vPrecomputedBoundsMaxs (Vector)
        // NetworkVarNames: m_vPrecomputedOBBOrigin (Vector)
        // NetworkVarNames: m_vPrecomputedOBBAngles (QAngle)
        // NetworkVarNames: m_vPrecomputedOBBExtent (Vector)
        // NetworkVarNames: m_nPrecomputedSubFrusta (int)
        // NetworkVarNames: m_vPrecomputedOBBOrigin0 (Vector)
        // NetworkVarNames: m_vPrecomputedOBBAngles0 (QAngle)
        // NetworkVarNames: m_vPrecomputedOBBExtent0 (Vector)
        // NetworkVarNames: m_vPrecomputedOBBOrigin1 (Vector)
        // NetworkVarNames: m_vPrecomputedOBBAngles1 (QAngle)
        // NetworkVarNames: m_vPrecomputedOBBExtent1 (Vector)
        // NetworkVarNames: m_vPrecomputedOBBOrigin2 (Vector)
        // NetworkVarNames: m_vPrecomputedOBBAngles2 (QAngle)
        // NetworkVarNames: m_vPrecomputedOBBExtent2 (Vector)
        // NetworkVarNames: m_vPrecomputedOBBOrigin3 (Vector)
        // NetworkVarNames: m_vPrecomputedOBBAngles3 (QAngle)
        // NetworkVarNames: m_vPrecomputedOBBExtent3 (Vector)
        // NetworkVarNames: m_vPrecomputedOBBOrigin4 (Vector)
        // NetworkVarNames: m_vPrecomputedOBBAngles4 (QAngle)
        // NetworkVarNames: m_vPrecomputedOBBExtent4 (Vector)
        // NetworkVarNames: m_vPrecomputedOBBOrigin5 (Vector)
        // NetworkVarNames: m_vPrecomputedOBBAngles5 (QAngle)
        // NetworkVarNames: m_vPrecomputedOBBExtent5 (Vector)
        // NetworkVarNames: m_VisClusters (uint16)
        public static class C_BarnLight {
            public const nint m_bEnabled = 0xD28; // bool
            public const nint m_nColorMode = 0xD2C; // int32
            public const nint m_Color = 0xD30; // Color
            public const nint m_flColorTemperature = 0xD34; // float32
            public const nint m_flBrightness = 0xD38; // float32
            public const nint m_flBrightnessScale = 0xD3C; // float32
            public const nint m_nDirectLight = 0xD40; // int32
            public const nint m_nBakedShadowIndex = 0xD44; // int32
            public const nint m_nLuminaireShape = 0xD48; // int32
            public const nint m_flLuminaireSize = 0xD4C; // float32
            public const nint m_flLuminaireAnisotropy = 0xD50; // float32
            public const nint m_LightStyleString = 0xD58; // CUtlString
            public const nint m_flLightStyleStartTime = 0xD60; // GameTime_t
            public const nint m_QueuedLightStyleStrings = 0xD68; // C_NetworkUtlVectorBase<CUtlString>
            public const nint m_LightStyleEvents = 0xD80; // C_NetworkUtlVectorBase<CUtlString>
            public const nint m_LightStyleTargets = 0xD98; // C_NetworkUtlVectorBase<CHandle<C_BaseModelEntity>>
            public const nint m_StyleEvent = 0xDB0; // CEntityIOOutput[4]
            public const nint m_hLightCookie = 0xE50; // 
            public const nint m_flShape = 0xE58; // float32
            public const nint m_flSoftX = 0xE5C; // float32
            public const nint m_flSoftY = 0xE60; // float32
            public const nint m_flSkirt = 0xE64; // float32
            public const nint m_flSkirtNear = 0xE68; // float32
            public const nint m_vSizeParams = 0xE6C; // Vector
            public const nint m_flRange = 0xE78; // float32
            public const nint m_vShear = 0xE7C; // Vector
            public const nint m_nBakeSpecularToCubemaps = 0xE88; // int32
            public const nint m_vBakeSpecularToCubemapsSize = 0xE8C; // Vector
            public const nint m_nCastShadows = 0xE98; // int32
            public const nint m_nShadowMapSize = 0xE9C; // int32
            public const nint m_nShadowPriority = 0xEA0; // int32
            public const nint m_bContactShadow = 0xEA4; // bool
            public const nint m_nBounceLight = 0xEA8; // int32
            public const nint m_flBounceScale = 0xEAC; // float32
            public const nint m_flMinRoughness = 0xEB0; // float32
            public const nint m_vAlternateColor = 0xEB4; // Vector
            public const nint m_fAlternateColorBrightness = 0xEC0; // float32
            public const nint m_nFog = 0xEC4; // int32
            public const nint m_flFogStrength = 0xEC8; // float32
            public const nint m_nFogShadows = 0xECC; // int32
            public const nint m_flFogScale = 0xED0; // float32
            public const nint m_bFogMixedShadows = 0xED4; // bool
            public const nint m_flFadeSizeStart = 0xED8; // float32
            public const nint m_flFadeSizeEnd = 0xEDC; // float32
            public const nint m_flShadowFadeSizeStart = 0xEE0; // float32
            public const nint m_flShadowFadeSizeEnd = 0xEE4; // float32
            public const nint m_bPrecomputedFieldsValid = 0xEE8; // bool
            public const nint m_vPrecomputedBoundsMins = 0xEEC; // Vector
            public const nint m_vPrecomputedBoundsMaxs = 0xEF8; // Vector
            public const nint m_vPrecomputedOBBOrigin = 0xF04; // Vector
            public const nint m_vPrecomputedOBBAngles = 0xF10; // QAngle
            public const nint m_vPrecomputedOBBExtent = 0xF1C; // Vector
            public const nint m_nPrecomputedSubFrusta = 0xF28; // int32
            public const nint m_vPrecomputedOBBOrigin0 = 0xF2C; // Vector
            public const nint m_vPrecomputedOBBAngles0 = 0xF38; // QAngle
            public const nint m_vPrecomputedOBBExtent0 = 0xF44; // Vector
            public const nint m_vPrecomputedOBBOrigin1 = 0xF50; // Vector
            public const nint m_vPrecomputedOBBAngles1 = 0xF5C; // QAngle
            public const nint m_vPrecomputedOBBExtent1 = 0xF68; // Vector
            public const nint m_vPrecomputedOBBOrigin2 = 0xF74; // Vector
            public const nint m_vPrecomputedOBBAngles2 = 0xF80; // QAngle
            public const nint m_vPrecomputedOBBExtent2 = 0xF8C; // Vector
            public const nint m_vPrecomputedOBBOrigin3 = 0xF98; // Vector
            public const nint m_vPrecomputedOBBAngles3 = 0xFA4; // QAngle
            public const nint m_vPrecomputedOBBExtent3 = 0xFB0; // Vector
            public const nint m_vPrecomputedOBBOrigin4 = 0xFBC; // Vector
            public const nint m_vPrecomputedOBBAngles4 = 0xFC8; // QAngle
            public const nint m_vPrecomputedOBBExtent4 = 0xFD4; // Vector
            public const nint m_vPrecomputedOBBOrigin5 = 0xFE0; // Vector
            public const nint m_vPrecomputedOBBAngles5 = 0xFEC; // QAngle
            public const nint m_vPrecomputedOBBExtent5 = 0xFF8; // Vector
            public const nint m_bInitialBoneSetup = 0x1048; // bool
            public const nint m_VisClusters = 0x1050; // C_NetworkUtlVectorBase<uint16>
        }
        // Parent: C_BaseEntity
        // Field count: 8
        //
        // Metadata:
        // NetworkVarNames: m_flAutoExposureMin (float)
        // NetworkVarNames: m_flAutoExposureMax (float)
        // NetworkVarNames: m_flTonemapPercentTarget (float)
        // NetworkVarNames: m_flTonemapPercentBrightPixels (float)
        // NetworkVarNames: m_flTonemapMinAvgLum (float)
        // NetworkVarNames: m_flExposureAdaptationSpeedUp (float)
        // NetworkVarNames: m_flExposureAdaptationSpeedDown (float)
        // NetworkVarNames: m_flTonemapEVSmoothingRange (float)
        public static class C_TonemapController2 {
            public const nint m_flAutoExposureMin = 0x568; // float32
            public const nint m_flAutoExposureMax = 0x56C; // float32
            public const nint m_flTonemapPercentTarget = 0x570; // float32
            public const nint m_flTonemapPercentBrightPixels = 0x574; // float32
            public const nint m_flTonemapMinAvgLum = 0x578; // float32
            public const nint m_flExposureAdaptationSpeedUp = 0x57C; // float32
            public const nint m_flExposureAdaptationSpeedDown = 0x580; // float32
            public const nint m_flTonemapEVSmoothingRange = 0x584; // float32
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponG3SG1 {
        }
        // Parent: C_BaseModelEntity
        // Field count: 1
        public static class CFuncWater {
            public const nint m_BuoyancyHelper = 0xD28; // CBuoyancyHelper
        }
        // Parent: C_SoundOpvarSetPointEntity
        // Field count: 0
        public static class C_SoundOpvarSetAutoRoomEntity {
        }
        // Parent: C_BaseFlex
        // Field count: 20
        //
        // Metadata:
        // NetworkVarNames: m_AttributeManager (CAttributeContainer)
        // NetworkVarNames: m_OriginalOwnerXuidLow (uint32)
        // NetworkVarNames: m_OriginalOwnerXuidHigh (uint32)
        // NetworkVarNames: m_nFallbackPaintKit (int)
        // NetworkVarNames: m_nFallbackSeed (int)
        // NetworkVarNames: m_flFallbackWear (float)
        // NetworkVarNames: m_nFallbackStatTrak (int)
        public static class C_EconEntity {
            public const nint m_flFlexDelayTime = 0x1130; // float32
            public const nint m_flFlexDelayedWeight = 0x1138; // float32*
            public const nint m_bAttributesInitialized = 0x1140; // bool
            public const nint m_AttributeManager = 0x1148; // C_AttributeContainer
            public const nint m_OriginalOwnerXuidLow = 0x15F0; // uint32
            public const nint m_OriginalOwnerXuidHigh = 0x15F4; // uint32
            public const nint m_nFallbackPaintKit = 0x15F8; // int32
            public const nint m_nFallbackSeed = 0x15FC; // int32
            public const nint m_flFallbackWear = 0x1600; // float32
            public const nint m_nFallbackStatTrak = 0x1604; // int32
            public const nint m_bClientside = 0x1608; // bool
            public const nint m_bParticleSystemsCreated = 0x1609; // bool
            public const nint m_vecAttachedParticles = 0x1610; // CUtlVector<int32>
            public const nint m_hViewmodelAttachment = 0x1628; // CHandle<CBaseAnimGraph>
            public const nint m_iOldTeam = 0x162C; // int32
            public const nint m_bAttachmentDirty = 0x1630; // bool
            public const nint m_nUnloadedModelIndex = 0x1634; // int32
            public const nint m_iNumOwnerValidationRetries = 0x1638; // int32
            public const nint m_hOldProvidee = 0x1648; // CHandle<C_BaseEntity>
            public const nint m_vecAttachedModels = 0x1650; // CUtlVector<C_EconEntity::AttachedModelData_t>
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponSG556 {
        }
        // Parent: C_BarnLight
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_bShowLight (bool)
        public static class C_RectLight {
            public const nint m_bShowLight = 0x1070; // bool
        }
        // Parent: C_BaseModelEntity
        // Field count: 24
        //
        // Metadata:
        // MNetworkIncludeByUserGroup
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // NetworkVarNames: m_szSnapshotFileName (char)
        // NetworkVarNames: m_bActive (bool)
        // NetworkVarNames: m_bFrozen (bool)
        // NetworkVarNames: m_flFreezeTransitionDuration (float)
        // NetworkVarNames: m_nStopType (int)
        // NetworkVarNames: m_bAnimateDuringGameplayPause (bool)
        // NetworkVarNames: m_iEffectIndex (HParticleSystemDefinitionStrong)
        // NetworkVarNames: m_flStartTime (GameTime_t)
        // NetworkVarNames: m_flPreSimTime (float32)
        // NetworkVarNames: m_vServerControlPoints (Vector)
        // NetworkVarNames: m_iServerControlPointAssignments (uint8)
        // NetworkVarNames: m_hControlPointEnts (CHandle<CBaseEntity>)
        // NetworkVarNames: m_bNoSave (bool)
        // NetworkVarNames: m_bNoFreeze (bool)
        // NetworkVarNames: m_bNoRamp (bool)
        public static class C_ParticleSystem {
            public const nint m_szSnapshotFileName = 0xD28; // char[512]
            public const nint m_bActive = 0xF28; // bool
            public const nint m_bFrozen = 0xF29; // bool
            public const nint m_flFreezeTransitionDuration = 0xF2C; // float32
            public const nint m_nStopType = 0xF30; // int32
            public const nint m_bAnimateDuringGameplayPause = 0xF34; // bool
            public const nint m_iEffectIndex = 0xF38; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_flStartTime = 0xF40; // GameTime_t
            public const nint m_flPreSimTime = 0xF44; // float32
            public const nint m_vServerControlPoints = 0xF48; // Vector[4]
            public const nint m_iServerControlPointAssignments = 0xF78; // uint8[4]
            public const nint m_hControlPointEnts = 0xF7C; // CHandle<C_BaseEntity>[64]
            public const nint m_bNoSave = 0x107C; // bool
            public const nint m_bNoFreeze = 0x107D; // bool
            public const nint m_bNoRamp = 0x107E; // bool
            public const nint m_bStartActive = 0x107F; // bool
            public const nint m_iszEffectName = 0x1080; // CUtlSymbolLarge
            public const nint m_iszControlPointNames = 0x1088; // CUtlSymbolLarge[64]
            public const nint m_nDataCP = 0x1288; // int32
            public const nint m_vecDataCPValue = 0x128C; // Vector
            public const nint m_nTintCP = 0x1298; // int32
            public const nint m_clrTint = 0x129C; // Color
            public const nint m_bOldActive = 0x12C0; // bool
            public const nint m_bOldFrozen = 0x12C1; // bool
        }
        // Parent: C_CSGO_PreviewPlayer
        // Field count: 0
        public static class C_CSGO_TeamPreviewModel {
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponGlock {
        }
        // Parent: CEnvSoundscapeTriggerable
        // Field count: 0
        public static class CEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable {
        }
        // Parent: C_GameRulesProxy
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_pGameRules (C_CSGameRules*)
        public static class C_CSGameRulesProxy {
            public const nint m_pGameRules = 0x568; // C_CSGameRules*
        }
        // Parent: CPlayerPawnComponent
        // Field count: 6
        //
        // Metadata:
        // NetworkVarNames: m_iObserverMode (uint8)
        // NetworkVarNames: m_hObserverTarget (CHandle<CBaseEntity>)
        public static class CPlayer_ObserverServices {
            public const nint m_iObserverMode = 0x40; // uint8
            public const nint m_hObserverTarget = 0x44; // CHandle<C_BaseEntity>
            public const nint m_iObserverLastMode = 0x48; // 
            public const nint m_bForcedObserverMode = 0x4C; // bool
            public const nint m_flObserverChaseDistance = 0x50; // float32
            public const nint m_flObserverChaseDistanceCalcTime = 0x54; // GameTime_t
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class CWeaponZoneRepulsor {
        }
        // Parent: CPlayerPawnComponent
        // Field count: 0
        public static class CPlayer_WaterServices {
        }
        // Parent: C_CSGO_EndOfMatchLineupEndpoint
        // Field count: 0
        public static class C_CSGO_EndOfMatchLineupEnd {
        }
        // Parent: None
        // Field count: 6
        public static class SequenceHistory_t {
            public const nint m_hSequence = 0x0; // HSequence
            public const nint m_flSeqStartTime = 0x4; // GameTime_t
            public const nint m_flSeqFixedCycle = 0x8; // float32
            public const nint m_nSeqLoopMode = 0xC; // AnimLoopMode_t
            public const nint m_flPlaybackRate = 0x10; // float32
            public const nint m_flCyclesPerSecond = 0x14; // float32
        }
        // Parent: CBaseAnimGraph
        // Field count: 1
        public static class C_Multimeter {
            public const nint m_hTargetC4 = 0xF90; // CHandle<C_PlantedC4>
        }
        // Parent: C_BaseEntity
        // Field count: 2
        public static class C_CsmFovOverride {
            public const nint m_cameraName = 0x568; // CUtlString
            public const nint m_flCsmFovOverrideValue = 0x570; // float32
        }
        // Parent: C_BaseModelEntity
        // Field count: 9
        //
        // Metadata:
        // NetworkVarNames: m_hDecalMaterial (HMaterialStrong)
        // NetworkVarNames: m_flWidth (float)
        // NetworkVarNames: m_flHeight (float)
        // NetworkVarNames: m_flDepth (float)
        // NetworkVarNames: m_nRenderOrder (uint32)
        // NetworkVarNames: m_bProjectOnWorld (bool)
        // NetworkVarNames: m_bProjectOnCharacters (bool)
        // NetworkVarNames: m_bProjectOnWater (bool)
        // NetworkVarNames: m_flDepthSortBias (float)
        public static class C_EnvDecal {
            public const nint m_hDecalMaterial = 0xD28; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_flWidth = 0xD30; // float32
            public const nint m_flHeight = 0xD34; // float32
            public const nint m_flDepth = 0xD38; // float32
            public const nint m_nRenderOrder = 0xD3C; // uint32
            public const nint m_bProjectOnWorld = 0xD40; // bool
            public const nint m_bProjectOnCharacters = 0xD41; // bool
            public const nint m_bProjectOnWater = 0xD42; // bool
            public const nint m_flDepthSortBias = 0xD44; // float32
        }
        // Parent: CCSGameModeRules
        // Field count: 0
        public static class CCSGameModeRules_Noop {
        }
        // Parent: C_BaseEntity
        // Field count: 18
        //
        // Metadata:
        // MNetworkIncludeByUserGroup
        // NetworkVarNames: m_MinFalloff (float32)
        // NetworkVarNames: m_MaxFalloff (float32)
        // NetworkVarNames: m_flFadeInDuration (float32)
        // NetworkVarNames: m_flFadeOutDuration (float32)
        // NetworkVarNames: m_flMaxWeight (float32)
        // NetworkVarNames: m_flCurWeight (float32)
        // NetworkVarNames: m_netlookupFilename (char)
        // NetworkVarNames: m_bEnabled (bool)
        // NetworkVarNames: m_bMaster (bool)
        // NetworkVarNames: m_bClientSide (bool)
        // NetworkVarNames: m_bExclusive (bool)
        public static class C_ColorCorrection {
            public const nint m_vecOrigin = 0x568; // Vector
            public const nint m_MinFalloff = 0x574; // float32
            public const nint m_MaxFalloff = 0x578; // float32
            public const nint m_flFadeInDuration = 0x57C; // float32
            public const nint m_flFadeOutDuration = 0x580; // float32
            public const nint m_flMaxWeight = 0x584; // float32
            public const nint m_flCurWeight = 0x588; // float32
            public const nint m_netlookupFilename = 0x58C; // char[512]
            public const nint m_bEnabled = 0x78C; // bool
            public const nint m_bMaster = 0x78D; // bool
            public const nint m_bClientSide = 0x78E; // bool
            public const nint m_bExclusive = 0x78F; // bool
            public const nint m_bEnabledOnClient = 0x790; // bool[1]
            public const nint m_flCurWeightOnClient = 0x794; // float32[1]
            public const nint m_bFadingIn = 0x798; // bool[1]
            public const nint m_flFadeStartWeight = 0x79C; // float32[1]
            public const nint m_flFadeStartTime = 0x7A0; // float32[1]
            public const nint m_flFadeDuration = 0x7A4; // float32[1]
        }
        // Parent: C_BaseTrigger
        // Field count: 0
        public static class CHostageRescueZoneShim {
        }
        // Parent: None
        // Field count: 7
        //
        // Metadata:
        // NetworkVarNames: m_hModel (HModelStrong)
        // NetworkVarNames: m_bClientClothCreationSuppressed (bool)
        // NetworkVarNames: m_MeshGroupMask (MeshGroupMask_t)
        // NetworkVarNames: m_nIdealMotionType (int8)
        public static class CModelState {
            public const nint m_hModel = 0xA0; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_ModelName = 0xA8; // CUtlSymbolLarge
            public const nint m_bClientClothCreationSuppressed = 0xE8; // bool
            public const nint m_MeshGroupMask = 0x198; // uint64
            public const nint m_nIdealMotionType = 0x21A; // int8
            public const nint m_nForceLOD = 0x21B; // int8
            public const nint m_nClothUpdateFlags = 0x21C; // int8
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponP250 {
        }
        // Parent: None
        // Field count: 1
        public static class C_EconEntity__AttachedModelData_t {
            public const nint m_iModelDisplayFlags = 0x0; // int32
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_Attributes (CEconItemAttribute)
        public static class CAttributeList {
            public const nint m_Attributes = 0x8; // C_UtlVectorEmbeddedNetworkVar<CEconItemAttribute>
            public const nint m_pManager = 0x58; // CAttributeManager*
        }
        // Parent: C_MultiplayRules
        // Field count: 0
        public static class C_TeamplayRules {
        }
        // Parent: C_CSGO_TeamPreviewCamera
        // Field count: 0
        public static class C_CSGO_CounterTerroristWingmanIntroCamera {
        }
        // Parent: C_CSWeaponBase
        // Field count: 0
        public static class C_WeaponNOVA {
        }
        // Parent: C_BaseCSGrenadeProjectile
        // Field count: 0
        public static class C_HEGrenadeProjectile {
        }
        // Parent: C_BaseToggle
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_bIsUsable (bool)
        public static class C_BaseDoor {
            public const nint m_bIsUsable = 0xD28; // bool
        }
        // Parent: C_BaseModelEntity
        // Field count: 2
        public static class CGrenadeTracer {
            public const nint m_flTracerDuration = 0xD40; // float32
            public const nint m_nType = 0xD44; // GrenadeType_t
        }
        // Parent: C_BaseTrigger
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_bBombPlantedHere (bool)
        public static class CBombTarget {
            public const nint m_bBombPlantedHere = 0xD30; // bool
        }
        // Parent: C_BaseClientUIEntity
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_hActivator (EHANDLE)
        public static class C_PointClientUIDialog {
            public const nint m_hActivator = 0xD58; // CHandle<C_BaseEntity>
            public const nint m_bStartEnabled = 0xD5C; // bool
        }
        // Parent: CCSGameModeRules
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_WeaponSequence (CUtlString)
        public static class CCSGameModeRules_ArmsRace {
            public const nint m_WeaponSequence = 0x30; // C_NetworkUtlVectorBase<CUtlString>
        }
        // Parent: C_PointEntity
        // Field count: 1
        public static class CPointChildModifier {
            public const nint m_bOrphanInsteadOfDeletingChildrenOnRemove = 0x568; // bool
        }
        // Parent: None
        // Field count: 15
        //
        // Metadata:
        // NetworkVarNames: m_PlayerDamager (CHandle<CCSPlayerPawn>)
        // NetworkVarNames: m_PlayerRecipient (CHandle<CCSPlayerPawn>)
        // NetworkVarNames: m_hPlayerControllerDamager (CHandle<CCSPlayerController>)
        // NetworkVarNames: m_hPlayerControllerRecipient (CHandle<CCSPlayerController>)
        // NetworkVarNames: m_szPlayerDamagerName (CUtlString)
        // NetworkVarNames: m_szPlayerRecipientName (CUtlString)
        // NetworkVarNames: m_DamagerXuid (uint64)
        // NetworkVarNames: m_RecipientXuid (uint64)
        // NetworkVarNames: m_iDamage (int)
        // NetworkVarNames: m_iActualHealthRemoved (int)
        // NetworkVarNames: m_iNumHits (int)
        // NetworkVarNames: m_iLastBulletUpdate (int)
        // NetworkVarNames: m_bIsOtherEnemy (bool)
        // NetworkVarNames: m_killType (EKillTypes_t)
        public static class CDamageRecord {
            public const nint m_PlayerDamager = 0x28; // CHandle<C_CSPlayerPawn>
            public const nint m_PlayerRecipient = 0x2C; // CHandle<C_CSPlayerPawn>
            public const nint m_hPlayerControllerDamager = 0x30; // CHandle<CCSPlayerController>
            public const nint m_hPlayerControllerRecipient = 0x34; // CHandle<CCSPlayerController>
            public const nint m_szPlayerDamagerName = 0x38; // CUtlString
            public const nint m_szPlayerRecipientName = 0x40; // CUtlString
            public const nint m_DamagerXuid = 0x48; // uint64
            public const nint m_RecipientXuid = 0x50; // uint64
            public const nint m_iBulletsDamage = 0x58; // int32
            public const nint m_iDamage = 0x5C; // int32
            public const nint m_iActualHealthRemoved = 0x60; // int32
            public const nint m_iNumHits = 0x64; // int32
            public const nint m_iLastBulletUpdate = 0x68; // int32
            public const nint m_bIsOtherEnemy = 0x6C; // bool
            public const nint m_killType = 0x6D; // EKillTypes_t
        }
        // Parent: C_BaseEntity
        // Field count: 0
        public static class C_InfoLadderDismount {
        }
        // Parent: CPlayerControllerComponent
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_nSendUpdate (int)
        // NetworkVarNames: m_DamageList (CDamageRecord)
        public static class CCSPlayerController_DamageServices {
            public const nint m_nSendUpdate = 0x40; // int32
            public const nint m_DamageList = 0x48; // C_UtlVectorEmbeddedNetworkVar<CDamageRecord>
        }
        // Parent: CEntityComponent
        // Field count: 5
        public static class CRenderComponent {
            public const nint __m_pChainEntity = 0x10; // CNetworkVarChainer
            public const nint m_bIsRenderingWithViewModels = 0x50; // bool
            public const nint m_nSplitscreenFlags = 0x54; // uint32
            public const nint m_bEnableRendering = 0x60; // bool
            public const nint m_bInterpolationReadyToDraw = 0xB0; // bool
        }
        // Parent: CEnvSoundscape
        // Field count: 1
        public static class CEnvSoundscapeProxy {
            public const nint m_MainSoundscapeName = 0x608; // CUtlSymbolLarge
        }
        // Parent: C_SoundEventEntity
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_vMins (Vector)
        // NetworkVarNames: m_vMaxs (Vector)
        public static class C_SoundEventOBBEntity {
            public const nint m_vMins = 0x628; // Vector
            public const nint m_vMaxs = 0x634; // Vector
        }
        // Parent: CEntityComponent
        // Field count: 66
        //
        // Metadata:
        // NetworkVarNames: m_Color (Color)
        // NetworkVarNames: m_SecondaryColor (Color)
        // NetworkVarNames: m_flBrightness (float)
        // NetworkVarNames: m_flBrightnessScale (float)
        // NetworkVarNames: m_flBrightnessMult (float)
        // NetworkVarNames: m_flRange (float)
        // NetworkVarNames: m_flFalloff (float)
        // NetworkVarNames: m_flAttenuation0 (float)
        // NetworkVarNames: m_flAttenuation1 (float)
        // NetworkVarNames: m_flAttenuation2 (float)
        // NetworkVarNames: m_flTheta (float)
        // NetworkVarNames: m_flPhi (float)
        // NetworkVarNames: m_hLightCookie (HRenderTextureStrong)
        // NetworkVarNames: m_nCascades (int)
        // NetworkVarNames: m_nCastShadows (int)
        // NetworkVarNames: m_nShadowWidth (int)
        // NetworkVarNames: m_nShadowHeight (int)
        // NetworkVarNames: m_bRenderDiffuse (bool)
        // NetworkVarNames: m_nRenderSpecular (int)
        // NetworkVarNames: m_bRenderTransmissive (bool)
        // NetworkVarNames: m_flOrthoLightWidth (float)
        // NetworkVarNames: m_flOrthoLightHeight (float)
        // NetworkVarNames: m_nStyle (int)
        // NetworkVarNames: m_Pattern (CUtlString)
        // NetworkVarNames: m_nCascadeRenderStaticObjects (int)
        // NetworkVarNames: m_flShadowCascadeCrossFade (float)
        // NetworkVarNames: m_flShadowCascadeDistanceFade (float)
        // NetworkVarNames: m_flShadowCascadeDistance0 (float)
        // NetworkVarNames: m_flShadowCascadeDistance1 (float)
        // NetworkVarNames: m_flShadowCascadeDistance2 (float)
        // NetworkVarNames: m_flShadowCascadeDistance3 (float)
        // NetworkVarNames: m_nShadowCascadeResolution0 (int)
        // NetworkVarNames: m_nShadowCascadeResolution1 (int)
        // NetworkVarNames: m_nShadowCascadeResolution2 (int)
        // NetworkVarNames: m_nShadowCascadeResolution3 (int)
        // NetworkVarNames: m_bUsesBakedShadowing (bool)
        // NetworkVarNames: m_nShadowPriority (int)
        // NetworkVarNames: m_nBakedShadowIndex (int)
        // NetworkVarNames: m_bRenderToCubemaps (bool)
        // NetworkVarNames: m_nDirectLight (int)
        // NetworkVarNames: m_nIndirectLight (int)
        // NetworkVarNames: m_flFadeMinDist (float)
        // NetworkVarNames: m_flFadeMaxDist (float)
        // NetworkVarNames: m_flShadowFadeMinDist (float)
        // NetworkVarNames: m_flShadowFadeMaxDist (float)
        // NetworkVarNames: m_bEnabled (bool)
        // NetworkVarNames: m_bFlicker (bool)
        // NetworkVarNames: m_bPrecomputedFieldsValid (bool)
        // NetworkVarNames: m_vPrecomputedBoundsMins (Vector)
        // NetworkVarNames: m_vPrecomputedBoundsMaxs (Vector)
        // NetworkVarNames: m_vPrecomputedOBBOrigin (Vector)
        // NetworkVarNames: m_vPrecomputedOBBAngles (QAngle)
        // NetworkVarNames: m_vPrecomputedOBBExtent (Vector)
        // NetworkVarNames: m_flPrecomputedMaxRange (float)
        // NetworkVarNames: m_nFogLightingMode (int)
        // NetworkVarNames: m_flFogContributionStength (float)
        // NetworkVarNames: m_flNearClipPlane (float)
        // NetworkVarNames: m_SkyColor (Color)
        // NetworkVarNames: m_flSkyIntensity (float)
        // NetworkVarNames: m_SkyAmbientBounce (Color)
        // NetworkVarNames: m_bUseSecondaryColor (bool)
        // NetworkVarNames: m_bMixedShadows (bool)
        // NetworkVarNames: m_flLightStyleStartTime (GameTime_t)
        // NetworkVarNames: m_flCapsuleLength (float)
        // NetworkVarNames: m_flMinRoughness (float)
        public static class CLightComponent {
            public const nint __m_pChainEntity = 0x38; // CNetworkVarChainer
            public const nint m_Color = 0x75; // Color
            public const nint m_SecondaryColor = 0x79; // Color
            public const nint m_flBrightness = 0x80; // float32
            public const nint m_flBrightnessScale = 0x84; // float32
            public const nint m_flBrightnessMult = 0x88; // float32
            public const nint m_flRange = 0x8C; // float32
            public const nint m_flFalloff = 0x90; // float32
            public const nint m_flAttenuation0 = 0x94; // float32
            public const nint m_flAttenuation1 = 0x98; // float32
            public const nint m_flAttenuation2 = 0x9C; // float32
            public const nint m_flTheta = 0xA0; // float32
            public const nint m_flPhi = 0xA4; // float32
            public const nint m_hLightCookie = 0xA8; // 
            public const nint m_nCascades = 0xB0; // int32
            public const nint m_nCastShadows = 0xB4; // int32
            public const nint m_nShadowWidth = 0xB8; // int32
            public const nint m_nShadowHeight = 0xBC; // int32
            public const nint m_bRenderDiffuse = 0xC0; // bool
            public const nint m_nRenderSpecular = 0xC4; // int32
            public const nint m_bRenderTransmissive = 0xC8; // bool
            public const nint m_flOrthoLightWidth = 0xCC; // float32
            public const nint m_flOrthoLightHeight = 0xD0; // float32
            public const nint m_nStyle = 0xD4; // int32
            public const nint m_Pattern = 0xD8; // CUtlString
            public const nint m_nCascadeRenderStaticObjects = 0xE0; // int32
            public const nint m_flShadowCascadeCrossFade = 0xE4; // float32
            public const nint m_flShadowCascadeDistanceFade = 0xE8; // float32
            public const nint m_flShadowCascadeDistance0 = 0xEC; // float32
            public const nint m_flShadowCascadeDistance1 = 0xF0; // float32
            public const nint m_flShadowCascadeDistance2 = 0xF4; // float32
            public const nint m_flShadowCascadeDistance3 = 0xF8; // float32
            public const nint m_nShadowCascadeResolution0 = 0xFC; // int32
            public const nint m_nShadowCascadeResolution1 = 0x100; // int32
            public const nint m_nShadowCascadeResolution2 = 0x104; // int32
            public const nint m_nShadowCascadeResolution3 = 0x108; // int32
            public const nint m_bUsesBakedShadowing = 0x10C; // bool
            public const nint m_nShadowPriority = 0x110; // int32
            public const nint m_nBakedShadowIndex = 0x114; // int32
            public const nint m_bRenderToCubemaps = 0x118; // bool
            public const nint m_nDirectLight = 0x11C; // int32
            public const nint m_nIndirectLight = 0x120; // int32
            public const nint m_flFadeMinDist = 0x124; // float32
            public const nint m_flFadeMaxDist = 0x128; // float32
            public const nint m_flShadowFadeMinDist = 0x12C; // float32
            public const nint m_flShadowFadeMaxDist = 0x130; // float32
            public const nint m_bEnabled = 0x134; // bool
            public const nint m_bFlicker = 0x135; // bool
            public const nint m_bPrecomputedFieldsValid = 0x136; // bool
            public const nint m_vPrecomputedBoundsMins = 0x138; // Vector
            public const nint m_vPrecomputedBoundsMaxs = 0x144; // Vector
            public const nint m_vPrecomputedOBBOrigin = 0x150; // Vector
            public const nint m_vPrecomputedOBBAngles = 0x15C; // QAngle
            public const nint m_vPrecomputedOBBExtent = 0x168; // Vector
            public const nint m_flPrecomputedMaxRange = 0x174; // float32
            public const nint m_nFogLightingMode = 0x178; // int32
            public const nint m_flFogContributionStength = 0x17C; // float32
            public const nint m_flNearClipPlane = 0x180; // float32
            public const nint m_SkyColor = 0x184; // Color
            public const nint m_flSkyIntensity = 0x188; // float32
            public const nint m_SkyAmbientBounce = 0x18C; // Color
            public const nint m_bUseSecondaryColor = 0x190; // bool
            public const nint m_bMixedShadows = 0x191; // bool
            public const nint m_flLightStyleStartTime = 0x194; // GameTime_t
            public const nint m_flCapsuleLength = 0x198; // float32
            public const nint m_flMinRoughness = 0x19C; // float32
        }
        // Parent: C_CSGO_TeamPreviewCamera
        // Field count: 0
        public static class C_CSGO_CounterTerroristTeamIntroCamera {
        }
        // Parent: None
        // Field count: 0
        public static class CEntityComponent {
        }
        // Parent: IEconItemInterface
        // Field count: 29
        //
        // Metadata:
        // NetworkVarNames: m_iItemDefinitionIndex (item_definition_index_t)
        // NetworkVarNames: m_iEntityQuality (int)
        // NetworkVarNames: m_iEntityLevel (uint32)
        // NetworkVarNames: m_iItemIDHigh (uint32)
        // NetworkVarNames: m_iItemIDLow (uint32)
        // NetworkVarNames: m_iAccountID (uint32)
        // NetworkVarNames: m_iInventoryPosition (uint32)
        // NetworkVarNames: m_bInitialized (bool)
        // NetworkVarNames: m_AttributeList (CAttributeList)
        // NetworkVarNames: m_NetworkedDynamicAttributes (CAttributeList)
        // NetworkVarNames: m_szCustomName (char)
        public static class C_EconItemView {
            public const nint m_bInventoryImageRgbaRequested = 0x60; // bool
            public const nint m_bInventoryImageTriedCache = 0x61; // bool
            public const nint m_nInventoryImageRgbaWidth = 0x80; // int32
            public const nint m_nInventoryImageRgbaHeight = 0x84; // int32
            public const nint m_szCurrentLoadCachedFileName = 0x88; // char[260]
            public const nint m_bRestoreCustomMaterialAfterPrecache = 0x1B8; // bool
            public const nint m_iItemDefinitionIndex = 0x1BA; // uint16
            public const nint m_iEntityQuality = 0x1BC; // int32
            public const nint m_iEntityLevel = 0x1C0; // uint32
            public const nint m_iItemID = 0x1C8; // uint64
            public const nint m_iItemIDHigh = 0x1D0; // uint32
            public const nint m_iItemIDLow = 0x1D4; // uint32
            public const nint m_iAccountID = 0x1D8; // uint32
            public const nint m_iInventoryPosition = 0x1DC; // uint32
            public const nint m_bInitialized = 0x1E8; // bool
            public const nint m_bDisallowSOC = 0x1E9; // bool
            public const nint m_bIsStoreItem = 0x1EA; // bool
            public const nint m_bIsTradeItem = 0x1EB; // bool
            public const nint m_iEntityQuantity = 0x1EC; // int32
            public const nint m_iRarityOverride = 0x1F0; // int32
            public const nint m_iQualityOverride = 0x1F4; // int32
            public const nint m_iOriginOverride = 0x1F8; // int32
            public const nint m_unClientFlags = 0x1FC; // uint8
            public const nint m_unOverrideStyle = 0x1FD; // uint8
            public const nint m_AttributeList = 0x210; // CAttributeList
            public const nint m_NetworkedDynamicAttributes = 0x270; // CAttributeList
            public const nint m_szCustomName = 0x2D0; // char[161]
            public const nint m_szCustomNameOverride = 0x371; // char[161]
            public const nint m_bInitializedTags = 0x440; // bool
        }
        // Parent: C_BaseEntity
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_Handle (CHandle<CBaseEntity>)
        // NetworkVarNames: m_bSendHandle (bool)
        public static class C_HandleTest {
            public const nint m_Handle = 0x568; // CHandle<C_BaseEntity>
            public const nint m_bSendHandle = 0x56C; // bool
        }
        // Parent: C_BaseEntity
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_EnvWindShared (CEnvWindShared)
        public static class C_EnvWindClientside {
            public const nint m_EnvWindShared = 0x568; // C_EnvWindShared
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponMAC10 {
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_flDisplayHealth (float)
        public static class C_WeaponShield {
            public const nint m_flDisplayHealth = 0x1B40; // float32
        }
        // Parent: C_PointClientUIWorldPanel
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_messageText (char)
        public static class C_PointClientUIWorldTextPanel {
            public const nint m_messageText = 0xF90; // char[512]
        }
        // Parent: CPlayer_UseServices
        // Field count: 0
        public static class CCSPlayer_UseServices {
        }
        // Parent: CPlayerPawnComponent
        // Field count: 15
        //
        // Metadata:
        // NetworkVarNames: m_nToggleButtonDownMask (ButtonBitMask_t)
        // NetworkVarNames: m_flMaxspeed (float32)
        // NetworkVarNames: m_arrForceSubtickMoveWhen (float32)
        public static class CPlayer_MovementServices {
            public const nint m_nImpulse = 0x40; // int32
            public const nint m_nButtons = 0x48; // CInButtonState
            public const nint m_nQueuedButtonDownMask = 0x68; // uint64
            public const nint m_nQueuedButtonChangeMask = 0x70; // uint64
            public const nint m_nButtonDoublePressed = 0x78; // uint64
            public const nint m_pButtonPressedCmdNumber = 0x80; // uint32[64]
            public const nint m_nLastCommandNumberProcessed = 0x180; // uint32
            public const nint m_nToggleButtonDownMask = 0x188; // uint64
            public const nint m_flMaxspeed = 0x198; // float32
            public const nint m_arrForceSubtickMoveWhen = 0x19C; // float32[4]
            public const nint m_flForwardMove = 0x1AC; // float32
            public const nint m_flLeftMove = 0x1B0; // float32
            public const nint m_flUpMove = 0x1B4; // float32
            public const nint m_vecLastMovementImpulses = 0x1B8; // Vector
            public const nint m_vecOldViewAngles = 0x1C4; // QAngle
        }
        // Parent: C_BaseEntity
        // Field count: 11
        public static class CEnvSoundscape {
            public const nint m_OnPlay = 0x568; // CEntityIOOutput
            public const nint m_flRadius = 0x590; // float32
            public const nint m_soundEventName = 0x598; // CUtlSymbolLarge
            public const nint m_bOverrideWithEvent = 0x5A0; // bool
            public const nint m_soundscapeIndex = 0x5A4; // int32
            public const nint m_soundscapeEntityListId = 0x5A8; // int32
            public const nint m_positionNames = 0x5B0; // CUtlSymbolLarge[8]
            public const nint m_hProxySoundscape = 0x5F0; // CHandle<CEnvSoundscape>
            public const nint m_bDisabled = 0x5F4; // bool
            public const nint m_soundscapeName = 0x5F8; // CUtlSymbolLarge
            public const nint m_soundEventHash = 0x600; // uint32
        }
        // Parent: CEntitySubclassVDataBase
        // Field count: 14
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CBasePlayerVData {
            public const nint m_sModelName = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_flHeadDamageMultiplier = 0x108; // CSkillFloat
            public const nint m_flChestDamageMultiplier = 0x118; // CSkillFloat
            public const nint m_flStomachDamageMultiplier = 0x128; // CSkillFloat
            public const nint m_flArmDamageMultiplier = 0x138; // CSkillFloat
            public const nint m_flLegDamageMultiplier = 0x148; // CSkillFloat
            public const nint m_flHoldBreathTime = 0x158; // float32
            public const nint m_flDrowningDamageInterval = 0x15C; // float32
            public const nint m_nDrowningDamageInitial = 0x160; // int32
            public const nint m_nDrowningDamageMax = 0x164; // int32
            public const nint m_nWaterSpeed = 0x168; // int32
            public const nint m_flUseRange = 0x16C; // float32
            public const nint m_flUseAngleTolerance = 0x170; // float32
            public const nint m_flCrouchTime = 0x174; // float32
        }
        // Parent: CPlayerControllerComponent
        // Field count: 4
        //
        // Metadata:
        // NetworkVarNames: m_iAccount (int)
        // NetworkVarNames: m_iStartAccount (int)
        // NetworkVarNames: m_iTotalCashSpent (int)
        // NetworkVarNames: m_iCashSpentThisRound (int)
        public static class CCSPlayerController_InGameMoneyServices {
            public const nint m_iAccount = 0x40; // int32
            public const nint m_iStartAccount = 0x44; // int32
            public const nint m_iTotalCashSpent = 0x48; // int32
            public const nint m_iCashSpentThisRound = 0x4C; // int32
        }
        // Parent: None
        // Field count: 2
        public static class C_EnvWindShared__WindVariationEvent_t {
            public const nint m_flWindAngleVariation = 0x0; // float32
            public const nint m_flWindSpeedVariation = 0x4; // float32
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponUSPSilencer {
        }
        // Parent: C_Sprite
        // Field count: 0
        public static class CSpriteOriented {
        }
        // Parent: C_CSGO_EndOfMatchLineupEndpoint
        // Field count: 0
        public static class C_CSGO_EndOfMatchLineupStart {
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponFamas {
        }
        // Parent: C_ParticleSystem
        // Field count: 5
        //
        // Metadata:
        // NetworkVarNames: m_flAlphaScale (float32)
        // NetworkVarNames: m_flRadiusScale (float32)
        // NetworkVarNames: m_flSelfIllumScale (float32)
        // NetworkVarNames: m_ColorTint (Color)
        // NetworkVarNames: m_hTextureOverride (HRenderTextureStrong)
        public static class C_EnvParticleGlow {
            public const nint m_flAlphaScale = 0x12D8; // float32
            public const nint m_flRadiusScale = 0x12DC; // float32
            public const nint m_flSelfIllumScale = 0x12E0; // float32
            public const nint m_ColorTint = 0x12E4; // Color
            public const nint m_hTextureOverride = 0x12E8; // 
        }
        // Parent: C_BaseEntity
        // Field count: 15
        public static class C_SoundEventEntity {
            public const nint m_bStartOnSpawn = 0x568; // bool
            public const nint m_bToLocalPlayer = 0x569; // bool
            public const nint m_bStopOnNew = 0x56A; // bool
            public const nint m_bSaveRestore = 0x56B; // bool
            public const nint m_bSavedIsPlaying = 0x56C; // bool
            public const nint m_flSavedElapsedTime = 0x570; // float32
            public const nint m_iszSourceEntityName = 0x578; // CUtlSymbolLarge
            public const nint m_iszAttachmentName = 0x580; // CUtlSymbolLarge
            public const nint m_onGUIDChanged = 0x588; // CEntityOutputTemplate<uint64>
            public const nint m_onSoundFinished = 0x5B0; // CEntityIOOutput
            public const nint m_flClientCullRadius = 0x5D8; // float32
            public const nint m_iszSoundName = 0x608; // CUtlSymbolLarge
            public const nint m_hSource = 0x618; // CEntityHandle
            public const nint m_nEntityIndexSelection = 0x61C; // int32
            public const nint m_bClientSideOnly = 0x0; // bitfield:1
        }
        // Parent: C_CSGO_TeamPreviewCharacterPosition
        // Field count: 0
        public static class C_CSGO_TeamIntroCharacterPosition {
        }
        // Parent: C_CSGO_PreviewModel
        // Field count: 0
        public static class C_CSGO_PreviewModelAlias_csgo_item_previewmodel {
        }
        // Parent: C_BaseModelEntity
        // Field count: 18
        //
        // Metadata:
        // MNetworkIncludeByName
        // MNetworkExcludeByName
        // MNetworkIncludeByUserGroup
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // NetworkVarNames: m_vDirection (Vector)
        // NetworkVarNames: m_iszEffectName (string_t)
        // NetworkVarNames: m_iszSSEffectName (string_t)
        // NetworkVarNames: m_clrOverlay (Color)
        // NetworkVarNames: m_bOn (bool)
        // NetworkVarNames: m_bmaxColor (bool)
        // NetworkVarNames: m_flSize (float32)
        // NetworkVarNames: m_flHazeScale (float32)
        // NetworkVarNames: m_flRotation (float32)
        // NetworkVarNames: m_flHDRColorScale (float32)
        // NetworkVarNames: m_flAlphaHaze (float32)
        // NetworkVarNames: m_flAlphaScale (float32)
        // NetworkVarNames: m_flAlphaHdr (float32)
        // NetworkVarNames: m_flFarZScale (float32)
        public static class C_Sun {
            public const nint m_fxSSSunFlareEffectIndex = 0xD28; // ParticleIndex_t
            public const nint m_fxSunFlareEffectIndex = 0xD2C; // ParticleIndex_t
            public const nint m_fdistNormalize = 0xD30; // float32
            public const nint m_vSunPos = 0xD34; // Vector
            public const nint m_vDirection = 0xD40; // Vector
            public const nint m_iszEffectName = 0xD50; // CUtlSymbolLarge
            public const nint m_iszSSEffectName = 0xD58; // CUtlSymbolLarge
            public const nint m_clrOverlay = 0xD60; // Color
            public const nint m_bOn = 0xD64; // bool
            public const nint m_bmaxColor = 0xD65; // bool
            public const nint m_flSize = 0xD68; // float32
            public const nint m_flHazeScale = 0xD6C; // float32
            public const nint m_flRotation = 0xD70; // float32
            public const nint m_flHDRColorScale = 0xD74; // float32
            public const nint m_flAlphaHaze = 0xD78; // float32
            public const nint m_flAlphaScale = 0xD7C; // float32
            public const nint m_flAlphaHdr = 0xD80; // float32
            public const nint m_flFarZScale = 0xD84; // float32
        }
        // Parent: C_BaseEntity
        // Field count: 0
        public static class C_CSGO_EndOfMatchLineupEndpoint {
        }
        // Parent: CPlayerControllerComponent
        // Field count: 5
        //
        // Metadata:
        // NetworkVarNames: m_perRoundStats (CSPerRoundStats_t)
        // NetworkVarNames: m_matchStats (CSMatchStats_t)
        // NetworkVarNames: m_iNumRoundKills (int)
        // NetworkVarNames: m_iNumRoundKillsHeadshots (int)
        // NetworkVarNames: m_unTotalRoundDamageDealt (uint32)
        public static class CCSPlayerController_ActionTrackingServices {
            public const nint m_perRoundStats = 0x40; // C_UtlVectorEmbeddedNetworkVar<CSPerRoundStats_t>
            public const nint m_matchStats = 0x90; // CSMatchStats_t
            public const nint m_iNumRoundKills = 0x110; // int32
            public const nint m_iNumRoundKillsHeadshots = 0x114; // int32
            public const nint m_unTotalRoundDamageDealt = 0x118; // uint32
        }
        // Parent: CEntityComponent
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_bvDisabledHitGroups (uint32)
        public static class CHitboxComponent {
            public const nint m_bvDisabledHitGroups = 0x24; // uint32[1]
        }
        // Parent: C_BaseTrigger
        // Field count: 9
        //
        // Metadata:
        // NetworkVarNames: m_bEnabled (bool)
        // NetworkVarNames: m_MaxWeight (float)
        // NetworkVarNames: m_FadeDuration (float)
        // NetworkVarNames: m_Weight (float)
        // NetworkVarNames: m_lookupFilename (char)
        public static class C_ColorCorrectionVolume {
            public const nint m_LastEnterWeight = 0xD30; // float32
            public const nint m_LastEnterTime = 0xD34; // float32
            public const nint m_LastExitWeight = 0xD38; // float32
            public const nint m_LastExitTime = 0xD3C; // float32
            public const nint m_bEnabled = 0xD40; // bool
            public const nint m_MaxWeight = 0xD44; // float32
            public const nint m_FadeDuration = 0xD48; // float32
            public const nint m_Weight = 0xD4C; // float32
            public const nint m_lookupFilename = 0xD50; // char[512]
        }
        // Parent: C_BaseModelEntity
        // Field count: 0
        public static class C_PrecipitationBlocker {
        }
        // Parent: CBaseAnimGraph
        // Field count: 6
        public static class C_BulletHitModel {
            public const nint m_matLocal = 0xF88; // matrix3x4_t
            public const nint m_iBoneIndex = 0xFB8; // int32
            public const nint m_hPlayerParent = 0xFBC; // CHandle<C_BaseEntity>
            public const nint m_bIsHit = 0xFC0; // bool
            public const nint m_flTimeCreated = 0xFC4; // float32
            public const nint m_vecStartPos = 0xFC8; // Vector
        }
        // Parent: C_BaseEntity
        // Field count: 17
        //
        // Metadata:
        // NetworkVarNames: m_nDraftType (int)
        // NetworkVarNames: m_nTeamWinningCoinToss (int)
        // NetworkVarNames: m_nTeamWithFirstChoice (int)
        // NetworkVarNames: m_nVoteMapIdsList (int)
        // NetworkVarNames: m_nAccountIDs (int)
        // NetworkVarNames: m_nMapId0 (int)
        // NetworkVarNames: m_nMapId1 (int)
        // NetworkVarNames: m_nMapId2 (int)
        // NetworkVarNames: m_nMapId3 (int)
        // NetworkVarNames: m_nMapId4 (int)
        // NetworkVarNames: m_nMapId5 (int)
        // NetworkVarNames: m_nStartingSide0 (int)
        // NetworkVarNames: m_nCurrentPhase (int)
        // NetworkVarNames: m_nPhaseStartTick (int)
        // NetworkVarNames: m_nPhaseDurationTicks (int)
        public static class C_MapVetoPickController {
            public const nint m_nDraftType = 0x578; // int32
            public const nint m_nTeamWinningCoinToss = 0x57C; // int32
            public const nint m_nTeamWithFirstChoice = 0x580; // int32[64]
            public const nint m_nVoteMapIdsList = 0x680; // int32[7]
            public const nint m_nAccountIDs = 0x69C; // int32[64]
            public const nint m_nMapId0 = 0x79C; // int32[64]
            public const nint m_nMapId1 = 0x89C; // int32[64]
            public const nint m_nMapId2 = 0x99C; // int32[64]
            public const nint m_nMapId3 = 0xA9C; // int32[64]
            public const nint m_nMapId4 = 0xB9C; // int32[64]
            public const nint m_nMapId5 = 0xC9C; // int32[64]
            public const nint m_nStartingSide0 = 0xD9C; // int32[64]
            public const nint m_nCurrentPhase = 0xE9C; // int32
            public const nint m_nPhaseStartTick = 0xEA0; // int32
            public const nint m_nPhaseDurationTicks = 0xEA4; // int32
            public const nint m_nPostDataUpdateTick = 0xEA8; // int32
            public const nint m_bDisabledHud = 0xEAC; // bool
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MGapTypeQueriesForScopeSingleton
        public static class CSharedGapTypeQueryRegistration {
        }
        // Parent: C_BarnLight
        // Field count: 3
        //
        // Metadata:
        // NetworkVarNames: m_flInnerAngle (float)
        // NetworkVarNames: m_flOuterAngle (float)
        // NetworkVarNames: m_bShowLight (bool)
        public static class C_OmniLight {
            public const nint m_flInnerAngle = 0x1070; // float32
            public const nint m_flOuterAngle = 0x1074; // float32
            public const nint m_bShowLight = 0x1078; // bool
        }
        // Parent: C_Inferno
        // Field count: 0
        public static class C_FireCrackerBlast {
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponMP9 {
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_weaponPurchases (WeaponPurchaseCount_t)
        public static class WeaponPurchaseTracker_t {
            public const nint m_weaponPurchases = 0x8; // C_UtlVectorEmbeddedNetworkVar<WeaponPurchaseCount_t>
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // NetworkVarNames: m_nMatchSeed (int)
        // NetworkVarNames: m_bBlockersPresent (bool)
        // NetworkVarNames: m_bRoundInProgress (bool)
        // NetworkVarNames: m_iFirstSecondHalfRound (int)
        // NetworkVarNames: m_iBombSite (int)
        public static class C_RetakeGameRules {
            public const nint m_nMatchSeed = 0xF8; // int32
            public const nint m_bBlockersPresent = 0xFC; // bool
            public const nint m_bRoundInProgress = 0xFD; // bool
            public const nint m_iFirstSecondHalfRound = 0x100; // int32
            public const nint m_iBombSite = 0x104; // int32
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // NetworkVarNames: m_duration (float32)
        // NetworkVarNames: m_timestamp (float32)
        // NetworkVarNames: m_timescale (float32)
        public static class EngineCountdownTimer {
            public const nint m_duration = 0x8; // float32
            public const nint m_timestamp = 0xC; // float32
            public const nint m_timescale = 0x10; // float32
        }
        // Parent: CPlayerPawnComponent
        // Field count: 0
        public static class CCSPlayer_GlowServices {
        }
        // Parent: None
        // Field count: 5
        public static class C_BaseFlex__Emphasized_Phoneme {
            public const nint m_sClassName = 0x0; // CUtlString
            public const nint m_flAmount = 0x18; // float32
            public const nint m_bRequired = 0x1C; // bool
            public const nint m_bBasechecked = 0x1D; // bool
            public const nint m_bValid = 0x1E; // bool
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_timestamp (GameTime_t)
        // NetworkVarNames: m_nWorldGroupId (WorldGroupId_t)
        public static class IntervalTimer {
            public const nint m_timestamp = 0x8; // GameTime_t
            public const nint m_nWorldGroupId = 0xC; // WorldGroupId_t
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponSSG08 {
        }
        // Parent: C_BaseModelEntity
        // Field count: 9
        //
        // Metadata:
        // NetworkVarNames: m_vecLadderDir (Vector)
        // NetworkVarNames: m_vecPlayerMountPositionTop (Vector)
        // NetworkVarNames: m_vecPlayerMountPositionBottom (Vector)
        // NetworkVarNames: m_flAutoRideSpeed (float)
        // NetworkVarNames: m_bFakeLadder (bool)
        public static class C_FuncLadder {
            public const nint m_vecLadderDir = 0xD28; // Vector
            public const nint m_Dismounts = 0xD38; // CUtlVector<CHandle<C_InfoLadderDismount>>
            public const nint m_vecLocalTop = 0xD50; // Vector
            public const nint m_vecPlayerMountPositionTop = 0xD5C; // Vector
            public const nint m_vecPlayerMountPositionBottom = 0xD68; // Vector
            public const nint m_flAutoRideSpeed = 0xD74; // float32
            public const nint m_bDisabled = 0xD78; // bool
            public const nint m_bFakeLadder = 0xD79; // bool
            public const nint m_bHasSlack = 0xD7A; // bool
        }
        // Parent: C_SoundOpvarSetAABBEntity
        // Field count: 0
        public static class C_SoundOpvarSetOBBEntity {
        }
        // Parent: CPlayerPawnComponent
        // Field count: 4
        //
        // Metadata:
        // NetworkVarNames: m_hMyWeapons (CHandle<C_BasePlayerWeapon>)
        // NetworkVarNames: m_hActiveWeapon (CHandle<CBasePlayerWeapon>)
        // NetworkVarNames: m_hLastWeapon (CHandle<CBasePlayerWeapon>)
        // NetworkVarNames: m_iAmmo (uint16)
        public static class CPlayer_WeaponServices {
            public const nint m_hMyWeapons = 0x40; // C_NetworkUtlVectorBase<CHandle<C_BasePlayerWeapon>>
            public const nint m_hActiveWeapon = 0x58; // CHandle<C_BasePlayerWeapon>
            public const nint m_hLastWeapon = 0x5C; // CHandle<C_BasePlayerWeapon>
            public const nint m_iAmmo = 0x60; // uint16[32]
        }
        // Parent: None
        // Field count: 3
        public static class CAttributeManager__cached_attribute_float_t {
            public const nint flIn = 0x0; // float32
            public const nint iAttribHook = 0x8; // CUtlSymbolLarge
            public const nint flOut = 0x10; // float32
        }
        // Parent: C_BaseFlex
        // Field count: 12
        //
        // Metadata:
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByUserGroup
        // MNetworkExcludeByName
        // MNetworkExcludeByUserGroup
        // MNetworkExcludeByName
        // MNetworkExcludeByUserGroup
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // NetworkVarNames: m_bIsLive (bool)
        // NetworkVarNames: m_DmgRadius (float32)
        // NetworkVarNames: m_flDetonateTime (GameTime_t)
        // NetworkVarNames: m_flDamage (float32)
        // NetworkVarNames: m_hThrower (CHandle<CCSPlayerPawn>)
        public static class C_BaseGrenade {
            public const nint m_bHasWarnedAI = 0x1120; // bool
            public const nint m_bIsSmokeGrenade = 0x1121; // bool
            public const nint m_bIsLive = 0x1122; // bool
            public const nint m_DmgRadius = 0x1124; // float32
            public const nint m_flDetonateTime = 0x1128; // GameTime_t
            public const nint m_flWarnAITime = 0x112C; // float32
            public const nint m_flDamage = 0x1130; // float32
            public const nint m_iszBounceSound = 0x1138; // CUtlSymbolLarge
            public const nint m_ExplosionSound = 0x1140; // CUtlString
            public const nint m_hThrower = 0x114C; // CHandle<C_CSPlayerPawn>
            public const nint m_flNextAttack = 0x1164; // GameTime_t
            public const nint m_hOriginalThrower = 0x1168; // CHandle<C_CSPlayerPawn>
        }
        // Parent: None
        // Field count: 1
        public static class CCSGameModeRules {
            public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
        }
        // Parent: None
        // Field count: 8
        //
        // Metadata:
        // NetworkVarNames: m_nInteractsAs (uint64)
        // NetworkVarNames: m_nInteractsWith (uint64)
        // NetworkVarNames: m_nInteractsExclude (uint64)
        // NetworkVarNames: m_nEntityId (uint32)
        // NetworkVarNames: m_nOwnerId (uint32)
        // NetworkVarNames: m_nHierarchyId (uint16)
        // NetworkVarNames: m_nCollisionGroup (uint8)
        // NetworkVarNames: m_nCollisionFunctionMask (uint8)
        public static class VPhysicsCollisionAttribute_t {
            public const nint m_nInteractsAs = 0x8; // uint64
            public const nint m_nInteractsWith = 0x10; // uint64
            public const nint m_nInteractsExclude = 0x18; // uint64
            public const nint m_nEntityId = 0x20; // uint32
            public const nint m_nOwnerId = 0x24; // uint32
            public const nint m_nHierarchyId = 0x28; // uint16
            public const nint m_nCollisionGroup = 0x2A; // uint8
            public const nint m_nCollisionFunctionMask = 0x2B; // uint8
        }
        // Parent: C_BaseEntity
        // Field count: 34
        //
        // Metadata:
        // NetworkVarNames: m_flScattering (float)
        // NetworkVarNames: m_flAnisotropy (float)
        // NetworkVarNames: m_flFadeSpeed (float)
        // NetworkVarNames: m_flDrawDistance (float)
        // NetworkVarNames: m_flFadeInStart (float)
        // NetworkVarNames: m_flFadeInEnd (float)
        // NetworkVarNames: m_flIndirectStrength (float)
        // NetworkVarNames: m_nVolumeDepth (int)
        // NetworkVarNames: m_fFirstVolumeSliceThickness (float)
        // NetworkVarNames: m_nIndirectTextureDimX (int)
        // NetworkVarNames: m_nIndirectTextureDimY (int)
        // NetworkVarNames: m_nIndirectTextureDimZ (int)
        // NetworkVarNames: m_vBoxMins (Vector)
        // NetworkVarNames: m_vBoxMaxs (Vector)
        // NetworkVarNames: m_bActive (bool)
        // NetworkVarNames: m_flStartAnisoTime (GameTime_t)
        // NetworkVarNames: m_flStartScatterTime (GameTime_t)
        // NetworkVarNames: m_flStartDrawDistanceTime (GameTime_t)
        // NetworkVarNames: m_flStartAnisotropy (float)
        // NetworkVarNames: m_flStartScattering (float)
        // NetworkVarNames: m_flStartDrawDistance (float)
        // NetworkVarNames: m_flDefaultAnisotropy (float)
        // NetworkVarNames: m_flDefaultScattering (float)
        // NetworkVarNames: m_flDefaultDrawDistance (float)
        // NetworkVarNames: m_bStartDisabled (bool)
        // NetworkVarNames: m_bEnableIndirect (bool)
        // NetworkVarNames: m_bIndirectUseLPVs (bool)
        // NetworkVarNames: m_bIsMaster (bool)
        // NetworkVarNames: m_hFogIndirectTexture (HRenderTextureStrong)
        // NetworkVarNames: m_nForceRefreshCount (int)
        // NetworkVarNames: m_fNoiseSpeed (float)
        // NetworkVarNames: m_fNoiseStrength (float)
        // NetworkVarNames: m_vNoiseScale (Vector)
        public static class C_EnvVolumetricFogController {
            public const nint m_flScattering = 0x568; // float32
            public const nint m_flAnisotropy = 0x56C; // float32
            public const nint m_flFadeSpeed = 0x570; // float32
            public const nint m_flDrawDistance = 0x574; // float32
            public const nint m_flFadeInStart = 0x578; // float32
            public const nint m_flFadeInEnd = 0x57C; // float32
            public const nint m_flIndirectStrength = 0x580; // float32
            public const nint m_nVolumeDepth = 0x584; // int32
            public const nint m_fFirstVolumeSliceThickness = 0x588; // float32
            public const nint m_nIndirectTextureDimX = 0x58C; // int32
            public const nint m_nIndirectTextureDimY = 0x590; // int32
            public const nint m_nIndirectTextureDimZ = 0x594; // int32
            public const nint m_vBoxMins = 0x598; // Vector
            public const nint m_vBoxMaxs = 0x5A4; // Vector
            public const nint m_bActive = 0x5B0; // bool
            public const nint m_flStartAnisoTime = 0x5B4; // GameTime_t
            public const nint m_flStartScatterTime = 0x5B8; // GameTime_t
            public const nint m_flStartDrawDistanceTime = 0x5BC; // GameTime_t
            public const nint m_flStartAnisotropy = 0x5C0; // float32
            public const nint m_flStartScattering = 0x5C4; // float32
            public const nint m_flStartDrawDistance = 0x5C8; // float32
            public const nint m_flDefaultAnisotropy = 0x5CC; // float32
            public const nint m_flDefaultScattering = 0x5D0; // float32
            public const nint m_flDefaultDrawDistance = 0x5D4; // float32
            public const nint m_bStartDisabled = 0x5D8; // bool
            public const nint m_bEnableIndirect = 0x5D9; // bool
            public const nint m_bIndirectUseLPVs = 0x5DA; // bool
            public const nint m_bIsMaster = 0x5DB; // bool
            public const nint m_hFogIndirectTexture = 0x5E0; // 
            public const nint m_nForceRefreshCount = 0x5E8; // int32
            public const nint m_fNoiseSpeed = 0x5EC; // float32
            public const nint m_fNoiseStrength = 0x5F0; // float32
            public const nint m_vNoiseScale = 0x5F4; // Vector
            public const nint m_bFirstTime = 0x600; // bool
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponTec9 {
        }
        // Parent: CBaseAnimGraph
        // Field count: 13
        //
        // Metadata:
        // NetworkVarNames: m_bActive (bool)
        // NetworkVarNames: m_flStartTime (GameTime_t)
        // NetworkVarNames: m_flStartTimeInCommentary (float32)
        // NetworkVarNames: m_iszCommentaryFile (string_t)
        // NetworkVarNames: m_iszTitle (string_t)
        // NetworkVarNames: m_iszSpeakers (string_t)
        // NetworkVarNames: m_iNodeNumber (int)
        // NetworkVarNames: m_iNodeNumberMax (int)
        // NetworkVarNames: m_bListenedTo (bool)
        // NetworkVarNames: m_hViewPosition (CHandle<C_BaseEntity>)
        public static class C_PointCommentaryNode {
            public const nint m_bActive = 0xF90; // bool
            public const nint m_bWasActive = 0xF91; // bool
            public const nint m_flEndTime = 0xF94; // GameTime_t
            public const nint m_flStartTime = 0xF98; // GameTime_t
            public const nint m_flStartTimeInCommentary = 0xF9C; // float32
            public const nint m_iszCommentaryFile = 0xFA0; // CUtlSymbolLarge
            public const nint m_iszTitle = 0xFA8; // CUtlSymbolLarge
            public const nint m_iszSpeakers = 0xFB0; // CUtlSymbolLarge
            public const nint m_iNodeNumber = 0xFB8; // int32
            public const nint m_iNodeNumberMax = 0xFBC; // int32
            public const nint m_bListenedTo = 0xFC0; // bool
            public const nint m_hViewPosition = 0xFD0; // CHandle<C_BaseEntity>
            public const nint m_bRestartAfterRestore = 0xFD4; // bool
        }
        // Parent: CCSPlayerBase_CameraServices
        // Field count: 0
        public static class CCSObserver_CameraServices {
        }
        // Parent: CCSPointScriptEntity
        // Field count: 0
        public static class CCSClientPointScriptEntity {
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // NetworkVarNames: localSound (Vector)
        // NetworkVarNames: soundscapeIndex (int32)
        // NetworkVarNames: localBits (uint8)
        // NetworkVarNames: soundscapeEntityListIndex (int)
        // NetworkVarNames: soundEventHash (uint32)
        public static class audioparams_t {
            public const nint localSound = 0x8; // Vector[8]
            public const nint soundscapeIndex = 0x68; // int32
            public const nint localBits = 0x6C; // uint8
            public const nint soundscapeEntityListIndex = 0x70; // int32
            public const nint soundEventHash = 0x74; // uint32
        }
        // Parent: CBaseAnimGraph
        // Field count: 0
        public static class C_CS2WeaponModuleBase {
        }
        // Parent: C_BaseEntity
        // Field count: 3
        //
        // Metadata:
        // NetworkVarNames: m_nMode (int)
        // NetworkVarNames: m_vBoxSize (Vector)
        // NetworkVarNames: m_bEnabled (bool)
        public static class C_InfoVisibilityBox {
            public const nint m_nMode = 0x56C; // int32
            public const nint m_vBoxSize = 0x570; // Vector
            public const nint m_bEnabled = 0x57C; // bool
        }
        // Parent: C_Sprite
        // Field count: 2
        public static class C_FireSprite {
            public const nint m_vecMoveDir = 0xE38; // Vector
            public const nint m_bFadeFromAbove = 0xE44; // bool
        }
        // Parent: C_CSGO_TeamIntroCharacterPosition
        // Field count: 0
        public static class C_CSGO_TeamIntroTerroristPosition {
        }
        // Parent: C_BaseTrigger
        // Field count: 8
        public static class C_Precipitation {
            public const nint m_flDensity = 0xD30; // float32
            public const nint m_flParticleInnerDist = 0xD40; // float32
            public const nint m_pParticleDef = 0xD48; // char*
            public const nint m_tParticlePrecipTraceTimer = 0xD70; // TimedEvent[1]
            public const nint m_bActiveParticlePrecipEmitter = 0xD78; // bool[1]
            public const nint m_bParticlePrecipInitialized = 0xD79; // bool
            public const nint m_bHasSimulatedSinceLastSceneObjectUpdate = 0xD7A; // bool
            public const nint m_nAvailableSheetSequencesMaxIndex = 0xD7C; // int32
        }
        // Parent: CEntitySubclassVDataBase
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPrecipitationVData {
            public const nint m_szParticlePrecipitationEffect = 0x28; // 
            public const nint m_flInnerDistance = 0x108; // float32
            public const nint m_nAttachType = 0x10C; // 
            public const nint m_bBatchSameVolumeType = 0x110; // bool
            public const nint m_nRTEnvCP = 0x114; // int32
            public const nint m_nRTEnvCPComponent = 0x118; // int32
            public const nint m_szModifier = 0x120; // CUtlString
        }
        // Parent: None
        // Field count: 6
        public static class CBuoyancyHelper {
            public const nint m_nFluidType = 0x18; // CUtlStringToken
            public const nint m_flFluidDensity = 0x1C; // float32
            public const nint m_vecFractionOfWheelSubmergedForWheelFriction = 0x20; // CUtlVector<float32>
            public const nint m_vecWheelFrictionScales = 0x38; // CUtlVector<float32>
            public const nint m_vecFractionOfWheelSubmergedForWheelDrag = 0x50; // CUtlVector<float32>
            public const nint m_vecWheelDrag = 0x68; // CUtlVector<float32>
        }
        // Parent: C_BaseModelEntity
        // Field count: 4
        //
        // Metadata:
        // NetworkVarNames: m_bEnabled (bool)
        // NetworkVarNames: m_DialogXMLName (string_t)
        // NetworkVarNames: m_PanelClassName (string_t)
        // NetworkVarNames: m_PanelID (string_t)
        public static class C_BaseClientUIEntity {
            public const nint m_bEnabled = 0xD30; // bool
            public const nint m_DialogXMLName = 0xD38; // CUtlSymbolLarge
            public const nint m_PanelClassName = 0xD40; // CUtlSymbolLarge
            public const nint m_PanelID = 0xD48; // CUtlSymbolLarge
        }
        // Parent: C_BaseModelEntity
        // Field count: 3
        public static class C_FuncTrackTrain {
            public const nint m_nLongAxis = 0xD28; // int32
            public const nint m_flRadius = 0xD2C; // float32
            public const nint m_flLineLength = 0xD30; // float32
        }
        // Parent: CPlayerPawnComponent
        // Field count: 4
        //
        // Metadata:
        // NetworkVarNames: m_bIsRescuing (bool)
        // NetworkVarNames: m_weaponPurchasesThisMatch (WeaponPurchaseTracker_t)
        // NetworkVarNames: m_weaponPurchasesThisRound (WeaponPurchaseTracker_t)
        public static class CCSPlayer_ActionTrackingServices {
            public const nint m_hLastWeaponBeforeC4AutoSwitch = 0x40; // CHandle<C_BasePlayerWeapon>
            public const nint m_bIsRescuing = 0x44; // bool
            public const nint m_weaponPurchasesThisMatch = 0x48; // WeaponPurchaseTracker_t
            public const nint m_weaponPurchasesThisRound = 0xA0; // WeaponPurchaseTracker_t
        }
        // Parent: None
        // Field count: 13
        //
        // Metadata:
        // NetworkVarNames: m_nModelID (int32)
        // NetworkVarNames: m_hMaterialBase (HMaterialStrong)
        // NetworkVarNames: m_hMaterialDamageOverlay (HMaterialStrong)
        // NetworkVarNames: m_solid (ShardSolid_t)
        // NetworkVarNames: m_vecPanelSize (Vector2D)
        // NetworkVarNames: m_vecStressPositionA (Vector2D)
        // NetworkVarNames: m_vecStressPositionB (Vector2D)
        // NetworkVarNames: m_vecPanelVertices (Vector2D)
        // NetworkVarNames: m_vInitialPanelVertices (Vector4D)
        // NetworkVarNames: m_flGlassHalfThickness (float)
        // NetworkVarNames: m_bHasParent (bool)
        // NetworkVarNames: m_bParentFrozen (bool)
        // NetworkVarNames: m_SurfacePropStringToken (CUtlStringToken)
        public static class shard_model_desc_t {
            public const nint m_nModelID = 0x8; // int32
            public const nint m_hMaterialBase = 0x10; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_hMaterialDamageOverlay = 0x18; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_solid = 0x20; // ShardSolid_t
            public const nint m_vecPanelSize = 0x24; // Vector2D
            public const nint m_vecStressPositionA = 0x2C; // Vector2D
            public const nint m_vecStressPositionB = 0x34; // Vector2D
            public const nint m_vecPanelVertices = 0x40; // C_NetworkUtlVectorBase<Vector2D>
            public const nint m_vInitialPanelVertices = 0x58; // C_NetworkUtlVectorBase<Vector4D>
            public const nint m_flGlassHalfThickness = 0x70; // float32
            public const nint m_bHasParent = 0x74; // bool
            public const nint m_bParentFrozen = 0x75; // bool
            public const nint m_SurfacePropStringToken = 0x78; // CUtlStringToken
        }
        // Parent: None
        // Field count: 1
        public static class C_SceneEntity__QueuedEvents_t {
            public const nint starttime = 0x0; // float32
        }
        // Parent: CBaseAnimGraph
        // Field count: 4
        public static class CBaseProp {
            public const nint m_bModelOverrodeBlockLOS = 0xF88; // bool
            public const nint m_iShapeType = 0xF8C; // int32
            public const nint m_bConformToCollisionBounds = 0xF90; // bool
            public const nint m_mPreferredCatchTransform = 0xF94; // matrix3x4_t
        }
        // Parent: C_CSGO_PreviewPlayer
        // Field count: 0
        public static class C_CSGO_PreviewPlayerAlias_csgo_player_previewmodel {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class CCSPointScriptExtensions_observer {
        }
        // Parent: CLogicalEntity
        // Field count: 12
        public static class CPointTemplate {
            public const nint m_iszWorldName = 0x568; // CUtlSymbolLarge
            public const nint m_iszSource2EntityLumpName = 0x570; // CUtlSymbolLarge
            public const nint m_iszEntityFilterName = 0x578; // CUtlSymbolLarge
            public const nint m_flTimeoutInterval = 0x580; // float32
            public const nint m_bAsynchronouslySpawnEntities = 0x584; // bool
            public const nint m_pOutputOnSpawned = 0x588; // CEntityIOOutput
            public const nint m_clientOnlyEntityBehavior = 0x5B0; // PointTemplateClientOnlyEntityBehavior_t
            public const nint m_ownerSpawnGroupType = 0x5B4; // PointTemplateOwnerSpawnGroupType_t
            public const nint m_createdSpawnGroupHandles = 0x5B8; // CUtlVector<uint32>
            public const nint m_SpawnedEntityHandles = 0x5D0; // CUtlVector<CEntityHandle>
            public const nint m_ScriptSpawnCallback = 0x5E8; // HSCRIPT
            public const nint m_ScriptCallbackScope = 0x5F0; // HSCRIPT
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponHKP2000 {
        }
        // Parent: C_BaseCSGrenade
        // Field count: 0
        public static class CTripWireFire {
        }
        // Parent: C_BaseFlex
        // Field count: 6
        public static class C_CSGO_PreviewModel {
            public const nint m_animgraph = 0x1120; // CUtlString
            public const nint m_animgraphCharacterModeString = 0x1128; // CGlobalSymbol
            public const nint m_defaultAnim = 0x1130; // CUtlString
            public const nint m_nDefaultAnimLoopMode = 0x1138; // AnimLoopMode_t
            public const nint m_flInitialModelScale = 0x113C; // float32
            public const nint m_sInitialWeaponState = 0x1140; // CUtlString
        }
        // Parent: C_PointEntity
        // Field count: 5
        public static class CInfoDynamicShadowHint {
            public const nint m_bDisabled = 0x568; // bool
            public const nint m_flRange = 0x56C; // float32
            public const nint m_nImportance = 0x570; // int32
            public const nint m_nLightChoice = 0x574; // int32
            public const nint m_hLight = 0x578; // CHandle<C_BaseEntity>
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class CTakeDamageInfoAPI {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class C_BaseEntityAPI {
        }
        // Parent: C_CSWeaponBase
        // Field count: 0
        public static class C_WeaponXM1014 {
        }
        // Parent: C_ParticleSystem
        // Field count: 0
        public static class C_MapPreviewParticleSystem {
        }
        // Parent: None
        // Field count: 11
        //
        // Metadata:
        // NetworkVarNames: m_iGlowType (int32)
        // NetworkVarNames: m_iGlowTeam (int32)
        // NetworkVarNames: m_nGlowRange (int32)
        // NetworkVarNames: m_nGlowRangeMin (int32)
        // NetworkVarNames: m_glowColorOverride (Color)
        // NetworkVarNames: m_bFlashing (bool)
        // NetworkVarNames: m_flGlowTime (float)
        // NetworkVarNames: m_flGlowStartTime (float)
        // NetworkVarNames: m_bEligibleForScreenHighlight (bool)
        public static class CGlowProperty {
            public const nint m_fGlowColor = 0x8; // Vector
            public const nint m_iGlowType = 0x30; // int32
            public const nint m_iGlowTeam = 0x34; // int32
            public const nint m_nGlowRange = 0x38; // int32
            public const nint m_nGlowRangeMin = 0x3C; // int32
            public const nint m_glowColorOverride = 0x40; // Color
            public const nint m_bFlashing = 0x44; // bool
            public const nint m_flGlowTime = 0x48; // float32
            public const nint m_flGlowStartTime = 0x4C; // float32
            public const nint m_bEligibleForScreenHighlight = 0x50; // bool
            public const nint m_bGlowing = 0x51; // bool
        }
        // Parent: C_BaseTrigger
        // Field count: 13
        //
        // Metadata:
        // NetworkVarNames: m_gravityScale (float)
        // NetworkVarNames: m_linearLimit (float)
        // NetworkVarNames: m_linearDamping (float)
        // NetworkVarNames: m_angularLimit (float)
        // NetworkVarNames: m_angularDamping (float)
        // NetworkVarNames: m_linearForce (float)
        // NetworkVarNames: m_flFrequency (float)
        // NetworkVarNames: m_flDampingRatio (float)
        // NetworkVarNames: m_vecLinearForcePointAt (Vector)
        // NetworkVarNames: m_bCollapseToForcePoint (bool)
        // NetworkVarNames: m_vecLinearForcePointAtWorld (Vector)
        // NetworkVarNames: m_vecLinearForceDirection (Vector)
        // NetworkVarNames: m_bConvertToDebrisWhenPossible (bool)
        public static class C_TriggerPhysics {
            public const nint m_gravityScale = 0xD30; // float32
            public const nint m_linearLimit = 0xD34; // float32
            public const nint m_linearDamping = 0xD38; // float32
            public const nint m_angularLimit = 0xD3C; // float32
            public const nint m_angularDamping = 0xD40; // float32
            public const nint m_linearForce = 0xD44; // float32
            public const nint m_flFrequency = 0xD48; // float32
            public const nint m_flDampingRatio = 0xD4C; // float32
            public const nint m_vecLinearForcePointAt = 0xD50; // Vector
            public const nint m_bCollapseToForcePoint = 0xD5C; // bool
            public const nint m_vecLinearForcePointAtWorld = 0xD60; // Vector
            public const nint m_vecLinearForceDirection = 0xD6C; // Vector
            public const nint m_bConvertToDebrisWhenPossible = 0xD78; // bool
        }
        // Parent: CPlayerPawnComponent
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_hCarriedHostage (CHandle<CBaseEntity>)
        // NetworkVarNames: m_hCarriedHostageProp (CHandle<CBaseEntity>)
        public static class CCSPlayer_HostageServices {
            public const nint m_hCarriedHostage = 0x40; // CHandle<C_BaseEntity>
            public const nint m_hCarriedHostageProp = 0x44; // CHandle<C_BaseEntity>
        }
        // Parent: C_CSWeaponBase
        // Field count: 0
        public static class CBreachCharge {
        }
        // Parent: C_LightEntity
        // Field count: 0
        public static class C_LightDirectionalEntity {
        }
        // Parent: C_BaseEntity
        // Field count: 18
        //
        // Metadata:
        // NetworkVarNames: m_Entity_hCubemapTexture (HRenderTextureStrong)
        // NetworkVarNames: m_Entity_bCustomCubemapTexture (bool)
        // NetworkVarNames: m_Entity_flInfluenceRadius (float)
        // NetworkVarNames: m_Entity_vBoxProjectMins (Vector)
        // NetworkVarNames: m_Entity_vBoxProjectMaxs (Vector)
        // NetworkVarNames: m_Entity_bMoveable (bool)
        // NetworkVarNames: m_Entity_nHandshake (int)
        // NetworkVarNames: m_Entity_nEnvCubeMapArrayIndex (int)
        // NetworkVarNames: m_Entity_nPriority (int)
        // NetworkVarNames: m_Entity_flEdgeFadeDist (float)
        // NetworkVarNames: m_Entity_vEdgeFadeDists (Vector)
        // NetworkVarNames: m_Entity_flDiffuseScale (float)
        // NetworkVarNames: m_Entity_bStartDisabled (bool)
        // NetworkVarNames: m_Entity_bDefaultEnvMap (bool)
        // NetworkVarNames: m_Entity_bDefaultSpecEnvMap (bool)
        // NetworkVarNames: m_Entity_bIndoorCubeMap (bool)
        // NetworkVarNames: m_Entity_bCopyDiffuseFromDefaultCubemap (bool)
        // NetworkVarNames: m_Entity_bEnabled (bool)
        public static class C_EnvCubemap {
            public const nint m_Entity_hCubemapTexture = 0x5E8; // 
            public const nint m_Entity_bCustomCubemapTexture = 0x5F0; // bool
            public const nint m_Entity_flInfluenceRadius = 0x5F4; // float32
            public const nint m_Entity_vBoxProjectMins = 0x5F8; // Vector
            public const nint m_Entity_vBoxProjectMaxs = 0x604; // Vector
            public const nint m_Entity_bMoveable = 0x610; // bool
            public const nint m_Entity_nHandshake = 0x614; // int32
            public const nint m_Entity_nEnvCubeMapArrayIndex = 0x618; // int32
            public const nint m_Entity_nPriority = 0x61C; // int32
            public const nint m_Entity_flEdgeFadeDist = 0x620; // float32
            public const nint m_Entity_vEdgeFadeDists = 0x624; // Vector
            public const nint m_Entity_flDiffuseScale = 0x630; // float32
            public const nint m_Entity_bStartDisabled = 0x634; // bool
            public const nint m_Entity_bDefaultEnvMap = 0x635; // bool
            public const nint m_Entity_bDefaultSpecEnvMap = 0x636; // bool
            public const nint m_Entity_bIndoorCubeMap = 0x637; // bool
            public const nint m_Entity_bCopyDiffuseFromDefaultCubemap = 0x638; // bool
            public const nint m_Entity_bEnabled = 0x648; // bool
        }
        // Parent: C_BaseViewModel
        // Field count: 3
        public static class C_PredictedViewModel {
            public const nint m_vPredictedLagOffset = 0xFF0; // Vector
            public const nint m_targetSpeed = 0xFFC; // QAngle
            public const nint m_currentSpeed = 0x1008; // QAngle
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponBizon {
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_AK47 {
        }
        // Parent: C_BaseEntity
        // Field count: 25
        //
        // Metadata:
        // NetworkVarNames: m_bDisabled (bool)
        // NetworkVarNames: m_bUpdateOnClient (bool)
        // NetworkVarNames: m_nInputType (ValueRemapperInputType_t)
        // NetworkVarNames: m_hRemapLineStart (CHandle<CBaseEntity>)
        // NetworkVarNames: m_hRemapLineEnd (CHandle<CBaseEntity>)
        // NetworkVarNames: m_flMaximumChangePerSecond (float)
        // NetworkVarNames: m_flDisengageDistance (float)
        // NetworkVarNames: m_flEngageDistance (float)
        // NetworkVarNames: m_bRequiresUseKey (bool)
        // NetworkVarNames: m_nOutputType (ValueRemapperOutputType_t)
        // NetworkVarNames: m_hOutputEntities (CHandle<C_BaseEntity>)
        // NetworkVarNames: m_nHapticsType (ValueRemapperHapticsType_t)
        // NetworkVarNames: m_nMomentumType (ValueRemapperMomentumType_t)
        // NetworkVarNames: m_flMomentumModifier (float)
        // NetworkVarNames: m_flSnapValue (float)
        // NetworkVarNames: m_nRatchetType (ValueRemapperRatchetType_t)
        // NetworkVarNames: m_flInputOffset (float)
        public static class C_PointValueRemapper {
            public const nint m_bDisabled = 0x568; // bool
            public const nint m_bDisabledOld = 0x569; // bool
            public const nint m_bUpdateOnClient = 0x56A; // bool
            public const nint m_nInputType = 0x56C; // ValueRemapperInputType_t
            public const nint m_hRemapLineStart = 0x570; // CHandle<C_BaseEntity>
            public const nint m_hRemapLineEnd = 0x574; // CHandle<C_BaseEntity>
            public const nint m_flMaximumChangePerSecond = 0x578; // float32
            public const nint m_flDisengageDistance = 0x57C; // float32
            public const nint m_flEngageDistance = 0x580; // float32
            public const nint m_bRequiresUseKey = 0x584; // bool
            public const nint m_nOutputType = 0x588; // ValueRemapperOutputType_t
            public const nint m_hOutputEntities = 0x590; // C_NetworkUtlVectorBase<CHandle<C_BaseEntity>>
            public const nint m_nHapticsType = 0x5A8; // ValueRemapperHapticsType_t
            public const nint m_nMomentumType = 0x5AC; // ValueRemapperMomentumType_t
            public const nint m_flMomentumModifier = 0x5B0; // float32
            public const nint m_flSnapValue = 0x5B4; // float32
            public const nint m_flCurrentMomentum = 0x5B8; // float32
            public const nint m_nRatchetType = 0x5BC; // ValueRemapperRatchetType_t
            public const nint m_flRatchetOffset = 0x5C0; // float32
            public const nint m_flInputOffset = 0x5C4; // float32
            public const nint m_bEngaged = 0x5C8; // bool
            public const nint m_bFirstUpdate = 0x5C9; // bool
            public const nint m_flPreviousValue = 0x5CC; // float32
            public const nint m_flPreviousUpdateTickTime = 0x5D0; // GameTime_t
            public const nint m_vecPreviousTestPoint = 0x5D4; // Vector
        }
        // Parent: C_CSWeaponBase
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_bFirstAttack (bool)
        public static class C_Knife {
            public const nint m_bFirstAttack = 0x1B20; // bool
        }
        // Parent: C_EnvCubemap
        // Field count: 0
        public static class C_EnvCubemapBox {
        }
        // Parent: C_Item
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_OwningPlayer (CHandle<CCSPlayerPawn>)
        // NetworkVarNames: m_KillingPlayer (CHandle<CCSPlayerPawn>)
        public static class C_ItemDogtags {
            public const nint m_OwningPlayer = 0x1768; // CHandle<C_CSPlayerPawn>
            public const nint m_KillingPlayer = 0x176C; // CHandle<C_CSPlayerPawn>
        }
        // Parent: C_CSGO_TeamPreviewCamera
        // Field count: 0
        public static class C_CSGO_EndOfMatchCamera {
        }
        // Parent: C_BaseEntity
        // Field count: 5
        //
        // Metadata:
        // NetworkVarNames: m_iszStackName (string_t)
        // NetworkVarNames: m_iszOperatorName (string_t)
        // NetworkVarNames: m_iszOpvarName (string_t)
        // NetworkVarNames: m_iOpvarIndex (int)
        // NetworkVarNames: m_bUseAutoCompare (bool)
        public static class C_SoundOpvarSetPointBase {
            public const nint m_iszStackName = 0x568; // CUtlSymbolLarge
            public const nint m_iszOperatorName = 0x570; // CUtlSymbolLarge
            public const nint m_iszOpvarName = 0x578; // CUtlSymbolLarge
            public const nint m_iOpvarIndex = 0x580; // int32
            public const nint m_bUseAutoCompare = 0x584; // bool
        }
        // Parent: C_Breakable
        // Field count: 0
        public static class C_PhysBox {
        }
        // Parent: CPlayerPawnComponent
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_vecSellbackPurchaseEntries (SellbackPurchaseEntry_t)
        public static class CCSPlayer_BuyServices {
            public const nint m_vecSellbackPurchaseEntries = 0x40; // C_UtlVectorEmbeddedNetworkVar<SellbackPurchaseEntry_t>
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class CPathSimpleAPI {
        }
        // Parent: C_BaseCSGrenade
        // Field count: 0
        public static class C_SensorGrenade {
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_fFireTime (GameTime_t)
        public static class C_WeaponTaser {
            public const nint m_fFireTime = 0x1B40; // GameTime_t
            public const nint m_nLastAttackTick = 0x1B44; // int32
        }
        // Parent: C_CSWeaponBase
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_bPlayingUninterruptableAct (bool)
        // NetworkVarNames: m_nUninterruptableActivity (PlayerAnimEvent_t)
        public static class C_Fists {
            public const nint m_bPlayingUninterruptableAct = 0x1B20; // bool
            public const nint m_nUninterruptableActivity = 0x1B24; // PlayerAnimEvent_t
        }
        // Parent: C_PhysicsProp
        // Field count: 0
        public static class C_PhysicsPropMultiplayer {
        }
        // Parent: CInfoDynamicShadowHint
        // Field count: 2
        public static class CInfoDynamicShadowHintBox {
            public const nint m_vBoxMins = 0x580; // Vector
            public const nint m_vBoxMaxs = 0x58C; // Vector
        }
        // Parent: C_SoundOpvarSetPointEntity
        // Field count: 0
        public static class C_SoundOpvarSetPathCornerEntity {
        }
        // Parent: C_BaseEntity
        // Field count: 18
        //
        // Metadata:
        // NetworkVarNames: m_flEndDistance (float)
        // NetworkVarNames: m_flStartDistance (float)
        // NetworkVarNames: m_flFogFalloffExponent (float)
        // NetworkVarNames: m_bHeightFogEnabled (bool)
        // NetworkVarNames: m_flFogHeightWidth (float)
        // NetworkVarNames: m_flFogHeightEnd (float)
        // NetworkVarNames: m_flFogHeightStart (float)
        // NetworkVarNames: m_flFogHeightExponent (float)
        // NetworkVarNames: m_flLODBias (float)
        // NetworkVarNames: m_bActive (bool)
        // NetworkVarNames: m_bStartDisabled (bool)
        // NetworkVarNames: m_flFogMaxOpacity (float)
        // NetworkVarNames: m_nCubemapSourceType (int)
        // NetworkVarNames: m_hSkyMaterial (HMaterialStrong)
        // NetworkVarNames: m_iszSkyEntity (string_t)
        // NetworkVarNames: m_hFogCubemapTexture (HRenderTextureStrong)
        // NetworkVarNames: m_bHasHeightFogEnd (bool)
        public static class C_EnvCubemapFog {
            public const nint m_flEndDistance = 0x568; // float32
            public const nint m_flStartDistance = 0x56C; // float32
            public const nint m_flFogFalloffExponent = 0x570; // float32
            public const nint m_bHeightFogEnabled = 0x574; // bool
            public const nint m_flFogHeightWidth = 0x578; // float32
            public const nint m_flFogHeightEnd = 0x57C; // float32
            public const nint m_flFogHeightStart = 0x580; // float32
            public const nint m_flFogHeightExponent = 0x584; // float32
            public const nint m_flLODBias = 0x588; // float32
            public const nint m_bActive = 0x58C; // bool
            public const nint m_bStartDisabled = 0x58D; // bool
            public const nint m_flFogMaxOpacity = 0x590; // float32
            public const nint m_nCubemapSourceType = 0x594; // int32
            public const nint m_hSkyMaterial = 0x598; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_iszSkyEntity = 0x5A0; // CUtlSymbolLarge
            public const nint m_hFogCubemapTexture = 0x5A8; // 
            public const nint m_bHasHeightFogEnd = 0x5B0; // bool
            public const nint m_bFirstTime = 0x5B1; // bool
        }
        // Parent: C_CSWeaponBase
        // Field count: 0
        public static class C_WeaponSawedoff {
        }
        // Parent: None
        // Field count: 17
        //
        // Metadata:
        // NetworkVarNames: m_collisionAttribute (VPhysicsCollisionAttribute_t)
        // NetworkVarNames: m_vecMins (Vector)
        // NetworkVarNames: m_vecMaxs (Vector)
        // NetworkVarNames: m_usSolidFlags (uint8)
        // NetworkVarNames: m_nSolidType (SolidType_t)
        // NetworkVarNames: m_triggerBloat (uint8)
        // NetworkVarNames: m_nSurroundType (SurroundingBoundsType_t)
        // NetworkVarNames: m_CollisionGroup (uint8)
        // NetworkVarNames: m_nEnablePhysics (uint8)
        // NetworkVarNames: m_vecSpecifiedSurroundingMins (Vector)
        // NetworkVarNames: m_vecSpecifiedSurroundingMaxs (Vector)
        // NetworkVarNames: m_vCapsuleCenter1 (Vector)
        // NetworkVarNames: m_vCapsuleCenter2 (Vector)
        // NetworkVarNames: m_flCapsuleRadius (float)
        public static class CCollisionProperty {
            public const nint m_collisionAttribute = 0x10; // VPhysicsCollisionAttribute_t
            public const nint m_vecMins = 0x40; // Vector
            public const nint m_vecMaxs = 0x4C; // Vector
            public const nint m_usSolidFlags = 0x5A; // uint8
            public const nint m_nSolidType = 0x5B; // SolidType_t
            public const nint m_triggerBloat = 0x5C; // uint8
            public const nint m_nSurroundType = 0x5D; // SurroundingBoundsType_t
            public const nint m_CollisionGroup = 0x5E; // uint8
            public const nint m_nEnablePhysics = 0x5F; // uint8
            public const nint m_flBoundingRadius = 0x60; // float32
            public const nint m_vecSpecifiedSurroundingMins = 0x64; // Vector
            public const nint m_vecSpecifiedSurroundingMaxs = 0x70; // Vector
            public const nint m_vecSurroundingMaxs = 0x7C; // Vector
            public const nint m_vecSurroundingMins = 0x88; // Vector
            public const nint m_vCapsuleCenter1 = 0x94; // Vector
            public const nint m_vCapsuleCenter2 = 0xA0; // Vector
            public const nint m_flCapsuleRadius = 0xAC; // float32
        }
        // Parent: None
        // Field count: 8
        //
        // Metadata:
        // NetworkVarNames: m_hSequence (HSequence)
        // NetworkVarNames: m_flPrevCycle (float32)
        // NetworkVarNames: m_flCycle (float32)
        public static class CNetworkedSequenceOperation {
            public const nint m_hSequence = 0x8; // HSequence
            public const nint m_flPrevCycle = 0xC; // float32
            public const nint m_flCycle = 0x10; // float32
            public const nint m_flWeight = 0x14; // CNetworkedQuantizedFloat
            public const nint m_bSequenceChangeNetworked = 0x1C; // bool
            public const nint m_bDiscontinuity = 0x1D; // bool
            public const nint m_flPrevCycleFromDiscontinuity = 0x20; // float32
            public const nint m_flPrevCycleForAnimEventDetection = 0x24; // float32
        }
        // Parent: C_ModelPointEntity
        // Field count: 16
        //
        // Metadata:
        // NetworkVarNames: m_nUniqueID (int)
        // NetworkVarNames: m_unAccountID (uint32)
        // NetworkVarNames: m_unTraceID (uint32)
        // NetworkVarNames: m_rtGcTime (uint32)
        // NetworkVarNames: m_vecEndPos (Vector)
        // NetworkVarNames: m_vecStart (Vector)
        // NetworkVarNames: m_vecLeft (Vector)
        // NetworkVarNames: m_vecNormal (Vector)
        // NetworkVarNames: m_nPlayer (int)
        // NetworkVarNames: m_nEntity (int)
        // NetworkVarNames: m_nHitbox (int)
        // NetworkVarNames: m_flCreationTime (float)
        // NetworkVarNames: m_nTintID (int)
        // NetworkVarNames: m_nVersion (uint8)
        // NetworkVarNames: m_ubSignature (uint8)
        public static class C_PlayerSprayDecal {
            public const nint m_nUniqueID = 0xD28; // int32
            public const nint m_unAccountID = 0xD2C; // uint32
            public const nint m_unTraceID = 0xD30; // uint32
            public const nint m_rtGcTime = 0xD34; // uint32
            public const nint m_vecEndPos = 0xD38; // Vector
            public const nint m_vecStart = 0xD44; // Vector
            public const nint m_vecLeft = 0xD50; // Vector
            public const nint m_vecNormal = 0xD5C; // Vector
            public const nint m_nPlayer = 0xD68; // int32
            public const nint m_nEntity = 0xD6C; // int32
            public const nint m_nHitbox = 0xD70; // int32
            public const nint m_flCreationTime = 0xD74; // float32
            public const nint m_nTintID = 0xD78; // int32
            public const nint m_nVersion = 0xD7C; // uint8
            public const nint m_ubSignature = 0xD7D; // uint8[128]
            public const nint m_SprayRenderHelper = 0xE08; // CPlayerSprayDecalRenderHelper
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_ID (CUtlStringToken)
        // NetworkVarNames: m_Values (Vector4D)
        public static class EntityRenderAttribute_t {
            public const nint m_ID = 0x30; // CUtlStringToken
            public const nint m_Values = 0x34; // Vector4D
        }
        // Parent: C_PhysicsProp
        // Field count: 1
        //
        // Metadata:
        // MNetworkExcludeByName
        // NetworkVarNames: m_ShardDesc (shard_model_desc_t)
        public static class C_ShatterGlassShardPhysics {
            public const nint m_ShardDesc = 0x1120; // shard_model_desc_t
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponElite {
        }
        // Parent: C_BaseModelEntity
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_CLightComponent (CLightComponent::Storage_t)
        public static class C_LightEntity {
            public const nint m_CLightComponent = 0xD28; // CLightComponent*
        }
        // Parent: C_BaseEntity
        // Field count: 6
        //
        // Metadata:
        // NetworkVarNames: m_flVisibilityStrength (float)
        // NetworkVarNames: m_flFogDistanceMultiplier (float)
        // NetworkVarNames: m_flFogMaxDensityMultiplier (float)
        // NetworkVarNames: m_flFadeTime (float)
        // NetworkVarNames: m_bStartDisabled (bool)
        // NetworkVarNames: m_bIsEnabled (bool)
        public static class C_PlayerVisibility {
            public const nint m_flVisibilityStrength = 0x568; // float32
            public const nint m_flFogDistanceMultiplier = 0x56C; // float32
            public const nint m_flFogMaxDensityMultiplier = 0x570; // float32
            public const nint m_flFadeTime = 0x574; // float32
            public const nint m_bStartDisabled = 0x578; // bool
            public const nint m_bIsEnabled = 0x579; // bool
        }
        // Parent: None
        // Field count: 25
        //
        // Metadata:
        // NetworkVarNames: dirPrimary (Vector)
        // NetworkVarNames: colorPrimary (Color)
        // NetworkVarNames: colorSecondary (Color)
        // NetworkVarNames: colorPrimaryLerpTo (Color)
        // NetworkVarNames: colorSecondaryLerpTo (Color)
        // NetworkVarNames: start (float32)
        // NetworkVarNames: end (float32)
        // NetworkVarNames: farz (float32)
        // NetworkVarNames: maxdensity (float32)
        // NetworkVarNames: exponent (float32)
        // NetworkVarNames: HDRColorScale (float32)
        // NetworkVarNames: skyboxFogFactor (float32)
        // NetworkVarNames: skyboxFogFactorLerpTo (float32)
        // NetworkVarNames: startLerpTo (float32)
        // NetworkVarNames: endLerpTo (float32)
        // NetworkVarNames: maxdensityLerpTo (float32)
        // NetworkVarNames: lerptime (GameTime_t)
        // NetworkVarNames: duration (float32)
        // NetworkVarNames: blendtobackground (float32)
        // NetworkVarNames: scattering (float32)
        // NetworkVarNames: locallightscale (float32)
        // NetworkVarNames: enable (bool)
        // NetworkVarNames: blend (bool)
        // NetworkVarNames: m_bNoReflectionFog (bool)
        public static class fogparams_t {
            public const nint dirPrimary = 0x8; // Vector
            public const nint colorPrimary = 0x14; // Color
            public const nint colorSecondary = 0x18; // Color
            public const nint colorPrimaryLerpTo = 0x1C; // Color
            public const nint colorSecondaryLerpTo = 0x20; // Color
            public const nint start = 0x24; // float32
            public const nint end = 0x28; // float32
            public const nint farz = 0x2C; // float32
            public const nint maxdensity = 0x30; // float32
            public const nint exponent = 0x34; // float32
            public const nint HDRColorScale = 0x38; // float32
            public const nint skyboxFogFactor = 0x3C; // float32
            public const nint skyboxFogFactorLerpTo = 0x40; // float32
            public const nint startLerpTo = 0x44; // float32
            public const nint endLerpTo = 0x48; // float32
            public const nint maxdensityLerpTo = 0x4C; // float32
            public const nint lerptime = 0x50; // GameTime_t
            public const nint duration = 0x54; // float32
            public const nint blendtobackground = 0x58; // float32
            public const nint scattering = 0x5C; // float32
            public const nint locallightscale = 0x60; // float32
            public const nint enable = 0x64; // bool
            public const nint blend = 0x65; // bool
            public const nint m_bNoReflectionFog = 0x66; // bool
            public const nint m_bPadding = 0x67; // bool
        }
        // Parent: CBaseAnimGraph
        // Field count: 19
        //
        // Metadata:
        // NetworkVarNames: m_flexWeight (float32)
        // NetworkVarNames: m_blinktoggle (bool)
        public static class C_BaseFlex {
            public const nint m_flexWeight = 0xF98; // C_NetworkUtlVectorBase<float32>
            public const nint m_vLookTargetPosition = 0xFB0; // Vector
            public const nint m_blinktoggle = 0xFC8; // bool
            public const nint m_nLastFlexUpdateFrameCount = 0x1028; // int32
            public const nint m_CachedViewTarget = 0x102C; // Vector
            public const nint m_nNextSceneEventId = 0x1038; // SceneEventId_t
            public const nint m_iBlink = 0x103C; // int32
            public const nint m_blinktime = 0x1040; // float32
            public const nint m_prevblinktoggle = 0x1044; // bool
            public const nint m_iJawOpen = 0x1048; // int32
            public const nint m_flJawOpenAmount = 0x104C; // float32
            public const nint m_flBlinkAmount = 0x1050; // float32
            public const nint m_iMouthAttachment = 0x1054; // AttachmentHandle_t
            public const nint m_iEyeAttachment = 0x1055; // AttachmentHandle_t
            public const nint m_bResetFlexWeightsOnModelChange = 0x1056; // bool
            public const nint m_nEyeOcclusionRendererBone = 0x1070; // int32
            public const nint m_mEyeOcclusionRendererCameraToBoneTransform = 0x1074; // matrix3x4_t
            public const nint m_vEyeOcclusionRendererHalfExtent = 0x10A4; // Vector
            public const nint m_PhonemeClasses = 0x10C0; // C_BaseFlex::Emphasized_Phoneme[3]
        }
        // Parent: C_BaseModelEntity
        // Field count: 12
        //
        // Metadata:
        // NetworkVarNames: m_hSkyMaterial (HMaterialStrong)
        // NetworkVarNames: m_hSkyMaterialLightingOnly (HMaterialStrong)
        // NetworkVarNames: m_bStartDisabled (bool)
        // NetworkVarNames: m_vTintColor (Color)
        // NetworkVarNames: m_vTintColorLightingOnly (Color)
        // NetworkVarNames: m_flBrightnessScale (float)
        // NetworkVarNames: m_nFogType (int)
        // NetworkVarNames: m_flFogMinStart (float)
        // NetworkVarNames: m_flFogMinEnd (float)
        // NetworkVarNames: m_flFogMaxStart (float)
        // NetworkVarNames: m_flFogMaxEnd (float)
        // NetworkVarNames: m_bEnabled (bool)
        public static class C_EnvSky {
            public const nint m_hSkyMaterial = 0xD28; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_hSkyMaterialLightingOnly = 0xD30; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_bStartDisabled = 0xD38; // bool
            public const nint m_vTintColor = 0xD39; // Color
            public const nint m_vTintColorLightingOnly = 0xD3D; // Color
            public const nint m_flBrightnessScale = 0xD44; // float32
            public const nint m_nFogType = 0xD48; // int32
            public const nint m_flFogMinStart = 0xD4C; // float32
            public const nint m_flFogMinEnd = 0xD50; // float32
            public const nint m_flFogMaxStart = 0xD54; // float32
            public const nint m_flFogMaxEnd = 0xD58; // float32
            public const nint m_bEnabled = 0xD5C; // bool
        }
        // Parent: C_PointEntity
        // Field count: 0
        public static class CInfoTarget {
        }
        // Parent: C_CSGO_TeamIntroCharacterPosition
        // Field count: 0
        public static class C_CSGO_TeamIntroCounterTerroristPosition {
        }
        // Parent: C_BreakableProp
        // Field count: 23
        //
        // Metadata:
        // NetworkVarNames: m_bUseHitboxesForRenderBox (bool)
        // NetworkVarNames: m_bUseAnimGraph (bool)
        public static class C_DynamicProp {
            public const nint m_bUseHitboxesForRenderBox = 0x1110; // bool
            public const nint m_bUseAnimGraph = 0x1111; // bool
            public const nint m_pOutputAnimBegun = 0x1118; // CEntityIOOutput
            public const nint m_pOutputAnimOver = 0x1140; // CEntityIOOutput
            public const nint m_pOutputAnimLoopCycleOver = 0x1168; // CEntityIOOutput
            public const nint m_OnAnimReachedStart = 0x1190; // CEntityIOOutput
            public const nint m_OnAnimReachedEnd = 0x11B8; // CEntityIOOutput
            public const nint m_iszIdleAnim = 0x11E0; // CUtlSymbolLarge
            public const nint m_nIdleAnimLoopMode = 0x11E8; // AnimLoopMode_t
            public const nint m_bRandomizeCycle = 0x11EC; // bool
            public const nint m_bStartDisabled = 0x11ED; // bool
            public const nint m_bFiredStartEndOutput = 0x11EE; // bool
            public const nint m_bForceNpcExclude = 0x11EF; // bool
            public const nint m_bCreateNonSolid = 0x11F0; // bool
            public const nint m_bIsOverrideProp = 0x11F1; // bool
            public const nint m_iInitialGlowState = 0x11F4; // int32
            public const nint m_nGlowRange = 0x11F8; // int32
            public const nint m_nGlowRangeMin = 0x11FC; // int32
            public const nint m_glowColor = 0x1200; // Color
            public const nint m_nGlowTeam = 0x1204; // int32
            public const nint m_iCachedFrameCount = 0x1208; // int32
            public const nint m_vecCachedRenderMins = 0x120C; // Vector
            public const nint m_vecCachedRenderMaxs = 0x1218; // Vector
        }
        // Parent: CEntityComponent
        // Field count: 10
        public static class CPropDataComponent {
            public const nint m_flDmgModBullet = 0x10; // float32
            public const nint m_flDmgModClub = 0x14; // float32
            public const nint m_flDmgModExplosive = 0x18; // float32
            public const nint m_flDmgModFire = 0x1C; // float32
            public const nint m_iszPhysicsDamageTableName = 0x20; // CUtlSymbolLarge
            public const nint m_iszBasePropData = 0x28; // CUtlSymbolLarge
            public const nint m_nInteractions = 0x30; // int32
            public const nint m_bSpawnMotionDisabled = 0x34; // bool
            public const nint m_nDisableTakePhysicsDamageSpawnFlag = 0x38; // int32
            public const nint m_nMotionDisabledSpawnFlag = 0x3C; // int32
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponSCAR20 {
        }
        // Parent: C_BaseCSGrenade
        // Field count: 0
        public static class C_DecoyGrenade {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class CCSPointScriptExtensions_player {
        }
        // Parent: C_CS2WeaponModuleBase
        // Field count: 2
        public static class C_KeychainModule {
            public const nint m_nKeychainDefID = 0xF90; // uint32
            public const nint m_nKeychainSeed = 0xF94; // uint32
        }
        // Parent: C_BaseEntity
        // Field count: 8
        //
        // Metadata:
        // NetworkVarNames: m_iszStackName (string_t)
        // NetworkVarNames: m_iszOperatorName (string_t)
        // NetworkVarNames: m_iszOpvarName (string_t)
        // NetworkVarNames: m_vDistanceInnerMins (Vector)
        // NetworkVarNames: m_vDistanceInnerMaxs (Vector)
        // NetworkVarNames: m_vDistanceOuterMins (Vector)
        // NetworkVarNames: m_vDistanceOuterMaxs (Vector)
        // NetworkVarNames: m_nAABBDirection (int)
        public static class CCitadelSoundOpvarSetOBB {
            public const nint m_iszStackName = 0x580; // CUtlSymbolLarge
            public const nint m_iszOperatorName = 0x588; // CUtlSymbolLarge
            public const nint m_iszOpvarName = 0x590; // CUtlSymbolLarge
            public const nint m_vDistanceInnerMins = 0x598; // Vector
            public const nint m_vDistanceInnerMaxs = 0x5A4; // Vector
            public const nint m_vDistanceOuterMins = 0x5B0; // Vector
            public const nint m_vDistanceOuterMaxs = 0x5BC; // Vector
            public const nint m_nAABBDirection = 0x5C8; // int32
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // NetworkVarNames: m_unDefIdx (item_definition_index_t)
        // NetworkVarNames: m_nCost (int)
        // NetworkVarNames: m_nPrevArmor (int)
        // NetworkVarNames: m_bPrevHelmet (bool)
        // NetworkVarNames: m_hItem (CEntityHandle)
        public static class SellbackPurchaseEntry_t {
            public const nint m_unDefIdx = 0x30; // uint16
            public const nint m_nCost = 0x34; // int32
            public const nint m_nPrevArmor = 0x38; // int32
            public const nint m_bPrevHelmet = 0x3C; // bool
            public const nint m_hItem = 0x40; // CEntityHandle
        }
        // Parent: C_GameRules
        // Field count: 0
        public static class C_SingleplayRules {
        }
        // Parent: CBaseAnimGraph
        // Field count: 25
        public static class C_LocalTempEntity {
            public const nint flags = 0xF88; // int32
            public const nint die = 0xF8C; // GameTime_t
            public const nint m_flFrameMax = 0xF90; // float32
            public const nint x = 0xF94; // float32
            public const nint y = 0xF98; // float32
            public const nint fadeSpeed = 0xF9C; // float32
            public const nint bounceFactor = 0xFA0; // float32
            public const nint hitSound = 0xFA4; // int32
            public const nint priority = 0xFA8; // int32
            public const nint tentOffset = 0xFAC; // Vector
            public const nint m_vecTempEntAngVelocity = 0xFB8; // QAngle
            public const nint tempent_renderamt = 0xFC4; // int32
            public const nint m_vecNormal = 0xFC8; // Vector
            public const nint m_flSpriteScale = 0xFD4; // float32
            public const nint m_nFlickerFrame = 0xFD8; // int32
            public const nint m_flFrameRate = 0xFDC; // float32
            public const nint m_flFrame = 0xFE0; // float32
            public const nint m_pszImpactEffect = 0xFE8; // char*
            public const nint m_pszParticleEffect = 0xFF0; // char*
            public const nint m_bParticleCollision = 0xFF8; // bool
            public const nint m_iLastCollisionFrame = 0xFFC; // int32
            public const nint m_vLastCollisionOrigin = 0x1000; // Vector
            public const nint m_vecTempEntVelocity = 0x100C; // Vector
            public const nint m_vecPrevAbsOrigin = 0x1018; // Vector
            public const nint m_vecTempEntAcceleration = 0x1024; // Vector
        }
        // Parent: None
        // Field count: 2
        public static class C_EnvWindShared__WindAveEvent_t {
            public const nint m_flStartWindSpeed = 0x0; // float32
            public const nint m_flAveWindSpeed = 0x4; // float32
        }
        // Parent: C_BaseCSGrenadeProjectile
        // Field count: 1
        //
        // Metadata:
        // NetworkVarNames: m_bIsIncGrenade (bool)
        public static class C_MolotovProjectile {
            public const nint m_bIsIncGrenade = 0x1208; // bool
        }
        // Parent: C_LightDirectionalEntity
        // Field count: 0
        public static class C_LightEnvironmentEntity {
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponUMP45 {
        }
        // Parent: C_PointEntity
        // Field count: 9
        //
        // Metadata:
        // NetworkVarNames: m_bDisabled (bool)
        // NetworkVarNames: m_nResolutionX (int)
        // NetworkVarNames: m_nResolutionY (int)
        // NetworkVarNames: m_szLayoutFileName (string_t)
        // NetworkVarNames: m_RenderAttrName (string_t)
        // NetworkVarNames: m_TargetEntities (CHandle<C_BaseModelEntity>)
        // NetworkVarNames: m_nTargetChangeCount (int)
        // NetworkVarNames: m_vecCSSClasses (string_t)
        public static class CInfoOffscreenPanoramaTexture {
            public const nint m_bDisabled = 0x568; // bool
            public const nint m_nResolutionX = 0x56C; // int32
            public const nint m_nResolutionY = 0x570; // int32
            public const nint m_szLayoutFileName = 0x578; // CUtlSymbolLarge
            public const nint m_RenderAttrName = 0x580; // CUtlSymbolLarge
            public const nint m_TargetEntities = 0x588; // C_NetworkUtlVectorBase<CHandle<C_BaseModelEntity>>
            public const nint m_nTargetChangeCount = 0x5A0; // int32
            public const nint m_vecCSSClasses = 0x5A8; // C_NetworkUtlVectorBase<CUtlSymbolLarge>
            public const nint m_bCheckCSSClasses = 0x720; // bool
        }
        // Parent: C_BaseModelEntity
        // Field count: 7
        //
        // Metadata:
        // NetworkVarNames: m_Flags (uint8)
        // NetworkVarNames: m_LightStyle (uint8)
        // NetworkVarNames: m_Radius (float32)
        // NetworkVarNames: m_Exponent (int32)
        // NetworkVarNames: m_InnerAngle (float32)
        // NetworkVarNames: m_OuterAngle (float32)
        // NetworkVarNames: m_SpotRadius (float32)
        public static class C_DynamicLight {
            public const nint m_Flags = 0xD28; // uint8
            public const nint m_LightStyle = 0xD29; // uint8
            public const nint m_Radius = 0xD2C; // float32
            public const nint m_Exponent = 0xD30; // int32
            public const nint m_InnerAngle = 0xD34; // float32
            public const nint m_OuterAngle = 0xD38; // float32
            public const nint m_SpotRadius = 0xD3C; // float32
        }
        // Parent: C_BasePlayerWeapon
        // Field count: 73
        //
        // Metadata:
        // MNetworkExcludeByName
        // NetworkVarNames: m_flFireSequenceStartTime (float)
        // NetworkVarNames: m_nFireSequenceStartTimeChange (int)
        // NetworkVarNames: m_ePlayerFireEvent (PlayerAnimEvent_t)
        // NetworkVarNames: m_ePlayerFireEventAttackType (WeaponAttackType_t)
        // NetworkVarNames: m_iState (CSWeaponState_t)
        // NetworkVarNames: m_nViewModelIndex (uint32)
        // NetworkVarNames: m_flTimeWeaponIdle (GameTime_t)
        // NetworkVarNames: m_weaponMode (CSWeaponMode)
        // NetworkVarNames: m_fAccuracyPenalty (float)
        // NetworkVarNames: m_iRecoilIndex (int)
        // NetworkVarNames: m_flRecoilIndex (float)
        // NetworkVarNames: m_bBurstMode (bool)
        // NetworkVarNames: m_nPostponeFireReadyTicks (GameTick_t)
        // NetworkVarNames: m_flPostponeFireReadyFrac (float)
        // NetworkVarNames: m_bInReload (bool)
        // NetworkVarNames: m_bReloadVisuallyComplete (bool)
        // NetworkVarNames: m_flDroppedAtTime (GameTime_t)
        // NetworkVarNames: m_bIsHauledBack (bool)
        // NetworkVarNames: m_bSilencerOn (bool)
        // NetworkVarNames: m_flTimeSilencerSwitchComplete (GameTime_t)
        // NetworkVarNames: m_iOriginalTeamNumber (int)
        // NetworkVarNames: m_iMostRecentTeamNumber (int)
        // NetworkVarNames: m_bDroppedNearBuyZone (bool)
        // NetworkVarNames: m_nextPrevOwnerUseTime (GameTime_t)
        // NetworkVarNames: m_hPrevOwner (CHandle<CCSPlayerPawn>)
        // NetworkVarNames: m_nDropTick (GameTick_t)
        // NetworkVarNames: m_fLastShotTime (GameTime_t)
        // NetworkVarNames: m_iIronSightMode (int)
        // NetworkVarNames: m_iNumEmptyAttacks (int)
        public static class C_CSWeaponBase {
            public const nint m_flFireSequenceStartTime = 0x16DC; // float32
            public const nint m_nFireSequenceStartTimeChange = 0x16E0; // int32
            public const nint m_nFireSequenceStartTimeAck = 0x16E4; // int32
            public const nint m_ePlayerFireEvent = 0x16E8; // PlayerAnimEvent_t
            public const nint m_ePlayerFireEventAttackType = 0x16EC; // WeaponAttackType_t
            public const nint m_seqIdle = 0x16F0; // HSequence
            public const nint m_seqFirePrimary = 0x16F4; // HSequence
            public const nint m_seqFireSecondary = 0x16F8; // HSequence
            public const nint m_thirdPersonFireSequences = 0x1700; // CUtlVector<HSequence>
            public const nint m_hCurrentThirdPersonSequence = 0x1718; // HSequence
            public const nint m_nSilencerBoneIndex = 0x171C; // int32
            public const nint m_thirdPersonSequences = 0x1720; // HSequence[7]
            public const nint m_ClientPreviousWeaponState = 0x1758; // CSWeaponState_t
            public const nint m_iState = 0x175C; // CSWeaponState_t
            public const nint m_flCrosshairDistance = 0x1760; // float32
            public const nint m_iAmmoLastCheck = 0x1764; // int32
            public const nint m_iAlpha = 0x1768; // int32
            public const nint m_iScopeTextureID = 0x176C; // int32
            public const nint m_iCrosshairTextureID = 0x1770; // int32
            public const nint m_flGunAccuracyPositionDeprecated = 0x1774; // float32
            public const nint m_nLastEmptySoundCmdNum = 0x1778; // int32
            public const nint m_nViewModelIndex = 0x177C; // uint32
            public const nint m_bReloadsWithClips = 0x1780; // bool
            public const nint m_flTimeWeaponIdle = 0x1784; // GameTime_t
            public const nint m_bFireOnEmpty = 0x1788; // bool
            public const nint m_OnPlayerPickup = 0x1790; // CEntityIOOutput
            public const nint m_weaponMode = 0x17B8; // CSWeaponMode
            public const nint m_flTurningInaccuracyDelta = 0x17BC; // float32
            public const nint m_vecTurningInaccuracyEyeDirLast = 0x17C0; // Vector
            public const nint m_flTurningInaccuracy = 0x17CC; // float32
            public const nint m_fAccuracyPenalty = 0x17D0; // float32
            public const nint m_flLastAccuracyUpdateTime = 0x17D4; // GameTime_t
            public const nint m_fAccuracySmoothedForZoom = 0x17D8; // float32
            public const nint m_fScopeZoomEndTime = 0x17DC; // GameTime_t
            public const nint m_iRecoilIndex = 0x17E0; // int32
            public const nint m_flRecoilIndex = 0x17E4; // float32
            public const nint m_bBurstMode = 0x17E8; // bool
            public const nint m_flLastBurstModeChangeTime = 0x17EC; // GameTime_t
            public const nint m_nPostponeFireReadyTicks = 0x17F0; // GameTick_t
            public const nint m_flPostponeFireReadyFrac = 0x17F4; // float32
            public const nint m_bInReload = 0x17F8; // bool
            public const nint m_bReloadVisuallyComplete = 0x17F9; // bool
            public const nint m_flDroppedAtTime = 0x17FC; // GameTime_t
            public const nint m_bIsHauledBack = 0x1800; // bool
            public const nint m_bSilencerOn = 0x1801; // bool
            public const nint m_flTimeSilencerSwitchComplete = 0x1804; // GameTime_t
            public const nint m_iOriginalTeamNumber = 0x1808; // int32
            public const nint m_iMostRecentTeamNumber = 0x180C; // int32
            public const nint m_bDroppedNearBuyZone = 0x1810; // bool
            public const nint m_flNextAttackRenderTimeOffset = 0x1814; // float32
            public const nint m_bClearWeaponIdentifyingUGC = 0x18B0; // bool
            public const nint m_bVisualsDataSet = 0x18B1; // bool
            public const nint m_bOldFirstPersonSpectatedState = 0x18B2; // bool
            public const nint m_bUIWeapon = 0x18B3; // bool
            public const nint m_nCustomEconReloadEventId = 0x18B4; // int32
            public const nint m_nextPrevOwnerUseTime = 0x18C0; // GameTime_t
            public const nint m_hPrevOwner = 0x18C4; // CHandle<C_CSPlayerPawn>
            public const nint m_nDropTick = 0x18C8; // GameTick_t
            public const nint m_donated = 0x18EC; // bool
            public const nint m_fLastShotTime = 0x18F0; // GameTime_t
            public const nint m_bWasOwnedByCT = 0x18F4; // bool
            public const nint m_bWasOwnedByTerrorist = 0x18F5; // bool
            public const nint m_gunHeat = 0x18F8; // float32
            public const nint m_smokeAttachments = 0x18FC; // uint32
            public const nint m_lastSmokeTime = 0x1900; // GameTime_t
            public const nint m_flNextClientFireBulletTime = 0x1904; // float32
            public const nint m_flNextClientFireBulletTime_Repredict = 0x1908; // float32
            public const nint m_IronSightController = 0x19E0; // C_IronSightController
            public const nint m_iIronSightMode = 0x1A90; // int32
            public const nint m_flLastLOSTraceFailureTime = 0x1AA0; // GameTime_t
            public const nint m_iNumEmptyAttacks = 0x1AA4; // int32
            public const nint m_flLastMagDropRequestTime = 0x1B00; // GameTime_t
            public const nint m_flWatTickOffset = 0x1B04; // float32
        }
        // Parent: C_BaseModelEntity
        // Field count: 0
        public static class C_TriggerVolume {
        }
        // Parent: C_FuncBrush
        // Field count: 3
        //
        // Metadata:
        // NetworkVarNames: m_EffectName (string_t)
        // NetworkVarNames: m_bState (bool)
        public static class C_FuncElectrifiedVolume {
            public const nint m_nAmbientEffect = 0xD28; // ParticleIndex_t
            public const nint m_EffectName = 0xD30; // CUtlSymbolLarge
            public const nint m_bState = 0xD38; // bool
        }
        // Parent: CPlayer_WeaponServices
        // Field count: 5
        //
        // Metadata:
        // NetworkVarNames: m_flNextAttack (GameTime_t)
        // NetworkVarNames: m_bIsLookingAtWeapon (bool)
        // NetworkVarNames: m_bIsHoldingLookAtWeapon (bool)
        public static class CCSPlayer_WeaponServices {
            public const nint m_flNextAttack = 0xB8; // GameTime_t
            public const nint m_bIsLookingAtWeapon = 0xBC; // bool
            public const nint m_bIsHoldingLookAtWeapon = 0xBD; // bool
            public const nint m_nOldShootPositionHistoryCount = 0xC0; // uint32
            public const nint m_nOldInputHistoryCount = 0x458; // uint32
        }
        // Parent: C_BaseEntity
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_flFadeStartDist (float32)
        // NetworkVarNames: m_flFadeEndDist (float32)
        public static class C_EnvDetailController {
            public const nint m_flFadeStartDist = 0x568; // float32
            public const nint m_flFadeEndDist = 0x56C; // float32
        }
        // Parent: CEntityInstance
        // Field count: 82
        //
        // Metadata:
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByUserGroup
        // MNetworkExcludeByUserGroup
        // MNetworkExcludeByUserGroup
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // NetworkVarNames: m_CBodyComponent (CBodyComponent::Storage_t)
        // NetworkVarNames: m_iMaxHealth (int32)
        // NetworkVarNames: m_iHealth (int32)
        // NetworkVarNames: m_lifeState (uint8)
        // NetworkVarNames: m_bTakesDamage (bool)
        // NetworkVarNames: m_nTakeDamageFlags (TakeDamageFlags_t)
        // NetworkVarNames: m_nPlatformType (EntityPlatformTypes_t)
        // NetworkVarNames: m_ubInterpolationFrame (uint8)
        // NetworkVarNames: m_nSubclassID (EntitySubclassID_t)
        // NetworkVarNames: m_flAnimTime (float32)
        // NetworkVarNames: m_flSimulationTime (float32)
        // NetworkVarNames: m_flCreateTime (GameTime_t)
        // NetworkVarNames: m_flSpeed (float)
        // NetworkVarNames: m_bClientSideRagdoll (bool)
        // NetworkVarNames: m_iTeamNum (uint8)
        // NetworkVarNames: m_spawnflags (uint32)
        // NetworkVarNames: m_nNextThinkTick (GameTick_t)
        // NetworkVarNames: m_fFlags (uint32)
        // NetworkVarNames: m_vecBaseVelocity (Vector)
        // NetworkVarNames: m_hEffectEntity (CHandle<CBaseEntity>)
        // NetworkVarNames: m_hOwnerEntity (CHandle<CBaseEntity>)
        // NetworkVarNames: m_MoveCollide (MoveCollide_t)
        // NetworkVarNames: m_MoveType (MoveType_t)
        // NetworkVarNames: m_flWaterLevel (float32)
        // NetworkVarNames: m_fEffects (uint32)
        // NetworkVarNames: m_hGroundEntity (CHandle<CBaseEntity>)
        // NetworkVarNames: m_nGroundBodyIndex (int)
        // NetworkVarNames: m_flFriction (float32)
        // NetworkVarNames: m_flElasticity (float32)
        // NetworkVarNames: m_flGravityScale (float32)
        // NetworkVarNames: m_flTimeScale (float32)
        // NetworkVarNames: m_bAnimatedEveryTick (bool)
        // NetworkVarNames: m_flNavIgnoreUntilTime (GameTime_t)
        // NetworkVarNames: m_nBloodType (BloodType)
        public static class C_BaseEntity {
            public const nint m_CBodyComponent = 0x38; // CBodyComponent*
            public const nint m_NetworkTransmitComponent = 0x40; // CNetworkTransmitComponent
            public const nint m_nLastThinkTick = 0x320; // GameTick_t
            public const nint m_pGameSceneNode = 0x328; // CGameSceneNode*
            public const nint m_pRenderComponent = 0x330; // CRenderComponent*
            public const nint m_pCollision = 0x338; // CCollisionProperty*
            public const nint m_iMaxHealth = 0x340; // int32
            public const nint m_iHealth = 0x344; // int32
            public const nint m_lifeState = 0x348; // uint8
            public const nint m_bTakesDamage = 0x349; // bool
            public const nint m_nTakeDamageFlags = 0x350; // TakeDamageFlags_t
            public const nint m_nPlatformType = 0x358; // EntityPlatformTypes_t
            public const nint m_ubInterpolationFrame = 0x359; // uint8
            public const nint m_hSceneObjectController = 0x35C; // CHandle<C_BaseEntity>
            public const nint m_nNoInterpolationTick = 0x360; // int32
            public const nint m_nVisibilityNoInterpolationTick = 0x364; // int32
            public const nint m_flProxyRandomValue = 0x368; // float32
            public const nint m_iEFlags = 0x36C; // int32
            public const nint m_nWaterType = 0x370; // uint8
            public const nint m_bInterpolateEvenWithNoModel = 0x371; // bool
            public const nint m_bPredictionEligible = 0x372; // bool
            public const nint m_bApplyLayerMatchIDToModel = 0x373; // bool
            public const nint m_tokLayerMatchID = 0x374; // CUtlStringToken
            public const nint m_nSubclassID = 0x378; // CUtlStringToken
            public const nint m_nSimulationTick = 0x388; // int32
            public const nint m_iCurrentThinkContext = 0x38C; // int32
            public const nint m_aThinkFunctions = 0x390; // CUtlVector<thinkfunc_t>
            public const nint m_bDisabledContextThinks = 0x3A8; // bool
            public const nint m_flAnimTime = 0x3AC; // float32
            public const nint m_flSimulationTime = 0x3B0; // float32
            public const nint m_nSceneObjectOverrideFlags = 0x3B4; // uint8
            public const nint m_bHasSuccessfullyInterpolated = 0x3B5; // bool
            public const nint m_bHasAddedVarsToInterpolation = 0x3B6; // bool
            public const nint m_bRenderEvenWhenNotSuccessfullyInterpolated = 0x3B7; // bool
            public const nint m_nInterpolationLatchDirtyFlags = 0x3B8; // 
            public const nint m_ListEntry = 0x3C0; // uint16[11]
            public const nint m_flCreateTime = 0x3D8; // GameTime_t
            public const nint m_flSpeed = 0x3DC; // float32
            public const nint m_EntClientFlags = 0x3E0; // uint16
            public const nint m_bClientSideRagdoll = 0x3E2; // bool
            public const nint m_iTeamNum = 0x3E3; // uint8
            public const nint m_spawnflags = 0x3E4; // uint32
            public const nint m_nNextThinkTick = 0x3E8; // GameTick_t
            public const nint m_fFlags = 0x3EC; // uint32
            public const nint m_vecAbsVelocity = 0x3F0; // Vector
            public const nint m_vecVelocity = 0x400; // CNetworkVelocityVector
            public const nint m_vecBaseVelocity = 0x430; // Vector
            public const nint m_hEffectEntity = 0x43C; // CHandle<C_BaseEntity>
            public const nint m_hOwnerEntity = 0x440; // CHandle<C_BaseEntity>
            public const nint m_MoveCollide = 0x444; // MoveCollide_t
            public const nint m_MoveType = 0x445; // MoveType_t
            public const nint m_nActualMoveType = 0x446; // MoveType_t
            public const nint m_flWaterLevel = 0x448; // float32
            public const nint m_fEffects = 0x44C; // uint32
            public const nint m_hGroundEntity = 0x450; // CHandle<C_BaseEntity>
            public const nint m_nGroundBodyIndex = 0x454; // int32
            public const nint m_flFriction = 0x458; // float32
            public const nint m_flElasticity = 0x45C; // float32
            public const nint m_flGravityScale = 0x460; // float32
            public const nint m_flTimeScale = 0x464; // float32
            public const nint m_bAnimatedEveryTick = 0x468; // bool
            public const nint m_flNavIgnoreUntilTime = 0x46C; // GameTime_t
            public const nint m_hThink = 0x470; // uint16
            public const nint m_fBBoxVisFlags = 0x480; // uint8
            public const nint m_bPredictable = 0x481; // bool
            public const nint m_bRenderWithViewModels = 0x482; // bool
            public const nint m_nSplitUserPlayerPredictionSlot = 0x484; // CSplitScreenSlot
            public const nint m_nFirstPredictableCommand = 0x488; // int32
            public const nint m_nLastPredictableCommand = 0x48C; // int32
            public const nint m_hOldMoveParent = 0x490; // CHandle<C_BaseEntity>
            public const nint m_Particles = 0x498; // CParticleProperty
            public const nint m_vecPredictedScriptFloats = 0x4C0; // CUtlVector<float32>
            public const nint m_vecPredictedScriptFloatIDs = 0x4D8; // CUtlVector<int32>
            public const nint m_nNextScriptVarRecordID = 0x508; // int32
            public const nint m_vecAngVelocity = 0x518; // QAngle
            public const nint m_DataChangeEventRef = 0x524; // int32
            public const nint m_dependencies = 0x528; // CUtlVector<CEntityHandle>
            public const nint m_nCreationTick = 0x540; // int32
            public const nint m_bAnimTimeChanged = 0x54D; // bool
            public const nint m_bSimulationTimeChanged = 0x54E; // bool
            public const nint m_sUniqueHammerID = 0x558; // CUtlString
            public const nint m_nBloodType = 0x560; // BloodType
        }
        // Parent: None
        // Field count: 11
        //
        // Metadata:
        // NetworkVarNames: m_nameStringableIndex (int32)
        public static class CEntityIdentity {
            public const nint m_nameStringableIndex = 0x14; // int32
            public const nint m_name = 0x18; // CUtlSymbolLarge
            public const nint m_designerName = 0x20; // CUtlSymbolLarge
            public const nint m_flags = 0x30; // uint32
            public const nint m_worldGroupId = 0x38; // WorldGroupId_t
            public const nint m_fDataObjectTypes = 0x3C; // uint32
            public const nint m_PathIndex = 0x40; // ChangeAccessorFieldPathIndex_t
            public const nint m_pPrev = 0x58; // CEntityIdentity*
            public const nint m_pNext = 0x60; // CEntityIdentity*
            public const nint m_pPrevByClass = 0x68; // CEntityIdentity*
            public const nint m_pNextByClass = 0x70; // CEntityIdentity*
        }
        // Parent: C_CS2WeaponModuleBase
        // Field count: 1
        public static class C_StattrakModule {
            public const nint m_bKnife = 0xF90; // bool
        }
        // Parent: C_BreakableProp
        // Field count: 1
        //
        // Metadata:
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByUserGroup
        // MNetworkExcludeByName
        // MNetworkExcludeByUserGroup
        // MNetworkIncludeByName
        // NetworkVarNames: m_bAwake (bool)
        public static class C_PhysicsProp {
            public const nint m_bAwake = 0x1110; // bool
        }
        // Parent: CBaseProp
        // Field count: 29
        //
        // Metadata:
        // NetworkVarNames: m_CPropDataComponent (CPropDataComponent::Storage_t)
        // NetworkVarNames: m_noGhostCollision (bool)
        public static class C_BreakableProp {
            public const nint m_CPropDataComponent = 0xFC8; // CPropDataComponent
            public const nint m_OnBreak = 0x1008; // CEntityIOOutput
            public const nint m_OnHealthChanged = 0x1030; // CEntityOutputTemplate<float32>
            public const nint m_OnTakeDamage = 0x1058; // CEntityIOOutput
            public const nint m_impactEnergyScale = 0x1080; // float32
            public const nint m_iMinHealthDmg = 0x1084; // int32
            public const nint m_flPressureDelay = 0x1088; // float32
            public const nint m_flDefBurstScale = 0x108C; // float32
            public const nint m_vDefBurstOffset = 0x1090; // Vector
            public const nint m_hBreaker = 0x109C; // CHandle<C_BaseEntity>
            public const nint m_PerformanceMode = 0x10A0; // PerformanceMode_t
            public const nint m_flPreventDamageBeforeTime = 0x10A4; // GameTime_t
            public const nint m_BreakableContentsType = 0x10A8; // BreakableContentsType_t
            public const nint m_strBreakableContentsPropGroupOverride = 0x10B0; // CUtlString
            public const nint m_strBreakableContentsParticleOverride = 0x10B8; // CUtlString
            public const nint m_bHasBreakPiecesOrCommands = 0x10C0; // bool
            public const nint m_explodeDamage = 0x10C4; // float32
            public const nint m_explodeRadius = 0x10C8; // float32
            public const nint m_explosionDelay = 0x10D0; // float32
            public const nint m_explosionBuildupSound = 0x10D8; // CUtlSymbolLarge
            public const nint m_explosionCustomEffect = 0x10E0; // CUtlSymbolLarge
            public const nint m_explosionCustomSound = 0x10E8; // CUtlSymbolLarge
            public const nint m_explosionModifier = 0x10F0; // CUtlSymbolLarge
            public const nint m_hPhysicsAttacker = 0x10F8; // CHandle<C_BasePlayerPawn>
            public const nint m_flLastPhysicsInfluenceTime = 0x10FC; // GameTime_t
            public const nint m_flDefaultFadeScale = 0x1100; // float32
            public const nint m_hLastAttacker = 0x1104; // CHandle<C_BaseEntity>
            public const nint m_hFlareEnt = 0x1108; // CHandle<C_BaseEntity>
            public const nint m_noGhostCollision = 0x110C; // bool
        }
        // Parent: C_BaseToggle
        // Field count: 0
        //
        // Metadata:
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkOverride
        public static class C_FuncMoveLinear {
        }
        // Parent: C_BaseModelEntity
        // Field count: 24
        //
        // Metadata:
        // MNetworkIncludeByUserGroup
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkOverride
        // NetworkVarNames: m_flFrameRate (float32)
        // NetworkVarNames: m_flHDRColorScale (float32)
        // NetworkVarNames: m_nNumBeamEnts (uint8)
        // NetworkVarNames: m_hBaseMaterial (HMaterialStrong)
        // NetworkVarNames: m_nHaloIndex (HMaterialStrong)
        // NetworkVarNames: m_nBeamType (BeamType_t)
        // NetworkVarNames: m_nBeamFlags (uint32)
        // NetworkVarNames: m_hAttachEntity (CHandle<CBaseEntity>)
        // NetworkVarNames: m_nAttachIndex (AttachmentHandle_t)
        // NetworkVarNames: m_fWidth (float32)
        // NetworkVarNames: m_fEndWidth (float32)
        // NetworkVarNames: m_fFadeLength (float32)
        // NetworkVarNames: m_fHaloScale (float32)
        // NetworkVarNames: m_fAmplitude (float32)
        // NetworkVarNames: m_fStartFrame (float32)
        // NetworkVarNames: m_fSpeed (float32)
        // NetworkVarNames: m_flFrame (float32)
        // NetworkVarNames: m_nClipStyle (BeamClipStyle_t)
        // NetworkVarNames: m_bTurnedOff (bool)
        // NetworkVarNames: m_vecEndPos (Vector)
        public static class C_Beam {
            public const nint m_flFrameRate = 0xD28; // float32
            public const nint m_flHDRColorScale = 0xD2C; // float32
            public const nint m_flFireTime = 0xD30; // GameTime_t
            public const nint m_flDamage = 0xD34; // float32
            public const nint m_nNumBeamEnts = 0xD38; // uint8
            public const nint m_queryHandleHalo = 0xD3C; // int32
            public const nint m_hBaseMaterial = 0xD60; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_nHaloIndex = 0xD68; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_nBeamType = 0xD70; // BeamType_t
            public const nint m_nBeamFlags = 0xD74; // uint32
            public const nint m_hAttachEntity = 0xD78; // CHandle<C_BaseEntity>[10]
            public const nint m_nAttachIndex = 0xDA0; // AttachmentHandle_t[10]
            public const nint m_fWidth = 0xDAC; // float32
            public const nint m_fEndWidth = 0xDB0; // float32
            public const nint m_fFadeLength = 0xDB4; // float32
            public const nint m_fHaloScale = 0xDB8; // float32
            public const nint m_fAmplitude = 0xDBC; // float32
            public const nint m_fStartFrame = 0xDC0; // float32
            public const nint m_fSpeed = 0xDC4; // float32
            public const nint m_flFrame = 0xDC8; // float32
            public const nint m_nClipStyle = 0xDCC; // BeamClipStyle_t
            public const nint m_bTurnedOff = 0xDD0; // bool
            public const nint m_vecEndPos = 0xDD4; // Vector
            public const nint m_hEndEntity = 0xDE0; // CHandle<C_BaseEntity>
        }
        // Parent: C_BaseEntity
        // Field count: 8
        //
        // Metadata:
        // NetworkVarNames: m_nVariant (int)
        // NetworkVarNames: m_nRandom (int)
        // NetworkVarNames: m_nOrdinal (int)
        // NetworkVarNames: m_sWeaponName (CUtlString)
        // NetworkVarNames: m_xuid (XUID)
        // NetworkVarNames: m_agentItem (CEconItemView)
        // NetworkVarNames: m_glovesItem (CEconItemView)
        // NetworkVarNames: m_weaponItem (CEconItemView)
        public static class C_CSGO_TeamPreviewCharacterPosition {
            public const nint m_nVariant = 0x568; // int32
            public const nint m_nRandom = 0x56C; // int32
            public const nint m_nOrdinal = 0x570; // int32
            public const nint m_sWeaponName = 0x578; // CUtlString
            public const nint m_xuid = 0x580; // uint64
            public const nint m_agentItem = 0x588; // C_EconItemView
            public const nint m_glovesItem = 0x9D0; // C_EconItemView
            public const nint m_weaponItem = 0xE18; // C_EconItemView
        }
        // Parent: C_DynamicProp
        // Field count: 0
        public static class C_DynamicPropAlias_prop_dynamic_override {
        }
        // Parent: C_PointEntity
        // Field count: 9
        //
        // Metadata:
        // NetworkVarNames: m_iszOverlayNames (string_t)
        // NetworkVarNames: m_flOverlayTimes (float32)
        // NetworkVarNames: m_flStartTime (GameTime_t)
        // NetworkVarNames: m_iDesiredOverlay (int32)
        // NetworkVarNames: m_bIsActive (bool)
        public static class C_EnvScreenOverlay {
            public const nint m_iszOverlayNames = 0x568; // CUtlSymbolLarge[10]
            public const nint m_flOverlayTimes = 0x5B8; // float32[10]
            public const nint m_flStartTime = 0x5E0; // GameTime_t
            public const nint m_iDesiredOverlay = 0x5E4; // int32
            public const nint m_bIsActive = 0x5E8; // bool
            public const nint m_bWasActive = 0x5E9; // bool
            public const nint m_iCachedDesiredOverlay = 0x5EC; // int32
            public const nint m_iCurrentOverlay = 0x5F0; // int32
            public const nint m_flCurrentOverlayTime = 0x5F4; // GameTime_t
        }
        // Parent: CBasePlayerWeaponVData
        // Field count: 92
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertySuppressBaseClassField
        // MPropertySuppressBaseClassField
        public static class CCSWeaponBaseVData {
            public const nint m_WeaponType = 0x348; // CSWeaponType
            public const nint m_WeaponCategory = 0x34C; // CSWeaponCategory
            public const nint m_szViewModel = 0x350; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szPlayerModel = 0x430; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szWorldDroppedModel = 0x510; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szAimsightLensMaskModel = 0x5F0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szMagazineModel = 0x6D0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szHeatEffect = 0x7B0; // 
            public const nint m_szEjectBrassEffect = 0x890; // 
            public const nint m_szMuzzleFlashParticleAlt = 0x970; // 
            public const nint m_szMuzzleFlashThirdPersonParticle = 0xA50; // 
            public const nint m_szMuzzleFlashThirdPersonParticleAlt = 0xB30; // 
            public const nint m_szTracerParticle = 0xC10; // 
            public const nint m_GearSlot = 0xCF0; // gear_slot_t
            public const nint m_GearSlotPosition = 0xCF4; // int32
            public const nint m_DefaultLoadoutSlot = 0xCF8; // loadout_slot_t
            public const nint m_sWrongTeamMsg = 0xD00; // CUtlString
            public const nint m_nPrice = 0xD08; // int32
            public const nint m_nKillAward = 0xD0C; // int32
            public const nint m_nPrimaryReserveAmmoMax = 0xD10; // int32
            public const nint m_nSecondaryReserveAmmoMax = 0xD14; // int32
            public const nint m_bMeleeWeapon = 0xD18; // bool
            public const nint m_bHasBurstMode = 0xD19; // bool
            public const nint m_bIsRevolver = 0xD1A; // bool
            public const nint m_bCannotShootUnderwater = 0xD1B; // bool
            public const nint m_szName = 0xD20; // CGlobalSymbol
            public const nint m_szAnimExtension = 0xD28; // CUtlString
            public const nint m_eSilencerType = 0xD30; // CSWeaponSilencerType
            public const nint m_nCrosshairMinDistance = 0xD34; // int32
            public const nint m_nCrosshairDeltaDistance = 0xD38; // int32
            public const nint m_bIsFullAuto = 0xD3C; // bool
            public const nint m_nNumBullets = 0xD40; // int32
            public const nint m_flCycleTime = 0xD44; // CFiringModeFloat
            public const nint m_flMaxSpeed = 0xD4C; // CFiringModeFloat
            public const nint m_flSpread = 0xD54; // CFiringModeFloat
            public const nint m_flInaccuracyCrouch = 0xD5C; // CFiringModeFloat
            public const nint m_flInaccuracyStand = 0xD64; // CFiringModeFloat
            public const nint m_flInaccuracyJump = 0xD6C; // CFiringModeFloat
            public const nint m_flInaccuracyLand = 0xD74; // CFiringModeFloat
            public const nint m_flInaccuracyLadder = 0xD7C; // CFiringModeFloat
            public const nint m_flInaccuracyFire = 0xD84; // CFiringModeFloat
            public const nint m_flInaccuracyMove = 0xD8C; // CFiringModeFloat
            public const nint m_flRecoilAngle = 0xD94; // CFiringModeFloat
            public const nint m_flRecoilAngleVariance = 0xD9C; // CFiringModeFloat
            public const nint m_flRecoilMagnitude = 0xDA4; // CFiringModeFloat
            public const nint m_flRecoilMagnitudeVariance = 0xDAC; // CFiringModeFloat
            public const nint m_nTracerFrequency = 0xDB4; // CFiringModeInt
            public const nint m_flInaccuracyJumpInitial = 0xDBC; // float32
            public const nint m_flInaccuracyJumpApex = 0xDC0; // float32
            public const nint m_flInaccuracyReload = 0xDC4; // float32
            public const nint m_nRecoilSeed = 0xDC8; // int32
            public const nint m_nSpreadSeed = 0xDCC; // int32
            public const nint m_flTimeToIdleAfterFire = 0xDD0; // float32
            public const nint m_flIdleInterval = 0xDD4; // float32
            public const nint m_flAttackMovespeedFactor = 0xDD8; // float32
            public const nint m_flHeatPerShot = 0xDDC; // float32
            public const nint m_flInaccuracyPitchShift = 0xDE0; // float32
            public const nint m_flInaccuracyAltSoundThreshold = 0xDE4; // float32
            public const nint m_flBotAudibleRange = 0xDE8; // float32
            public const nint m_szUseRadioSubtitle = 0xDF0; // CUtlString
            public const nint m_bUnzoomsAfterShot = 0xDF8; // bool
            public const nint m_bHideViewModelWhenZoomed = 0xDF9; // bool
            public const nint m_nZoomLevels = 0xDFC; // int32
            public const nint m_nZoomFOV1 = 0xE00; // int32
            public const nint m_nZoomFOV2 = 0xE04; // int32
            public const nint m_flZoomTime0 = 0xE08; // float32
            public const nint m_flZoomTime1 = 0xE0C; // float32
            public const nint m_flZoomTime2 = 0xE10; // float32
            public const nint m_flIronSightPullUpSpeed = 0xE14; // float32
            public const nint m_flIronSightPutDownSpeed = 0xE18; // float32
            public const nint m_flIronSightFOV = 0xE1C; // float32
            public const nint m_flIronSightPivotForward = 0xE20; // float32
            public const nint m_flIronSightLooseness = 0xE24; // float32
            public const nint m_angPivotAngle = 0xE28; // QAngle
            public const nint m_vecIronSightEyePos = 0xE34; // Vector
            public const nint m_nDamage = 0xE40; // int32
            public const nint m_flHeadshotMultiplier = 0xE44; // float32
            public const nint m_flArmorRatio = 0xE48; // float32
            public const nint m_flPenetration = 0xE4C; // float32
            public const nint m_flRange = 0xE50; // float32
            public const nint m_flRangeModifier = 0xE54; // float32
            public const nint m_flFlinchVelocityModifierLarge = 0xE58; // float32
            public const nint m_flFlinchVelocityModifierSmall = 0xE5C; // float32
            public const nint m_flRecoveryTimeCrouch = 0xE60; // float32
            public const nint m_flRecoveryTimeStand = 0xE64; // float32
            public const nint m_flRecoveryTimeCrouchFinal = 0xE68; // float32
            public const nint m_flRecoveryTimeStandFinal = 0xE6C; // float32
            public const nint m_nRecoveryTransitionStartBullet = 0xE70; // int32
            public const nint m_nRecoveryTransitionEndBullet = 0xE74; // int32
            public const nint m_flThrowVelocity = 0xE78; // float32
            public const nint m_vSmokeColor = 0xE7C; // Vector
            public const nint m_szAnimClass = 0xE88; // CGlobalSymbol
        }
        // Parent: C_ModelPointEntity
        // Field count: 17
        //
        // Metadata:
        // NetworkVarNames: m_messageText (char)
        // NetworkVarNames: m_FontName (char)
        // NetworkVarNames: m_BackgroundMaterialName (char)
        // NetworkVarNames: m_bEnabled (bool)
        // NetworkVarNames: m_bFullbright (bool)
        // NetworkVarNames: m_flWorldUnitsPerPx (float)
        // NetworkVarNames: m_flFontSize (float)
        // NetworkVarNames: m_flDepthOffset (float)
        // NetworkVarNames: m_bDrawBackground (bool)
        // NetworkVarNames: m_flBackgroundBorderWidth (float)
        // NetworkVarNames: m_flBackgroundBorderHeight (float)
        // NetworkVarNames: m_flBackgroundWorldToUV (float)
        // NetworkVarNames: m_Color (Color)
        // NetworkVarNames: m_nJustifyHorizontal (PointWorldTextJustifyHorizontal_t)
        // NetworkVarNames: m_nJustifyVertical (PointWorldTextJustifyVertical_t)
        // NetworkVarNames: m_nReorientMode (PointWorldTextReorientMode_t)
        public static class C_PointWorldText {
            public const nint m_bForceRecreateNextUpdate = 0xD30; // bool
            public const nint m_messageText = 0xD48; // char[512]
            public const nint m_FontName = 0xF48; // char[64]
            public const nint m_BackgroundMaterialName = 0xF88; // char[64]
            public const nint m_bEnabled = 0xFC8; // bool
            public const nint m_bFullbright = 0xFC9; // bool
            public const nint m_flWorldUnitsPerPx = 0xFCC; // float32
            public const nint m_flFontSize = 0xFD0; // float32
            public const nint m_flDepthOffset = 0xFD4; // float32
            public const nint m_bDrawBackground = 0xFD8; // bool
            public const nint m_flBackgroundBorderWidth = 0xFDC; // float32
            public const nint m_flBackgroundBorderHeight = 0xFE0; // float32
            public const nint m_flBackgroundWorldToUV = 0xFE4; // float32
            public const nint m_Color = 0xFE8; // Color
            public const nint m_nJustifyHorizontal = 0xFEC; // PointWorldTextJustifyHorizontal_t
            public const nint m_nJustifyVertical = 0xFF0; // PointWorldTextJustifyVertical_t
            public const nint m_nReorientMode = 0xFF4; // PointWorldTextReorientMode_t
        }
        // Parent: C_BaseGrenade
        // Field count: 0
        public static class CBumpMineProjectile {
        }
        // Parent: CBasePlayerController
        // Field count: 65
        //
        // Metadata:
        // MNetworkUserGroupProxy
        // MNetworkUserGroupProxy
        // MNetworkUserGroupProxy
        // NetworkVarNames: m_pInGameMoneyServices (CCSPlayerController_InGameMoneyServices*)
        // NetworkVarNames: m_pInventoryServices (CCSPlayerController_InventoryServices*)
        // NetworkVarNames: m_pActionTrackingServices (CCSPlayerController_ActionTrackingServices*)
        // NetworkVarNames: m_pDamageServices (CCSPlayerController_DamageServices*)
        // NetworkVarNames: m_iPing (uint32)
        // NetworkVarNames: m_bHasCommunicationAbuseMute (bool)
        // NetworkVarNames: m_szCrosshairCodes (string_t)
        // NetworkVarNames: m_iPendingTeamNum (uint8)
        // NetworkVarNames: m_flForceTeamTime (GameTime_t)
        // NetworkVarNames: m_iCompTeammateColor (int)
        // NetworkVarNames: m_bEverPlayedOnTeam (bool)
        // NetworkVarNames: m_szClan (string_t)
        // NetworkVarNames: m_iCoachingTeam (int)
        // NetworkVarNames: m_nPlayerDominated (uint64)
        // NetworkVarNames: m_nPlayerDominatingMe (uint64)
        // NetworkVarNames: m_iCompetitiveRanking (int)
        // NetworkVarNames: m_iCompetitiveWins (int)
        // NetworkVarNames: m_iCompetitiveRankType (int8)
        // NetworkVarNames: m_iCompetitiveRankingPredicted_Win (int)
        // NetworkVarNames: m_iCompetitiveRankingPredicted_Loss (int)
        // NetworkVarNames: m_iCompetitiveRankingPredicted_Tie (int)
        // NetworkVarNames: m_nEndMatchNextMapVote (int)
        // NetworkVarNames: m_unActiveQuestId (uint16)
        // NetworkVarNames: m_nQuestProgressReason (QuestProgress::Reason)
        // NetworkVarNames: m_unPlayerTvControlFlags (uint32)
        // NetworkVarNames: m_nDisconnectionTick (int)
        // NetworkVarNames: m_bControllingBot (bool)
        // NetworkVarNames: m_bHasControlledBotThisRound (bool)
        // NetworkVarNames: m_bCanControlObservedBot (bool)
        // NetworkVarNames: m_hPlayerPawn (CHandle<CCSPlayerPawn>)
        // NetworkVarNames: m_hObserverPawn (CHandle<CCSObserverPawn>)
        // NetworkVarNames: m_bPawnIsAlive (bool)
        // NetworkVarNames: m_iPawnHealth (uint32)
        // NetworkVarNames: m_iPawnArmor (int)
        // NetworkVarNames: m_bPawnHasDefuser (bool)
        // NetworkVarNames: m_bPawnHasHelmet (bool)
        // NetworkVarNames: m_nPawnCharacterDefIndex (item_definition_index_t)
        // NetworkVarNames: m_iPawnLifetimeStart (int)
        // NetworkVarNames: m_iPawnLifetimeEnd (int)
        // NetworkVarNames: m_iPawnBotDifficulty (int)
        // NetworkVarNames: m_hOriginalControllerOfCurrentPawn (CHandle<CCSPlayerController>)
        // NetworkVarNames: m_iScore (int32)
        // NetworkVarNames: m_recentKillQueue (uint8)
        // NetworkVarNames: m_nFirstKill (uint8)
        // NetworkVarNames: m_nKillCount (uint8)
        // NetworkVarNames: m_bMvpNoMusic (bool)
        // NetworkVarNames: m_eMvpReason (int)
        // NetworkVarNames: m_iMusicKitID (int)
        // NetworkVarNames: m_iMusicKitMVPs (int)
        // NetworkVarNames: m_iMVPs (int)
        // NetworkVarNames: m_bFireBulletsSeedSynchronized (bool)
        public static class CCSPlayerController {
            public const nint m_pInGameMoneyServices = 0x720; // CCSPlayerController_InGameMoneyServices*
            public const nint m_pInventoryServices = 0x728; // CCSPlayerController_InventoryServices*
            public const nint m_pActionTrackingServices = 0x730; // CCSPlayerController_ActionTrackingServices*
            public const nint m_pDamageServices = 0x738; // CCSPlayerController_DamageServices*
            public const nint m_iPing = 0x740; // uint32
            public const nint m_bHasCommunicationAbuseMute = 0x744; // bool
            public const nint m_szCrosshairCodes = 0x748; // CUtlSymbolLarge
            public const nint m_iPendingTeamNum = 0x750; // uint8
            public const nint m_flForceTeamTime = 0x754; // GameTime_t
            public const nint m_iCompTeammateColor = 0x758; // int32
            public const nint m_bEverPlayedOnTeam = 0x75C; // bool
            public const nint m_flPreviousForceJoinTeamTime = 0x760; // GameTime_t
            public const nint m_szClan = 0x768; // CUtlSymbolLarge
            public const nint m_sSanitizedPlayerName = 0x770; // CUtlString
            public const nint m_iCoachingTeam = 0x778; // int32
            public const nint m_nPlayerDominated = 0x780; // uint64
            public const nint m_nPlayerDominatingMe = 0x788; // uint64
            public const nint m_iCompetitiveRanking = 0x790; // int32
            public const nint m_iCompetitiveWins = 0x794; // int32
            public const nint m_iCompetitiveRankType = 0x798; // int8
            public const nint m_iCompetitiveRankingPredicted_Win = 0x79C; // int32
            public const nint m_iCompetitiveRankingPredicted_Loss = 0x7A0; // int32
            public const nint m_iCompetitiveRankingPredicted_Tie = 0x7A4; // int32
            public const nint m_nEndMatchNextMapVote = 0x7A8; // int32
            public const nint m_unActiveQuestId = 0x7AC; // uint16
            public const nint m_nQuestProgressReason = 0x7B0; // QuestProgress::Reason
            public const nint m_unPlayerTvControlFlags = 0x7B4; // uint32
            public const nint m_iDraftIndex = 0x7E0; // int32
            public const nint m_msQueuedModeDisconnectionTimestamp = 0x7E4; // uint32
            public const nint m_uiAbandonRecordedReason = 0x7E8; // uint32
            public const nint m_bCannotBeKicked = 0x7EC; // bool
            public const nint m_bEverFullyConnected = 0x7ED; // bool
            public const nint m_bAbandonAllowsSurrender = 0x7EE; // bool
            public const nint m_bAbandonOffersInstantSurrender = 0x7EF; // bool
            public const nint m_bDisconnection1MinWarningPrinted = 0x7F0; // bool
            public const nint m_bScoreReported = 0x7F1; // bool
            public const nint m_nDisconnectionTick = 0x7F4; // int32
            public const nint m_bControllingBot = 0x800; // bool
            public const nint m_bHasControlledBotThisRound = 0x801; // bool
            public const nint m_bHasBeenControlledByPlayerThisRound = 0x802; // bool
            public const nint m_nBotsControlledThisRound = 0x804; // int32
            public const nint m_bCanControlObservedBot = 0x808; // bool
            public const nint m_hPlayerPawn = 0x80C; // CHandle<C_CSPlayerPawn>
            public const nint m_hObserverPawn = 0x810; // CHandle<C_CSObserverPawn>
            public const nint m_bPawnIsAlive = 0x814; // bool
            public const nint m_iPawnHealth = 0x818; // uint32
            public const nint m_iPawnArmor = 0x81C; // int32
            public const nint m_bPawnHasDefuser = 0x820; // bool
            public const nint m_bPawnHasHelmet = 0x821; // bool
            public const nint m_nPawnCharacterDefIndex = 0x822; // uint16
            public const nint m_iPawnLifetimeStart = 0x824; // int32
            public const nint m_iPawnLifetimeEnd = 0x828; // int32
            public const nint m_iPawnBotDifficulty = 0x82C; // int32
            public const nint m_hOriginalControllerOfCurrentPawn = 0x830; // CHandle<CCSPlayerController>
            public const nint m_iScore = 0x834; // int32
            public const nint m_recentKillQueue = 0x838; // uint8[8]
            public const nint m_nFirstKill = 0x840; // uint8
            public const nint m_nKillCount = 0x841; // uint8
            public const nint m_bMvpNoMusic = 0x842; // bool
            public const nint m_eMvpReason = 0x844; // int32
            public const nint m_iMusicKitID = 0x848; // int32
            public const nint m_iMusicKitMVPs = 0x84C; // int32
            public const nint m_iMVPs = 0x850; // int32
            public const nint m_bIsPlayerNameDirty = 0x854; // bool
            public const nint m_bFireBulletsSeedSynchronized = 0x855; // bool
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponFiveSeven {
        }
        // Parent: C_DynamicProp
        // Field count: 7
        //
        // Metadata:
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByName
        // MNetworkExcludeByUserGroup
        // MNetworkExcludeByName
        // MNetworkExcludeByUserGroup
        // MNetworkIncludeByName
        // NetworkVarNames: m_eDoorState (DoorState_t)
        // NetworkVarNames: m_bLocked (bool)
        // NetworkVarNames: m_closedPosition (Vector)
        // NetworkVarNames: m_closedAngles (QAngle)
        // NetworkVarNames: m_hMaster (CHandle<C_BasePropDoor>)
        public static class C_BasePropDoor {
            public const nint m_eDoorState = 0x1238; // DoorState_t
            public const nint m_modelChanged = 0x123C; // bool
            public const nint m_bLocked = 0x123D; // bool
            public const nint m_closedPosition = 0x1240; // Vector
            public const nint m_closedAngles = 0x124C; // QAngle
            public const nint m_hMaster = 0x1258; // CHandle<C_BasePropDoor>
            public const nint m_vWhereToSetLightingOrigin = 0x125C; // Vector
        }
        // Parent: C_CSGO_TeamSelectCharacterPosition
        // Field count: 0
        public static class C_CSGO_TeamSelectTerroristPosition {
        }
        // Parent: C_CS2WeaponModuleBase
        // Field count: 1
        public static class C_NametagModule {
            public const nint m_strNametagString = 0xF90; // CUtlString
        }
        // Parent: C_BreakableProp
        // Field count: 6
        public static class C_PhysPropClientside {
            public const nint m_flTouchDelta = 0x1110; // GameTime_t
            public const nint m_fDeathTime = 0x1114; // GameTime_t
            public const nint m_inertiaScale = 0x1118; // float32
            public const nint m_vecDamagePosition = 0x111C; // Vector
            public const nint m_vecDamageDirection = 0x1128; // Vector
            public const nint m_nDamageType = 0x1134; // DamageTypes_t
        }
        // Parent: C_CSGO_TeamPreviewCamera
        // Field count: 0
        public static class C_CSGO_TeamSelectCamera {
        }
        // Parent: C_BaseEntity
        // Field count: 4
        //
        // Metadata:
        // NetworkVarNames: m_bDisabled (bool)
        // NetworkVarNames: m_iszSoundAreaType (string_t)
        // NetworkVarNames: m_vPos (Vector)
        public static class C_SoundAreaEntityBase {
            public const nint m_bDisabled = 0x568; // bool
            public const nint m_bWasEnabled = 0x570; // bool
            public const nint m_iszSoundAreaType = 0x578; // CUtlSymbolLarge
            public const nint m_vPos = 0x580; // Vector
        }
        // Parent: C_BaseEntity
        // Field count: 3
        //
        // Metadata:
        // NetworkVarNames: m_fog (fogparams_t)
        public static class C_FogController {
            public const nint m_fog = 0x568; // fogparams_t
            public const nint m_bUseAngles = 0x5D0; // bool
            public const nint m_iChangedVariables = 0x5D4; // int32
        }
        // Parent: CPlayerPawnComponent
        // Field count: 0
        public static class CPlayer_ItemServices {
        }
        // Parent: C_BaseModelEntity
        // Field count: 0
        public static class C_FuncBrush {
        }
        // Parent: C_BaseEntity
        // Field count: 8
        //
        // Metadata:
        // NetworkVarNames: m_worldName (string_t)
        // NetworkVarNames: m_layerName (string_t)
        // NetworkVarNames: m_bWorldLayerVisible (bool)
        // NetworkVarNames: m_bEntitiesSpawned (bool)
        public static class CInfoWorldLayer {
            public const nint m_pOutputOnEntitiesSpawned = 0x568; // CEntityIOOutput
            public const nint m_worldName = 0x590; // CUtlSymbolLarge
            public const nint m_layerName = 0x598; // CUtlSymbolLarge
            public const nint m_bWorldLayerVisible = 0x5A0; // bool
            public const nint m_bEntitiesSpawned = 0x5A1; // bool
            public const nint m_bCreateAsChildSpawnGroup = 0x5A2; // bool
            public const nint m_hLayerSpawnGroup = 0x5A4; // uint32
            public const nint m_bWorldLayerActuallyVisible = 0x5A8; // bool
        }
        // Parent: C_BaseCombatCharacter
        // Field count: 0
        public static class C_NetTestBaseCombatCharacter {
        }
        // Parent: CBaseAnimGraph
        // Field count: 2
        public static class C_PhysMagnet {
            public const nint m_aAttachedObjectsFromServer = 0xF88; // CUtlVector<int32>
            public const nint m_aAttachedObjects = 0xFA0; // CUtlVector<CHandle<C_BaseEntity>>
        }
        // Parent: C_BaseModelEntity
        // Field count: 8
        //
        // Metadata:
        // MNetworkIncludeByName
        // MNetworkOverride
        // MNetworkOverride
        // MNetworkOverride
        // MNetworkOverride
        // MNetworkOverride
        // NetworkVarNames: m_vecMoveDirEntitySpace (Vector)
        // NetworkVarNames: m_flTargetSpeed (float32)
        // NetworkVarNames: m_nTransitionStartTick (GameTick_t)
        // NetworkVarNames: m_nTransitionDurationTicks (int)
        // NetworkVarNames: m_flTransitionStartSpeed (float32)
        // NetworkVarNames: m_hConveyorModels (EHANDLE)
        public static class C_FuncConveyor {
            public const nint m_vecMoveDirEntitySpace = 0xD30; // Vector
            public const nint m_flTargetSpeed = 0xD3C; // float32
            public const nint m_nTransitionStartTick = 0xD40; // GameTick_t
            public const nint m_nTransitionDurationTicks = 0xD44; // int32
            public const nint m_flTransitionStartSpeed = 0xD48; // float32
            public const nint m_hConveyorModels = 0xD50; // C_NetworkUtlVectorBase<CHandle<C_BaseEntity>>
            public const nint m_flCurrentConveyorOffset = 0xD68; // float32
            public const nint m_flCurrentConveyorSpeed = 0xD6C; // float32
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // NetworkVarNames: m_pEntity (CEntityIdentity*)
        // NetworkVarNames: m_CScriptComponent (CScriptComponent::Storage_t)
        public static class CEntityInstance {
            public const nint m_iszPrivateVScripts = 0x8; // CUtlSymbolLarge
            public const nint m_pEntity = 0x10; // CEntityIdentity*
            public const nint m_CScriptComponent = 0x28; // CScriptComponent*
            public const nint m_bVisibleinPVS = 0x30; // bool
        }
        // Parent: None
        // Field count: 3
        public static class ServerAuthoritativeWeaponSlot_t {
            public const nint unClass = 0x28; // uint16
            public const nint unSlot = 0x2A; // uint16
            public const nint unItemDefIdx = 0x2C; // uint16
        }
        // Parent: CPlayerPawnComponent
        // Field count: 0
        public static class CCSPlayer_DamageReactServices {
        }
        // Parent: CBaseAnimGraph
        // Field count: 16
        //
        // Metadata:
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkExcludeByUserGroup
        // MNetworkOverride
        // MNetworkIncludeByName
        // NetworkVarNames: m_nViewModelIndex (uint32)
        // NetworkVarNames: m_nAnimationParity (uint32)
        // NetworkVarNames: m_flAnimationStartTime (float32)
        // NetworkVarNames: m_hWeapon (CHandle<CBasePlayerWeapon>)
        // NetworkVarNames: m_hControlPanel (CHandle<CBaseEntity>)
        public static class C_BaseViewModel {
            public const nint m_vecLastFacing = 0xF90; // Vector
            public const nint m_nViewModelIndex = 0xF9C; // uint32
            public const nint m_nAnimationParity = 0xFA0; // uint32
            public const nint m_flAnimationStartTime = 0xFA4; // float32
            public const nint m_hWeapon = 0xFA8; // CHandle<C_BasePlayerWeapon>
            public const nint m_sVMName = 0xFB0; // CUtlSymbolLarge
            public const nint m_sAnimationPrefix = 0xFB8; // CUtlSymbolLarge
            public const nint m_iCameraAttachment = 0xFC0; // AttachmentHandle_t
            public const nint m_vecLastCameraAngles = 0xFC4; // QAngle
            public const nint m_previousElapsedDuration = 0xFD0; // float32
            public const nint m_previousCycle = 0xFD4; // float32
            public const nint m_nOldAnimationParity = 0xFD8; // int32
            public const nint m_hOldLayerSequence = 0xFDC; // HSequence
            public const nint m_oldLayer = 0xFE0; // int32
            public const nint m_oldLayerStartTime = 0xFE4; // float32
            public const nint m_hControlPanel = 0xFE8; // CHandle<C_BaseEntity>
        }
        // Parent: C_BaseEntity
        // Field count: 0
        public static class C_PortraitWorldCallbackHandler {
        }
        // Parent: CHostageRescueZoneShim
        // Field count: 0
        public static class CHostageRescueZone {
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponNegev {
        }
        // Parent: None
        // Field count: 33
        //
        // Metadata:
        // NetworkVarNames: m_hParent (CGameSceneNodeHandle)
        // NetworkVarNames: m_vecOrigin (CNetworkOriginCellCoordQuantizedVector)
        // NetworkVarNames: m_angRotation (QAngle)
        // NetworkVarNames: m_flScale (float)
        // NetworkVarNames: m_name (CUtlStringToken)
        // NetworkVarNames: m_hierarchyAttachName (CUtlStringToken)
        public static class CGameSceneNode {
            public const nint m_nodeToWorld = 0x10; // CTransform
            public const nint m_pOwner = 0x30; // CEntityInstance*
            public const nint m_pParent = 0x38; // CGameSceneNode*
            public const nint m_pChild = 0x40; // CGameSceneNode*
            public const nint m_pNextSibling = 0x48; // CGameSceneNode*
            public const nint m_hParent = 0x78; // CGameSceneNodeHandle
            public const nint m_vecOrigin = 0x88; // CNetworkOriginCellCoordQuantizedVector
            public const nint m_angRotation = 0xC0; // QAngle
            public const nint m_flScale = 0xCC; // float32
            public const nint m_vecAbsOrigin = 0xD0; // Vector
            public const nint m_angAbsRotation = 0xDC; // QAngle
            public const nint m_flAbsScale = 0xE8; // float32
            public const nint m_nParentAttachmentOrBone = 0xEC; // int16
            public const nint m_bDebugAbsOriginChanges = 0xEE; // bool
            public const nint m_bDormant = 0xEF; // bool
            public const nint m_bForceParentToBeNetworked = 0xF0; // bool
            public const nint m_bDirtyHierarchy = 0x0; // bitfield:1
            public const nint m_bDirtyBoneMergeInfo = 0x0; // bitfield:1
            public const nint m_bNetworkedPositionChanged = 0x0; // bitfield:1
            public const nint m_bNetworkedAnglesChanged = 0x0; // bitfield:1
            public const nint m_bNetworkedScaleChanged = 0x0; // bitfield:1
            public const nint m_bWillBeCallingPostDataUpdate = 0x0; // bitfield:1
            public const nint m_bBoneMergeFlex = 0x0; // bitfield:1
            public const nint m_nLatchAbsOrigin = 0x0; // bitfield:2
            public const nint m_bDirtyBoneMergeBoneToRoot = 0x0; // bitfield:1
            public const nint m_nHierarchicalDepth = 0xF3; // uint8
            public const nint m_nHierarchyType = 0xF4; // uint8
            public const nint m_nDoNotSetAnimTimeInInvalidatePhysicsCount = 0xF5; // uint8
            public const nint m_name = 0xF8; // CUtlStringToken
            public const nint m_hierarchyAttachName = 0x138; // CUtlStringToken
            public const nint m_flZOffset = 0x13C; // float32
            public const nint m_flClientLocalScale = 0x140; // float32
            public const nint m_vRenderOrigin = 0x144; // Vector
        }
        // Parent: C_MolotovGrenade
        // Field count: 0
        public static class C_IncendiaryGrenade {
        }
        // Parent: C_CSWeaponBase
        // Field count: 0
        public static class CTablet {
        }
        // Parent: CBasePulseGraphInstance
        // Field count: 1
        //
        // Metadata:
        // MPulseInstanceDomainInfo
        // MPulseDomainHookInfo
        // MPulseLibraryBindings
        // MPulseDomainOptInFeatureTag
        public static class CCSPointScript {
            public const nint m_pParent = 0xF8; // CCSPointScriptEntity*
        }
        // Parent: C_CSPlayerPawnBase
        // Field count: 1
        //
        // Metadata:
        // MNetworkVarTypeOverride
        // MNetworkIncludeByName
        // MNetworkVarTypeOverride
        // MNetworkIncludeByName
        // MNetworkVarTypeOverride
        // MNetworkIncludeByName
        // MNetworkVarTypeOverride
        // MNetworkIncludeByName
        // MNetworkVarTypeOverride
        // MNetworkIncludeByName
        public static class C_CSObserverPawn {
            public const nint m_hDetectParentChange = 0x1510; // CEntityHandle
        }
        // Parent: C_BaseEntity
        // Field count: 3
        //
        // Metadata:
        // NetworkVarNames: m_hEntAttached (CHandle<C_BaseEntity>)
        // NetworkVarNames: m_bCheapEffect (bool)
        public static class C_EntityFlame {
            public const nint m_hEntAttached = 0x568; // CHandle<C_BaseEntity>
            public const nint m_hOldAttached = 0x590; // CHandle<C_BaseEntity>
            public const nint m_bCheapEffect = 0x594; // bool
        }
        // Parent: C_BaseGrenade
        // Field count: 0
        public static class CTripWireFireProjectile {
        }
        // Parent: C_BaseModelEntity
        // Field count: 0
        public static class C_Breakable {
        }
        // Parent: CPlayer_ObserverServices
        // Field count: 8
        public static class CCSObserver_ObserverServices {
            public const nint m_hLastObserverTarget = 0x58; // CEntityHandle
            public const nint m_vecObserverInterpolateOffset = 0x5C; // Vector
            public const nint m_vecObserverInterpStartPos = 0x68; // Vector
            public const nint m_flObsInterp_PathLength = 0x74; // float32
            public const nint m_qObsInterp_OrientationStart = 0x80; // Quaternion
            public const nint m_qObsInterp_OrientationTravelDir = 0x90; // Quaternion
            public const nint m_obsInterpState = 0xA0; // ObserverInterpState_t
            public const nint m_bObserverInterpolationNeedsDeferredSetup = 0xA4; // bool
        }
        // Parent: C_BaseEntity
        // Field count: 0
        public static class C_TintController {
        }
        // Parent: CPlayerPawnComponent
        // Field count: 0
        public static class CPlayer_AutoaimServices {
        }
        // Parent: C_BaseCombatCharacter
        // Field count: 23
        //
        // Metadata:
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkIncludeByName
        // MNetworkOverride
        // NetworkVarNames: m_entitySpottedState (EntitySpottedState_t)
        // NetworkVarNames: m_leader (CHandle<CBaseEntity>)
        // NetworkVarNames: m_reuseTimer (CountdownTimer)
        // NetworkVarNames: m_vel (Vector)
        // NetworkVarNames: m_isRescued (bool)
        // NetworkVarNames: m_jumpedThisFrame (bool)
        // NetworkVarNames: m_nHostageState (int)
        // NetworkVarNames: m_bHandsHaveBeenCut (bool)
        // NetworkVarNames: m_hHostageGrabber (CHandle<CCSPlayerPawn>)
        // NetworkVarNames: m_flRescueStartTime (GameTime_t)
        // NetworkVarNames: m_flGrabSuccessTime (GameTime_t)
        // NetworkVarNames: m_flDropStartTime (GameTime_t)
        public static class C_Hostage {
            public const nint m_entitySpottedState = 0x11A8; // EntitySpottedState_t
            public const nint m_leader = 0x11C0; // CHandle<C_BaseEntity>
            public const nint m_reuseTimer = 0x11C8; // CountdownTimer
            public const nint m_vel = 0x11E0; // Vector
            public const nint m_isRescued = 0x11EC; // bool
            public const nint m_jumpedThisFrame = 0x11ED; // bool
            public const nint m_nHostageState = 0x11F0; // int32
            public const nint m_bHandsHaveBeenCut = 0x11F4; // bool
            public const nint m_hHostageGrabber = 0x11F8; // CHandle<C_CSPlayerPawn>
            public const nint m_fLastGrabTime = 0x11FC; // GameTime_t
            public const nint m_vecGrabbedPos = 0x1200; // Vector
            public const nint m_flRescueStartTime = 0x120C; // GameTime_t
            public const nint m_flGrabSuccessTime = 0x1210; // GameTime_t
            public const nint m_flDropStartTime = 0x1214; // GameTime_t
            public const nint m_flDeadOrRescuedTime = 0x1218; // GameTime_t
            public const nint m_blinkTimer = 0x1220; // CountdownTimer
            public const nint m_lookAt = 0x1238; // Vector
            public const nint m_lookAroundTimer = 0x1248; // CountdownTimer
            public const nint m_isInit = 0x1260; // bool
            public const nint m_eyeAttachment = 0x1261; // AttachmentHandle_t
            public const nint m_chestAttachment = 0x1262; // AttachmentHandle_t
            public const nint m_pPredictionOwner = 0x1268; // CBasePlayerController*
            public const nint m_fNewestAlphaThinkTime = 0x1270; // GameTime_t
        }
        // Parent: C_BaseModelEntity
        // Field count: 24
        //
        // Metadata:
        // NetworkVarNames: m_hSpriteMaterial (HMaterialStrong)
        // NetworkVarNames: m_hAttachedToEntity (CHandle<CBaseEntity>)
        // NetworkVarNames: m_nAttachment (AttachmentHandle_t)
        // NetworkVarNames: m_flSpriteFramerate (float32)
        // NetworkVarNames: m_flFrame (float32)
        // NetworkVarNames: m_nBrightness (uint32)
        // NetworkVarNames: m_flBrightnessDuration (float32)
        // NetworkVarNames: m_flSpriteScale (float32)
        // NetworkVarNames: m_flScaleDuration (float32)
        // NetworkVarNames: m_bWorldSpaceScale (bool)
        // NetworkVarNames: m_flGlowProxySize (float32)
        // NetworkVarNames: m_flHDRColorScale (float32)
        public static class C_Sprite {
            public const nint m_hSpriteMaterial = 0xD28; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_hAttachedToEntity = 0xD30; // CHandle<C_BaseEntity>
            public const nint m_nAttachment = 0xD34; // AttachmentHandle_t
            public const nint m_flSpriteFramerate = 0xD38; // float32
            public const nint m_flFrame = 0xD3C; // float32
            public const nint m_flDieTime = 0xD40; // GameTime_t
            public const nint m_nBrightness = 0xD50; // uint32
            public const nint m_flBrightnessDuration = 0xD54; // float32
            public const nint m_flSpriteScale = 0xD58; // float32
            public const nint m_flScaleDuration = 0xD5C; // float32
            public const nint m_bWorldSpaceScale = 0xD60; // bool
            public const nint m_flGlowProxySize = 0xD64; // float32
            public const nint m_flHDRColorScale = 0xD68; // float32
            public const nint m_flLastTime = 0xD6C; // GameTime_t
            public const nint m_flMaxFrame = 0xD70; // float32
            public const nint m_flStartScale = 0xD74; // float32
            public const nint m_flDestScale = 0xD78; // float32
            public const nint m_flScaleTimeStart = 0xD7C; // GameTime_t
            public const nint m_nStartBrightness = 0xD80; // int32
            public const nint m_nDestBrightness = 0xD84; // int32
            public const nint m_flBrightnessTimeStart = 0xD88; // GameTime_t
            public const nint m_hOldSpriteMaterial = 0xD90; // CWeakHandle<InfoForResourceTypeIMaterial2>
            public const nint m_nSpriteWidth = 0xE30; // int32
            public const nint m_nSpriteHeight = 0xE34; // int32
        }
        // Parent: C_CSWeaponBaseGun
        // Field count: 0
        public static class C_WeaponM4A1Silencer {
        }
        // Parent: C_PointEntity
        // Field count: 9
        public static class CMapInfo {
            public const nint m_iBuyingStatus = 0x568; // int32
            public const nint m_flBombRadius = 0x56C; // float32
            public const nint m_iPetPopulation = 0x570; // int32
            public const nint m_bUseNormalSpawnsForDM = 0x574; // bool
            public const nint m_bDisableAutoGeneratedDMSpawns = 0x575; // bool
            public const nint m_flBotMaxVisionDistance = 0x578; // float32
            public const nint m_iHostageCount = 0x57C; // int32
            public const nint m_bFadePlayerVisibilityFarZ = 0x580; // bool
            public const nint m_bRainTraceToSkyEnabled = 0x581; // bool
        }
        // Parent: CBaseAnimGraph
        // Field count: 30
        //
        // Metadata:
        // NetworkVarNames: m_bBombTicking (bool)
        // NetworkVarNames: m_nBombSite (int)
        // NetworkVarNames: m_nSourceSoundscapeHash (int)
        // NetworkVarNames: m_entitySpottedState (EntitySpottedState_t)
        // NetworkVarNames: m_flC4Blow (GameTime_t)
        // NetworkVarNames: m_bCannotBeDefused (bool)
        // NetworkVarNames: m_bHasExploded (bool)
        // NetworkVarNames: m_flTimerLength (float)
        // NetworkVarNames: m_bBeingDefused (bool)
        // NetworkVarNames: m_flDefuseLength (float)
        // NetworkVarNames: m_flDefuseCountDown (GameTime_t)
        // NetworkVarNames: m_bBombDefused (bool)
        // NetworkVarNames: m_hBombDefuser (CHandle<CCSPlayerPawn>)
        // NetworkVarNames: m_hControlPanel (CHandle<CBaseEntity>)
        // NetworkVarNames: m_AttributeManager (CAttributeContainer)
        public static class C_PlantedC4 {
            public const nint m_bBombTicking = 0xF90; // bool
            public const nint m_nBombSite = 0xF94; // int32
            public const nint m_nSourceSoundscapeHash = 0xF98; // int32
            public const nint m_entitySpottedState = 0xFA0; // EntitySpottedState_t
            public const nint m_flNextGlow = 0xFB8; // GameTime_t
            public const nint m_flNextBeep = 0xFBC; // GameTime_t
            public const nint m_flC4Blow = 0xFC0; // GameTime_t
            public const nint m_bCannotBeDefused = 0xFC4; // bool
            public const nint m_bHasExploded = 0xFC5; // bool
            public const nint m_flTimerLength = 0xFC8; // float32
            public const nint m_bBeingDefused = 0xFCC; // bool
            public const nint m_bTriggerWarning = 0xFD0; // float32
            public const nint m_bExplodeWarning = 0xFD4; // float32
            public const nint m_bC4Activated = 0xFD8; // bool
            public const nint m_bTenSecWarning = 0xFD9; // bool
            public const nint m_flDefuseLength = 0xFDC; // float32
            public const nint m_flDefuseCountDown = 0xFE0; // GameTime_t
            public const nint m_bBombDefused = 0xFE4; // bool
            public const nint m_hBombDefuser = 0xFE8; // CHandle<C_CSPlayerPawn>
            public const nint m_hControlPanel = 0xFEC; // CHandle<C_BaseEntity>
            public const nint m_AttributeManager = 0xFF0; // C_AttributeContainer
            public const nint m_hDefuserMultimeter = 0x1498; // CHandle<C_Multimeter>
            public const nint m_flNextRadarFlashTime = 0x149C; // GameTime_t
            public const nint m_bRadarFlash = 0x14A0; // bool
            public const nint m_pBombDefuser = 0x14A4; // CHandle<C_CSPlayerPawn>
            public const nint m_fLastDefuseTime = 0x14A8; // GameTime_t
            public const nint m_pPredictionOwner = 0x14B0; // CBasePlayerController*
            public const nint m_vecC4ExplodeSpectatePos = 0x14B8; // Vector
            public const nint m_vecC4ExplodeSpectateAng = 0x14C4; // QAngle
            public const nint m_flC4ExplodeSpectateDuration = 0x14D0; // float32
        }
        // Parent: CBaseAnimGraph
        // Field count: 8
        //
        // Metadata:
        // NetworkVarNames: m_ragPos (Vector)
        // NetworkVarNames: m_ragAngles (QAngle)
        // NetworkVarNames: m_flBlendWeight (float32)
        // NetworkVarNames: m_hRagdollSource (EHANDLE)
        public static class C_RagdollProp {
            public const nint m_ragPos = 0xF90; // C_NetworkUtlVectorBase<Vector>
            public const nint m_ragAngles = 0xFA8; // C_NetworkUtlVectorBase<QAngle>
            public const nint m_flBlendWeight = 0xFC0; // float32
            public const nint m_hRagdollSource = 0xFC4; // CHandle<C_BaseEntity>
            public const nint m_iEyeAttachment = 0xFC8; // AttachmentHandle_t
            public const nint m_flBlendWeightCurrent = 0xFCC; // float32
            public const nint m_parentPhysicsBoneIndices = 0xFD0; // CUtlVector<int32>
            public const nint m_worldSpaceBoneComputationOrder = 0xFE8; // CUtlVector<int32>
        }
        // Parent: C_CSGO_TeamPreviewCamera
        // Field count: 0
        public static class C_CSGO_TerroristTeamIntroCamera {
        }
        // Parent: C_BaseEntity
        // Field count: 7
        //
        // Metadata:
        // NetworkVarNames: m_iActiveIssueIndex (int)
        // NetworkVarNames: m_iOnlyTeamToVote (int)
        // NetworkVarNames: m_nVoteOptionCount (int)
        // NetworkVarNames: m_nPotentialVotes (int)
        // NetworkVarNames: m_bIsYesNoVote (bool)
        public static class C_VoteController {
            public const nint m_iActiveIssueIndex = 0x578; // int32
            public const nint m_iOnlyTeamToVote = 0x57C; // int32
            public const nint m_nVoteOptionCount = 0x580; // int32[5]
            public const nint m_nPotentialVotes = 0x594; // int32
            public const nint m_bVotesDirty = 0x598; // bool
            public const nint m_bTypeDirty = 0x599; // bool
            public const nint m_bIsYesNoVote = 0x59A; // bool
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // NetworkVarNames: nType (FixAngleSet_t)
        // NetworkVarNames: qAngle (QAngle)
        // NetworkVarNames: nIndex (uint32)
        public static class ViewAngleServerChange_t {
            public const nint nType = 0x30; // 
            public const nint qAngle = 0x34; // QAngle
            public const nint nIndex = 0x40; // uint32
        }
        // Parent: C_DynamicProp
        // Field count: 7
        //
        // Metadata:
        // NetworkVarNames: m_jumpedThisFrame (bool)
        // NetworkVarNames: m_leader (CHandle<CCSPlayerPawn>)
        // NetworkVarNames: m_AttributeManager (CAttributeContainer)
        public static class C_Chicken {
            public const nint m_hHolidayHatAddon = 0x1230; // CHandle<CBaseAnimGraph>
            public const nint m_jumpedThisFrame = 0x1234; // bool
            public const nint m_leader = 0x1238; // CHandle<C_CSPlayerPawn>
            public const nint m_AttributeManager = 0x1240; // C_AttributeContainer
            public const nint m_bAttributesInitialized = 0x16E8; // bool
            public const nint m_hWaterWakeParticles = 0x16EC; // ParticleIndex_t
            public const nint m_bIsPreviewModel = 0x16F0; // bool
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // NetworkVarNames: m_Transforms (CTransform)
        // NetworkVarNames: m_hOwner (EHANDLE)
        public static class PhysicsRagdollPose_t {
            public const nint m_Transforms = 0x8; // C_NetworkUtlVectorBase<CTransform>
            public const nint m_hOwner = 0x20; // CHandle<C_BaseEntity>
        }
    }
}



// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: engine2.dll
    // Class count: 48
    // Enum count: 4
    public static class Engine2Dll {
        // Alignment: 4
        // Member count: 3
        public enum EntityDormancyType_t : uint {
            ENTITY_NOT_DORMANT = 0x0,
            ENTITY_DORMANT = 0x1,
            ENTITY_SUSPENDED = 0x2
        }
        // Alignment: 4
        // Member count: 4
        public enum EntityIOTargetType_t : uint {
            ENTITY_IO_TARGET_INVALID = unchecked((uint)-1),
            ENTITY_IO_TARGET_ENTITYNAME = 0x2,
            ENTITY_IO_TARGET_EHANDLE = 0x6,
            ENTITY_IO_TARGET_ENTITYNAME_OR_CLASSNAME = 0x7
        }
        // Alignment: 4
        // Member count: 3
        public enum SpawnDebugOverrideState_t : uint {
            SPAWN_DEBUG_OVERRIDE_NONE = 0x0,
            SPAWN_DEBUG_OVERRIDE_FORCE_ENABLED = 0x1,
            SPAWN_DEBUG_OVERRIDE_FORCE_DISABLED = 0x2
        }
        // Alignment: 4
        // Member count: 5
        public enum SpawnDebugRestrictionOverrideState_t : uint {
            SPAWN_DEBUG_RESTRICT_NONE = 0x0,
            SPAWN_DEBUG_RESTRICT_IGNORE_MANAGER_DISTANCE_REQS = 0x1,
            SPAWN_DEBUG_RESTRICT_IGNORE_TEMPLATE_DISTANCE_LOS_REQS = 0x2,
            SPAWN_DEBUG_RESTRICT_IGNORE_TEMPLATE_COOLDOWN_LIMITS = 0x4,
            SPAWN_DEBUG_RESTRICT_IGNORE_TARGET_COOLDOWN_LIMITS = 0x8
        }
        // Parent: EventSimulate_t
        // Field count: 0
        public static class EventClientPostSimulate_t {
        }
        // Parent: None
        // Field count: 3
        public static class EventSimpleLoopFrameUpdate_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRealTime = 0x28; // float32
            public const nint m_flFrameTime = 0x2C; // float32
        }
        // Parent: EventSimulate_t
        // Field count: 4
        public static class EventPostAdvanceTick_t {
            public const nint m_nCurrentTick = 0x30; // int32
            public const nint m_nCurrentTickThisFrame = 0x34; // int32
            public const nint m_nTotalTicksThisFrame = 0x38; // int32
            public const nint m_nTotalTicks = 0x3C; // int32
        }
        // Parent: None
        // Field count: 1
        public static class CEntityIOOutput {
            public const nint m_Value = 0x18; // CVariantBase<CVariantDefaultAllocator>
        }
        // Parent: None
        // Field count: 1
        public static class EventClientSceneSystemThreadStateChange_t {
            public const nint m_bThreadsActive = 0x0; // bool
        }
        // Parent: None
        // Field count: 5
        public static class EventClientOutput_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRenderTime = 0x28; // float32
            public const nint m_flRealTime = 0x2C; // float32
            public const nint m_flRenderFrameTimeUnbounded = 0x30; // float32
            public const nint m_bRenderOnly = 0x34; // bool
        }
        // Parent: EventSimulate_t
        // Field count: 0
        public static class EventServerPostSimulate_t {
        }
        // Parent: None
        // Field count: 4
        public static class CEntityComponentHelper {
            public const nint m_flags = 0x8; // uint32
            public const nint m_pInfo = 0x10; // EntComponentInfo_t*
            public const nint m_nPriority = 0x18; // int32
            public const nint m_pNext = 0x20; // CEntityComponentHelper*
        }
        // Parent: None
        // Field count: 1
        public static class GameTime_t {
            public const nint m_Value = 0x0; // float32
        }
        // Parent: None
        // Field count: 0
        public static class EventServerEndAsyncPostTickWork_t {
        }
        // Parent: EventAdvanceTick_t
        // Field count: 0
        public static class EventClientAdvanceTick_t {
        }
        // Parent: None
        // Field count: 0
        public static class EntInput_t {
        }
        // Parent: None
        // Field count: 1
        public static class CNetworkVarChainer {
            public const nint m_PathIndex = 0x20; // ChangeAccessorFieldPathIndex_t
        }
        // Parent: EventSimulate_t
        // Field count: 0
        public static class EventClientSimulate_t {
        }
        // Parent: None
        // Field count: 5
        public static class EventClientPostOutput_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRenderTime = 0x28; // float64
            public const nint m_flRenderFrameTime = 0x30; // float32
            public const nint m_flRenderFrameTimeUnbounded = 0x34; // float32
            public const nint m_bRenderOnly = 0x38; // bool
        }
        // Parent: None
        // Field count: 1
        public static class GameTick_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Field count: 2
        public static class EventClientPollInput_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRealTime = 0x28; // float32
        }
        // Parent: None
        // Field count: 1
        public static class EventPreDataUpdate_t {
            public const nint m_nCount = 0x0; // int32
        }
        // Parent: None
        // Field count: 3
        public static class EventClientProcessGameInput_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRealTime = 0x28; // float32
            public const nint m_flFrameTime = 0x2C; // float32
        }
        // Parent: None
        // Field count: 1
        public static class EventFrameBoundary_t {
            public const nint m_flFrameTime = 0x0; // float32
        }
        // Parent: None
        // Field count: 1
        public static class EventAppShutdown_t {
            public const nint m_nDummy0 = 0x0; // int32
        }
        // Parent: EventSimulate_t
        // Field count: 0
        public static class EventServerSimulate_t {
        }
        // Parent: EventPostAdvanceTick_t
        // Field count: 0
        public static class EventServerPostAdvanceTick_t {
        }
        // Parent: None
        // Field count: 1
        public static class EventProfileStorageAvailable_t {
            public const nint m_nSplitScreenSlot = 0x0; // CSplitScreenSlot
        }
        // Parent: None
        // Field count: 1
        public static class EventPostDataUpdate_t {
            public const nint m_nCount = 0x0; // int32
        }
        // Parent: EventSimulate_t
        // Field count: 0
        public static class EventClientPreSimulate_t {
        }
        // Parent: EventSimulate_t
        // Field count: 0
        public static class EventClientPauseSimulate_t {
        }
        // Parent: None
        // Field count: 1
        public static class EventClientProcessNetworking_t {
            public const nint m_nTickCount = 0x0; // int32
        }
        // Parent: EventSimulate_t
        // Field count: 4
        public static class EventAdvanceTick_t {
            public const nint m_nCurrentTick = 0x30; // int32
            public const nint m_nCurrentTickThisFrame = 0x34; // int32
            public const nint m_nTotalTicksThisFrame = 0x38; // int32
            public const nint m_nTotalTicks = 0x3C; // int32
        }
        // Parent: None
        // Field count: 0
        public static class EventSplitScreenStateChanged_t {
        }
        // Parent: EventPostAdvanceTick_t
        // Field count: 0
        public static class EventClientPostAdvanceTick_t {
        }
        // Parent: None
        // Field count: 0
        public static class CVariantDefaultAllocator {
        }
        // Parent: None
        // Field count: 0
        public static class EventModInitialized_t {
        }
        // Parent: None
        // Field count: 6
        public static class EventClientPreOutput_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRenderTime = 0x28; // float64
            public const nint m_flRenderFrameTime = 0x30; // float64
            public const nint m_flRenderFrameTimeUnbounded = 0x38; // float64
            public const nint m_flRealTime = 0x40; // float32
            public const nint m_bRenderOnly = 0x44; // bool
        }
        // Parent: None
        // Field count: 4
        public static class EventClientFrameSimulate_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRealTime = 0x28; // float32
            public const nint m_flFrameTime = 0x2C; // float32
            public const nint m_bScheduleSendTickPacket = 0x30; // bool
        }
        // Parent: EventAdvanceTick_t
        // Field count: 0
        public static class EventServerAdvanceTick_t {
        }
        // Parent: None
        // Field count: 8
        public static class EventSetTime_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_nClientOutputFrames = 0x28; // int32
            public const nint m_flRealTime = 0x30; // float64
            public const nint m_flRenderTime = 0x38; // float64
            public const nint m_flRenderFrameTime = 0x40; // float64
            public const nint m_flRenderFrameTimeUnbounded = 0x48; // float64
            public const nint m_flRenderFrameTimeUnscaled = 0x50; // float64
            public const nint m_flTickRemainder = 0x58; // float64
        }
        // Parent: None
        // Field count: 0
        public static class EntOutput_t {
        }
        // Parent: None
        // Field count: 3
        public static class EventSimulate_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_bFirstTick = 0x28; // bool
            public const nint m_bLastTick = 0x29; // bool
        }
        // Parent: None
        // Field count: 0
        public static class EventClientAdvanceNonRenderedFrame_t {
        }
        // Parent: EventSimulate_t
        // Field count: 0
        public static class EventServerProcessNetworking_t {
        }
        // Parent: None
        // Field count: 0
        public static class CEmptyEntityInstance {
        }
        // Parent: None
        // Field count: 7
        public static class EntComponentInfo_t {
            public const nint m_pName = 0x0; // char*
            public const nint m_pCPPClassname = 0x8; // char*
            public const nint m_pNetworkDataReferencedDescription = 0x10; // char*
            public const nint m_pNetworkDataReferencedPtrPropDescription = 0x18; // char*
            public const nint m_nRuntimeIndex = 0x20; // int32
            public const nint m_nFlags = 0x24; // uint32
            public const nint m_pBaseClassComponentHelper = 0x60; // CEntityComponentHelper*
        }
        // Parent: None
        // Field count: 4
        public static class EngineLoopState_t {
            public const nint m_nPlatWindowWidth = 0x18; // int32
            public const nint m_nPlatWindowHeight = 0x1C; // int32
            public const nint m_nRenderWidth = 0x20; // int32
            public const nint m_nRenderHeight = 0x24; // int32
        }
        // Parent: None
        // Field count: 1
        public static class EventClientPollNetworking_t {
            public const nint m_nTickCount = 0x0; // int32
        }
        // Parent: EventPostAdvanceTick_t
        // Field count: 0
        public static class EventServerBeginAsyncPostTickWork_t {
        }
        // Parent: None
        // Field count: 4
        public static class EventClientProcessInput_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRealTime = 0x28; // float32
            public const nint m_flTickInterval = 0x2C; // float32
            public const nint m_flTickStartTime = 0x30; // float64
        }
        // Parent: EventSimulate_t
        // Field count: 0
        public static class EventServerPollNetworking_t {
        }
    }
}


// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: host.dll
    // Class count: 2
    // Enum count: 0
    public static class HostDll {
        // Parent: CAnimScriptBase
        // Field count: 1
        public static class EmptyTestScript {
            public const nint m_hTest = 0x10; // CAnimScriptParam<float32>
        }
        // Parent: None
        // Field count: 1
        public static class CAnimScriptBase {
            public const nint m_bIsValid = 0x8; // bool
        }
    }
}




// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Interfaces {
    // Module: animationsystem.dll
    public static class AnimationsystemDll {
        public const nint AnimationSystemUtils_001 = 0x60FE08;
        public const nint AnimationSystem_001 = 0x607D30;
    }
    // Module: client.dll
    public static class ClientDll {
        public const nint ClientToolsInfo_001 = 0x1881D10;
        public const nint EmptyWorldService001_Client = 0x183D030;
        public const nint GameClientExports001 = 0x187E9C8;
        public const nint LegacyGameUI001 = 0x189F570;
        public const nint Source2Client002 = 0x1A9AE20;
        public const nint Source2ClientConfig001 = 0x1A315B0;
        public const nint Source2ClientPrediction001 = 0x1889DA0;
        public const nint Source2ClientUI001 = 0x189D940;
    }
    // Module: engine2.dll
    public static class Engine2Dll {
        public const nint BenchmarkService001 = 0x546D30;
        public const nint BugService001 = 0x5DFCC0;
        public const nint ClientServerEngineLoopService_001 = 0x547A50;
        public const nint EngineGameUI001 = 0x544B90;
        public const nint EngineServiceMgr001 = 0x620B50;
        public const nint GameEventSystemClientV001 = 0x620E70;
        public const nint GameEventSystemServerV001 = 0x620FB0;
        public const nint GameResourceServiceClientV001 = 0x546E30;
        public const nint GameResourceServiceServerV001 = 0x546E90;
        public const nint GameUIService_001 = 0x5DFFC0;
        public const nint HostStateMgr001 = 0x547940;
        public const nint INETSUPPORT_001 = 0x540060;
        public const nint InputService_001 = 0x5E02D0;
        public const nint KeyValueCache001 = 0x5479F0;
        public const nint MapListService_001 = 0x61F2D0;
        public const nint NetworkClientService_001 = 0x61F460;
        public const nint NetworkP2PService_001 = 0x547140;
        public const nint NetworkServerService_001 = 0x61F7F0;
        public const nint NetworkService_001 = 0x547290;
        public const nint RenderService_001 = 0x61FA50;
        public const nint ScreenshotService001 = 0x61FCF0;
        public const nint SimpleEngineLoopService_001 = 0x547B60;
        public const nint SoundService_001 = 0x5472D0;
        public const nint Source2EngineToClient001 = 0x544210;
        public const nint Source2EngineToClientStringTable001 = 0x544270;
        public const nint Source2EngineToServer001 = 0x544308;
        public const nint Source2EngineToServerStringTable001 = 0x544330;
        public const nint SplitScreenService_001 = 0x5475B0;
        public const nint StatsService_001 = 0x620120;
        public const nint ToolService_001 = 0x547770;
        public const nint VENGINE_GAMEUIFUNCS_VERSION005 = 0x544C20;
        public const nint VProfService_001 = 0x5477B0;
    }
    // Module: filesystem_stdio.dll
    public static class FilesystemStdioDll {
        public const nint VAsyncFileSystem2_001 = 0x20C590;
        public const nint VFileSystem017 = 0x211840;
    }
    // Module: host.dll
    public static class HostDll {
        public const nint DebugDrawQueueManager001 = 0x136FE0;
        public const nint GameModelInfo001 = 0x137020;
        public const nint GameSystem2HostHook = 0x137060;
        public const nint HostUtils001 = 0x137090;
        public const nint PredictionDiffManager001 = 0x1372E0;
        public const nint SaveRestoreDataVersion001 = 0x137410;
        public const nint SinglePlayerSharedMemory001 = 0x137440;
        public const nint Source2Host001 = 0x1374B0;
    }
    // Module: imemanager.dll
    public static class ImemanagerDll {
        public const nint IMEManager001 = 0x2EA50;
    }
    // Module: inputsystem.dll
    public static class InputsystemDll {
        public const nint InputStackSystemVersion001 = 0x36B70;
        public const nint InputSystemVersion001 = 0x387E0;
    }
    // Module: localize.dll
    public static class LocalizeDll {
        public const nint Localize_001 = 0x3AAD0;
    }
    // Module: matchmaking.dll
    public static class MatchmakingDll {
        public const nint GameTypes001 = 0x1A3190;
        public const nint MATCHFRAMEWORK_001 = 0x1AB360;
    }
    // Module: materialsystem2.dll
    public static class Materialsystem2Dll {
        public const nint FontManager_001 = 0x114330;
        public const nint MaterialUtils_001 = 0x10F4C0;
        public const nint PostProcessingSystem_001 = 0x10F3D0;
        public const nint TextLayout_001 = 0x10F450;
        public const nint VMaterialSystem2_001 = 0x113910;
    }
    // Module: meshsystem.dll
    public static class MeshsystemDll {
        public const nint MeshSystem001 = 0x19D600;
    }
    // Module: navsystem.dll
    public static class NavsystemDll {
        public const nint NavSystem001 = 0xFB730;
    }
    // Module: networksystem.dll
    public static class NetworksystemDll {
        public const nint FlattenedSerializersVersion001 = 0x244570;
        public const nint NetworkMessagesVersion001 = 0x2765E0;
        public const nint NetworkSystemVersion001 = 0x26E300;
        public const nint SerializedEntitiesVersion001 = 0x26E3F0;
    }
    // Module: panorama.dll
    public static class PanoramaDll {
        public const nint PanoramaUIEngine001 = 0x4E9250;
    }
    // Module: panorama_text_pango.dll
    public static class PanoramaTextPangoDll {
        public const nint PanoramaTextServices001 = 0x2B38E0;
    }
    // Module: panoramauiclient.dll
    public static class PanoramauiclientDll {
        public const nint PanoramaUIClient001 = 0x28D840;
    }
    // Module: particles.dll
    public static class ParticlesDll {
        public const nint ParticleSystemMgr003 = 0x629CD0;
    }
    // Module: pulse_system.dll
    public static class PulseSystemDll {
        public const nint IPulseSystem_001 = 0x17D990;
    }
    // Module: rendersystemdx11.dll
    public static class Rendersystemdx11Dll {
        public const nint RenderDeviceMgr001 = 0x3EE1F0;
        public const nint RenderUtils_001 = 0x3EEA58;
        public const nint VRenderDeviceMgrBackdoor001 = 0x3EE290;
    }
    // Module: resourcesystem.dll
    public static class ResourcesystemDll {
        public const nint ResourceSystem013 = 0x72A40;
    }
    // Module: scenefilecache.dll
    public static class ScenefilecacheDll {
        public const nint ResponseRulesCache001 = 0x720F0;
        public const nint SceneFileCache002 = 0x72260;
    }
    // Module: scenesystem.dll
    public static class ScenesystemDll {
        public const nint RenderingPipelines_001 = 0x5CEB10;
        public const nint SceneSystem_002 = 0x7ADFF0;
        public const nint SceneUtils_001 = 0x5CF360;
    }
    // Module: schemasystem.dll
    public static class SchemasystemDll {
        public const nint SchemaSystem_001 = 0x616E0;
    }
    // Module: server.dll
    public static class ServerDll {
        public const nint EmptyWorldService001_Server = 0x137DD20;
        public const nint EntitySubclassUtilsV001 = 0x132E400;
        public const nint NavGameTest001 = 0x141DD68;
        public const nint ServerToolsInfo_001 = 0x13D36C8;
        public const nint Source2GameClients001 = 0x13CD590;
        public const nint Source2GameDirector001 = 0x1501420;
        public const nint Source2GameEntities001 = 0x13D35F0;
        public const nint Source2Server001 = 0x13D3460;
        public const nint Source2ServerConfig001 = 0x15CBD98;
        public const nint customnavsystem001 = 0x1312B58;
    }
    // Module: soundsystem.dll
    public static class SoundsystemDll {
        public const nint SoundOpSystem001 = 0x39EC40;
        public const nint SoundOpSystemEdit001 = 0x39EB10;
        public const nint SoundSystem001 = 0x39E5E0;
        public const nint VMixEditTool001 = 0x48289C6A;
    }
    // Module: steamaudio.dll
    public static class SteamaudioDll {
        public const nint SteamAudio001 = 0x2139F0;
    }
    // Module: steamclient64.dll
    public static class Steamclient64Dll {
        public static readonly nint CLIENTENGINE_INTERFACE_VERSION005 = unchecked((nint)0xFFFFFFFF8BAF74EA);
        public const nint IVALIDATE001 = 0x14A3108;
        public const nint SteamClient006 = 0x14A0860;
        public const nint SteamClient007 = 0x14A0868;
        public const nint SteamClient008 = 0x14A0870;
        public const nint SteamClient009 = 0x14A0878;
        public const nint SteamClient010 = 0x14A0880;
        public const nint SteamClient011 = 0x14A0888;
        public const nint SteamClient012 = 0x14A0890;
        public const nint SteamClient013 = 0x14A0898;
        public const nint SteamClient014 = 0x14A08A0;
        public const nint SteamClient015 = 0x14A08A8;
        public const nint SteamClient016 = 0x14A08B0;
        public const nint SteamClient017 = 0x14A08B8;
        public const nint SteamClient018 = 0x14A08C0;
        public const nint SteamClient019 = 0x14A08C8;
        public const nint SteamClient020 = 0x14A08D0;
        public const nint SteamClient021 = 0x14A08D8;
        public const nint p2pvoice002 = 0x14E273F;
        public const nint p2pvoicesingleton002 = 0x147E0E0;
    }
    // Module: tier0.dll
    public static class Tier0Dll {
        public const nint TestScriptMgr001 = 0x37FA70;
        public const nint VEngineCvar007 = 0x38E4B0;
        public const nint VProcessUtils002 = 0x37F980;
        public const nint VStringTokenSystem001 = 0x3A6F00;
    }
    // Module: v8system.dll
    public static class V8systemDll {
        public const nint Source2V8System001 = 0x2C480;
    }
    // Module: vphysics2.dll
    public static class Vphysics2Dll {
        public const nint VPhysics2_Handle_Interface_001 = 0x391F50;
        public const nint VPhysics2_Interface_001 = 0x391F90;
    }
    // Module: vscript.dll
    public static class VscriptDll {
        public const nint VScriptManager010 = 0x128600;
    }
    // Module: vstdlib_s64.dll
    public static class VstdlibS64Dll {
        public const nint IVALIDATE001 = 0x6A990;
        public const nint VEngineCvar002 = 0x69070;
    }
    // Module: worldrenderer.dll
    public static class WorldrendererDll {
        public const nint WorldRendererMgr001 = 0x161D80;
    }
}





// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: materialsystem2.dll
    // Class count: 13
    // Enum count: 5
    public static class Materialsystem2Dll {
        // Alignment: 4
        // Member count: 4
        public enum VertJustification_e : uint {
            VERT_JUSTIFICATION_TOP = 0x0,
            VERT_JUSTIFICATION_CENTER = 0x1,
            VERT_JUSTIFICATION_BOTTOM = 0x2,
            VERT_JUSTIFICATION_NONE = 0x3
        }
        // Alignment: 4
        // Member count: 3
        public enum LayoutPositionType_e : uint {
            LAYOUTPOSITIONTYPE_VIEWPORT_RELATIVE = 0x0,
            LAYOUTPOSITIONTYPE_FRACTIONAL = 0x1,
            LAYOUTPOSITIONTYPE_NONE = 0x2
        }
        // Alignment: 4
        // Member count: 3
        public enum ViewFadeMode_t : uint {
            VIEW_FADE_CONSTANT_COLOR = 0x0,
            VIEW_FADE_MODULATE = 0x1,
            VIEW_FADE_MOD2X = 0x2
        }
        // Alignment: 4
        // Member count: 3
        public enum BloomBlendMode_t : uint {
            BLOOM_BLEND_ADD = 0x0,
            BLOOM_BLEND_SCREEN = 0x1,
            BLOOM_BLEND_BLUR = 0x2
        }
        // Alignment: 4
        // Member count: 4
        public enum HorizJustification_e : uint {
            HORIZ_JUSTIFICATION_LEFT = 0x0,
            HORIZ_JUSTIFICATION_CENTER = 0x1,
            HORIZ_JUSTIFICATION_RIGHT = 0x2,
            HORIZ_JUSTIFICATION_NONE = 0x3
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class MaterialParam_t {
            public const nint m_name = 0x0; // CUtlString
        }
        // Parent: MaterialParam_t
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class MaterialParamVector_t {
            public const nint m_value = 0x8; // Vector4D
        }
        // Parent: MaterialParam_t
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class MaterialParamString_t {
            public const nint m_value = 0x8; // CUtlString
        }
        // Parent: None
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PostProcessingResource_t {
            public const nint m_bHasTonemapParams = 0x0; // bool
            public const nint m_toneMapParams = 0x4; // PostProcessingTonemapParameters_t
            public const nint m_bHasBloomParams = 0x40; // bool
            public const nint m_bloomParams = 0x44; // PostProcessingBloomParameters_t
            public const nint m_bHasVignetteParams = 0xB4; // bool
            public const nint m_vignetteParams = 0xB8; // PostProcessingVignetteParameters_t
            public const nint m_bHasLocalContrastParams = 0xDC; // bool
            public const nint m_localConstrastParams = 0xE0; // PostProcessingLocalContrastParameters_t
            public const nint m_nColorCorrectionVolumeDim = 0xF4; // int32
            public const nint m_colorCorrectionVolumeData = 0xF8; // CUtlBinaryBlock
            public const nint m_bHasColorCorrection = 0x110; // bool
        }
        // Parent: MaterialParam_t
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class MaterialParamInt_t {
            public const nint m_nValue = 0x8; // int32
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PostProcessingVignetteParameters_t {
            public const nint m_flVignetteStrength = 0x0; // float32
            public const nint m_vCenter = 0x4; // Vector2D
            public const nint m_flRadius = 0xC; // float32
            public const nint m_flRoundness = 0x10; // float32
            public const nint m_flFeather = 0x14; // float32
            public const nint m_vColorTint = 0x18; // Vector
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PostProcessingLocalContrastParameters_t {
            public const nint m_flLocalContrastStrength = 0x0; // float32
            public const nint m_flLocalContrastEdgeStrength = 0x4; // float32
            public const nint m_flLocalContrastVignetteStart = 0x8; // float32
            public const nint m_flLocalContrastVignetteEnd = 0xC; // float32
            public const nint m_flLocalContrastVignetteBlur = 0x10; // float32
        }
        // Parent: None
        // Field count: 15
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PostProcessingTonemapParameters_t {
            public const nint m_flExposureBias = 0x0; // float32
            public const nint m_flShoulderStrength = 0x4; // float32
            public const nint m_flLinearStrength = 0x8; // float32
            public const nint m_flLinearAngle = 0xC; // float32
            public const nint m_flToeStrength = 0x10; // float32
            public const nint m_flToeNum = 0x14; // float32
            public const nint m_flToeDenom = 0x18; // float32
            public const nint m_flWhitePoint = 0x1C; // float32
            public const nint m_flLuminanceSource = 0x20; // float32
            public const nint m_flExposureBiasShadows = 0x24; // float32
            public const nint m_flExposureBiasHighlights = 0x28; // float32
            public const nint m_flMinShadowLum = 0x2C; // float32
            public const nint m_flMaxShadowLum = 0x30; // float32
            public const nint m_flMinHighlightLum = 0x34; // float32
            public const nint m_flMaxHighlightLum = 0x38; // float32
        }
        // Parent: MaterialParam_t
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class MaterialParamBuffer_t {
            public const nint m_value = 0x8; // CUtlBinaryBlock
        }
        // Parent: None
        // Field count: 14
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class MaterialResourceData_t {
            public const nint m_materialName = 0x0; // CUtlString
            public const nint m_shaderName = 0x8; // CUtlString
            public const nint m_intParams = 0x10; // CUtlVector<MaterialParamInt_t>
            public const nint m_floatParams = 0x28; // CUtlVector<MaterialParamFloat_t>
            public const nint m_vectorParams = 0x40; // CUtlVector<MaterialParamVector_t>
            public const nint m_textureParams = 0x58; // CUtlVector<MaterialParamTexture_t>
            public const nint m_dynamicParams = 0x70; // CUtlVector<MaterialParamBuffer_t>
            public const nint m_dynamicTextureParams = 0x88; // CUtlVector<MaterialParamBuffer_t>
            public const nint m_intAttributes = 0xA0; // CUtlVector<MaterialParamInt_t>
            public const nint m_floatAttributes = 0xB8; // CUtlVector<MaterialParamFloat_t>
            public const nint m_vectorAttributes = 0xD0; // CUtlVector<MaterialParamVector_t>
            public const nint m_textureAttributes = 0xE8; // CUtlVector<MaterialParamTexture_t>
            public const nint m_stringAttributes = 0x100; // CUtlVector<MaterialParamString_t>
            public const nint m_renderAttributesUsed = 0x118; // CUtlVector<CUtlString>
        }
        // Parent: None
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PostProcessingBloomParameters_t {
            public const nint m_blendMode = 0x0; // BloomBlendMode_t
            public const nint m_flBloomStrength = 0x4; // float32
            public const nint m_flScreenBloomStrength = 0x8; // float32
            public const nint m_flBlurBloomStrength = 0xC; // float32
            public const nint m_flBloomThreshold = 0x10; // float32
            public const nint m_flBloomThresholdWidth = 0x14; // float32
            public const nint m_flSkyboxBloomStrength = 0x18; // float32
            public const nint m_flBloomStartValue = 0x1C; // float32
            public const nint m_flBlurWeight = 0x20; // float32[5]
            public const nint m_vBlurTint = 0x34; // Vector[5]
        }
        // Parent: MaterialParam_t
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class MaterialParamFloat_t {
            public const nint m_flValue = 0x8; // float32
        }
        // Parent: MaterialParam_t
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class MaterialParamTexture_t {
            public const nint m_pValue = 0x8; // 
        }
    }
}




// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: networksystem.dll
    // Class count: 1
    // Enum count: 0
    public static class NetworksystemDll {
        // Parent: None
        // Field count: 1
        public static class ChangeAccessorFieldPathIndex_t {
            public const nint m_Value = 0x0; // int32
        }
    }
}



// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Offsets {
    // Module: client.dll
    public static class ClientDll {
        public const nint dwCSGOInput = 0x1AAB670;
        public const nint dwEntityList = 0x1A359B0;
        public const nint dwGameEntitySystem = 0x1B5C6C8;
        public const nint dwGameEntitySystem_highestEntityIndex = 0x20F0;
        public const nint dwGameRules = 0x1A9C7F0;
        public const nint dwGlobalVars = 0x187DC80;
        public const nint dwGlowManager = 0x1A9C810;
        public const nint dwLocalPlayerController = 0x1A87030;
        public const nint dwLocalPlayerPawn = 0x1889F20;
        public const nint dwPlantedC4 = 0x1AA6840;
        public const nint dwPrediction = 0x1889DA0;
        public const nint dwSensitivity = 0x1A9DF58;
        public const nint dwSensitivity_sensitivity = 0x40;
        public const nint dwViewAngles = 0x1AABA40;
        public const nint dwViewMatrix = 0x1AA17B0;
        public const nint dwViewRender = 0x1AA1FC0;
        public const nint dwWeaponC4 = 0x1A39C20;
    }
    // Module: engine2.dll
    public static class Engine2Dll {
        public const nint dwBuildNumber = 0x540BE4;
        public const nint dwNetworkGameClient = 0x53FCE0;
        public const nint dwNetworkGameClient_clientTickCount = 0x368;
        public const nint dwNetworkGameClient_deltaTick = 0x27C;
        public const nint dwNetworkGameClient_isBackgroundMap = 0x281447;
        public const nint dwNetworkGameClient_localPlayer = 0xF0;
        public const nint dwNetworkGameClient_maxClients = 0x238;
        public const nint dwNetworkGameClient_serverTickCount = 0x36C;
        public const nint dwNetworkGameClient_signOnState = 0x228;
        public const nint dwWindowHeight = 0x623504;
        public const nint dwWindowWidth = 0x623500;
    }
    // Module: inputsystem.dll
    public static class InputsystemDll {
        public const nint dwInputSystem = 0x387E0;
    }
    // Module: matchmaking.dll
    public static class MatchmakingDll {
        public const nint dwGameTypes = 0x1A3190;
        public const nint dwGameTypes_mapName = 0x120;
    }
    // Module: soundsystem.dll
    public static class SoundsystemDll {
        public const nint dwSoundSystem = 0x39E5E0;
        public const nint dwSoundSystem_engineViewData = 0x7C;
    }
}





// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: panorama.dll
    // Class count: 0
    // Enum count: 2
    public static class PanoramaDll {
        // Alignment: 4
        // Member count: 13
        public enum ELayoutNodeType : uint {
            ROOT = 0x0,
            STYLES = 0x1,
            SCRIPT_BODY = 0x2,
            SCRIPTS = 0x3,
            SNIPPETS = 0x4,
            INCLUDE = 0x5,
            SNIPPET = 0x6,
            PANEL = 0x7,
            PANEL_ATTRIBUTE = 0x8,
            PANEL_ATTRIBUTE_VALUE = 0x9,
            REFERENCE_CONTENT = 0xA,
            REFERENCE_COMPILED = 0xB,
            REFERENCE_PASSTHROUGH = 0xC
        }
        // Alignment: 4
        // Member count: 16
        public enum EStyleNodeType : uint {
            ROOT = 0x0,
            EXPRESSION = 0x1,
            PROPERTY = 0x2,
            DEFINE = 0x3,
            IMPORT = 0x4,
            KEYFRAMES = 0x5,
            KEYFRAME_SELECTOR = 0x6,
            STYLE_SELECTOR = 0x7,
            WHITESPACE = 0x8,
            EXPRESSION_TEXT = 0x9,
            EXPRESSION_URL = 0xA,
            EXPRESSION_CONCAT = 0xB,
            REFERENCE_CONTENT = 0xC,
            REFERENCE_COMPILED = 0xD,
            REFERENCE_PASSTHROUGH = 0xE,
            COMPILER_CONDITIONAL = 0xF
        }
    }
}




// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: particles.dll
    // Class count: 446
    // Enum count: 77
    public static class ParticlesDll {
        // Alignment: 4
        // Member count: 6
        public enum ParticleSetMethod_t : uint {
            PARTICLE_SET_REPLACE_VALUE = 0x0,
            PARTICLE_SET_SCALE_INITIAL_VALUE = 0x1,
            PARTICLE_SET_ADD_TO_INITIAL_VALUE = 0x2,
            PARTICLE_SET_RAMP_CURRENT_VALUE = 0x3,
            PARTICLE_SET_SCALE_CURRENT_VALUE = 0x4,
            PARTICLE_SET_ADD_TO_CURRENT_VALUE = 0x5
        }
        // Alignment: 4
        // Member count: 7
        public enum Detail2Combo_t : uint {
            DETAIL_2_COMBO_UNINITIALIZED = unchecked((uint)-1),
            DETAIL_2_COMBO_OFF = 0x0,
            DETAIL_2_COMBO_ADD = 0x1,
            DETAIL_2_COMBO_ADD_SELF_ILLUM = 0x2,
            DETAIL_2_COMBO_MOD2X = 0x3,
            DETAIL_2_COMBO_MUL = 0x4,
            DETAIL_2_COMBO_CROSSFADE = 0x5
        }
        // Alignment: 4
        // Member count: 4
        public enum MissingParentInheritBehavior_t : uint {
            MISSING_PARENT_DO_NOTHING = unchecked((uint)-1),
            MISSING_PARENT_KILL = 0x0,
            MISSING_PARENT_FIND_NEW = 0x1,
            MISSING_PARENT_SAME_INDEX = 0x2
        }
        // Alignment: 4
        // Member count: 5
        public enum ParticleFloatBiasType_t : uint {
            PF_BIAS_TYPE_INVALID = unchecked((uint)-1),
            PF_BIAS_TYPE_STANDARD = 0x0,
            PF_BIAS_TYPE_GAIN = 0x1,
            PF_BIAS_TYPE_EXPONENTIAL = 0x2,
            PF_BIAS_TYPE_COUNT = 0x3
        }
        // Alignment: 4
        // Member count: 3
        public enum ParticleTraceMissBehavior_t : uint {
            PARTICLE_TRACE_MISS_BEHAVIOR_NONE = 0x0,
            PARTICLE_TRACE_MISS_BEHAVIOR_KILL = 0x1,
            PARTICLE_TRACE_MISS_BEHAVIOR_TRACE_END = 0x2
        }
        // Alignment: 4
        // Member count: 7
        public enum PFuncVisualizationType_t : uint {
            PFUNC_VISUALIZATION_SPHERE_WIREFRAME = 0x0,
            PFUNC_VISUALIZATION_SPHERE_SOLID = 0x1,
            PFUNC_VISUALIZATION_BOX = 0x2,
            PFUNC_VISUALIZATION_RING = 0x3,
            PFUNC_VISUALIZATION_PLANE = 0x4,
            PFUNC_VISUALIZATION_LINE = 0x5,
            PFUNC_VISUALIZATION_CYLINDER = 0x6
        }
        // Alignment: 4
        // Member count: 4
        public enum ParticleVRHandChoiceList_t : uint {
            PARTICLE_VRHAND_LEFT = 0x0,
            PARTICLE_VRHAND_RIGHT = 0x1,
            PARTICLE_VRHAND_CP = 0x2,
            PARTICLE_VRHAND_CP_OBJECT = 0x3
        }
        // Alignment: 4
        // Member count: 2
        public enum ParticleReplicationMode_t : uint {
            PARTICLE_REPLICATIONMODE_NONE = 0x0,
            PARTICLE_REPLICATIONMODE_REPLICATE_FOR_EACH_PARENT_PARTICLE = 0x1
        }
        // Alignment: 4
        // Member count: 3
        public enum PetGroundType_t : uint {
            PET_GROUND_NONE = 0x0,
            PET_GROUND_GRID = 0x1,
            PET_GROUND_PLANE = 0x2
        }
        // Alignment: 4
        // Member count: 3
        public enum InheritableBoolType_t : uint {
            INHERITABLE_BOOL_INHERIT = 0x0,
            INHERITABLE_BOOL_FALSE = 0x1,
            INHERITABLE_BOOL_TRUE = 0x2
        }
        // Alignment: 4
        // Member count: 24
        public enum ParticleFloatType_t : uint {
            PF_TYPE_INVALID = unchecked((uint)-1),
            PF_TYPE_LITERAL = 0x0,
            PF_TYPE_NAMED_VALUE = 0x1,
            PF_TYPE_RANDOM_UNIFORM = 0x2,
            PF_TYPE_RANDOM_BIASED = 0x3,
            PF_TYPE_COLLECTION_AGE = 0x4,
            PF_TYPE_ENDCAP_AGE = 0x5,
            PF_TYPE_CONTROL_POINT_COMPONENT = 0x6,
            PF_TYPE_CONTROL_POINT_CHANGE_AGE = 0x7,
            PF_TYPE_CONTROL_POINT_SPEED = 0x8,
            PF_TYPE_PARTICLE_DETAIL_LEVEL = 0x9,
            PF_TYPE_CONCURRENT_DEF_COUNT = 0xA,
            PF_TYPE_CLOSEST_CAMERA_DISTANCE = 0xB,
            PF_TYPE_RENDERER_CAMERA_DISTANCE = 0xC,
            PF_TYPE_RENDERER_CAMERA_DOT_PRODUCT = 0xD,
            PF_TYPE_PARTICLE_NOISE = 0xE,
            PF_TYPE_PARTICLE_AGE = 0xF,
            PF_TYPE_PARTICLE_AGE_NORMALIZED = 0x10,
            PF_TYPE_PARTICLE_FLOAT = 0x11,
            PF_TYPE_PARTICLE_VECTOR_COMPONENT = 0x12,
            PF_TYPE_PARTICLE_SPEED = 0x13,
            PF_TYPE_PARTICLE_NUMBER = 0x14,
            PF_TYPE_PARTICLE_NUMBER_NORMALIZED = 0x15,
            PF_TYPE_COUNT = 0x16
        }
        // Alignment: 4
        // Member count: 6
        public enum ParticlePostProcessPriorityGroup_t : uint {
            PARTICLE_POST_PROCESS_PRIORITY_LEVEL_VOLUME = 0x0,
            PARTICLE_POST_PROCESS_PRIORITY_LEVEL_OVERRIDE = 0x1,
            PARTICLE_POST_PROCESS_PRIORITY_GAMEPLAY_EFFECT = 0x2,
            PARTICLE_POST_PROCESS_PRIORITY_GAMEPLAY_STATE_LOW = 0x3,
            PARTICLE_POST_PROCESS_PRIORITY_GAMEPLAY_STATE_HIGH = 0x4,
            PARTICLE_POST_PROCESS_PRIORITY_GLOBAL_UI = 0x5
        }
        // Alignment: 4
        // Member count: 6
        public enum PFNoiseTurbulence_t : uint {
            PF_NOISE_TURB_NONE = 0x0,
            PF_NOISE_TURB_HIGHLIGHT = 0x1,
            PF_NOISE_TURB_FEEDBACK = 0x2,
            PF_NOISE_TURB_LOOPY = 0x3,
            PF_NOISE_TURB_CONTRAST = 0x4,
            PF_NOISE_TURB_ALTERNATE = 0x5
        }
        // Alignment: 4
        // Member count: 5
        public enum ParticleColorBlendMode_t : uint {
            PARTICLEBLEND_DEFAULT = 0x0,
            PARTICLEBLEND_OVERLAY = 0x1,
            PARTICLEBLEND_DARKEN = 0x2,
            PARTICLEBLEND_LIGHTEN = 0x3,
            PARTICLEBLEND_MULTIPLY = 0x4
        }
        // Alignment: 4
        // Member count: 13
        public enum ParticleColorBlendType_t : uint {
            PARTICLE_COLOR_BLEND_MULTIPLY = 0x0,
            PARTICLE_COLOR_BLEND_MULTIPLY2X = 0x1,
            PARTICLE_COLOR_BLEND_DIVIDE = 0x2,
            PARTICLE_COLOR_BLEND_ADD = 0x3,
            PARTICLE_COLOR_BLEND_SUBTRACT = 0x4,
            PARTICLE_COLOR_BLEND_MOD2X = 0x5,
            PARTICLE_COLOR_BLEND_SCREEN = 0x6,
            PARTICLE_COLOR_BLEND_MAX = 0x7,
            PARTICLE_COLOR_BLEND_MIN = 0x8,
            PARTICLE_COLOR_BLEND_REPLACE = 0x9,
            PARTICLE_COLOR_BLEND_AVERAGE = 0xA,
            PARTICLE_COLOR_BLEND_NEGATE = 0xB,
            PARTICLE_COLOR_BLEND_LUMINANCE = 0xC
        }
        // Alignment: 4
        // Member count: 4
        public enum DetailCombo_t : uint {
            DETAIL_COMBO_OFF = 0x0,
            DETAIL_COMBO_ADD = 0x1,
            DETAIL_COMBO_ADD_SELF_ILLUM = 0x2,
            DETAIL_COMBO_MOD2X = 0x3
        }
        // Alignment: 4
        // Member count: 9
        public enum ScalarExpressionType_t : uint {
            SCALAR_EXPRESSION_UNINITIALIZED = unchecked((uint)-1),
            SCALAR_EXPRESSION_ADD = 0x0,
            SCALAR_EXPRESSION_SUBTRACT = 0x1,
            SCALAR_EXPRESSION_MUL = 0x2,
            SCALAR_EXPRESSION_DIVIDE = 0x3,
            SCALAR_EXPRESSION_INPUT_1 = 0x4,
            SCALAR_EXPRESSION_MIN = 0x5,
            SCALAR_EXPRESSION_MAX = 0x6,
            SCALAR_EXPRESSION_MOD = 0x7
        }
        // Alignment: 4
        // Member count: 14
        public enum SpriteCardPerParticleScale_t : uint {
            SPRITECARD_TEXTURE_PP_SCALE_NONE = 0x0,
            SPRITECARD_TEXTURE_PP_SCALE_PARTICLE_AGE = 0x1,
            SPRITECARD_TEXTURE_PP_SCALE_ANIMATION_FRAME = 0x2,
            SPRITECARD_TEXTURE_PP_SCALE_SHADER_EXTRA_DATA1 = 0x3,
            SPRITECARD_TEXTURE_PP_SCALE_SHADER_EXTRA_DATA2 = 0x4,
            SPRITECARD_TEXTURE_PP_SCALE_PARTICLE_ALPHA = 0x5,
            SPRITECARD_TEXTURE_PP_SCALE_SHADER_RADIUS = 0x6,
            SPRITECARD_TEXTURE_PP_SCALE_ROLL = 0x7,
            SPRITECARD_TEXTURE_PP_SCALE_YAW = 0x8,
            SPRITECARD_TEXTURE_PP_SCALE_PITCH = 0x9,
            SPRITECARD_TEXTURE_PP_SCALE_RANDOM = 0xA,
            SPRITECARD_TEXTURE_PP_SCALE_NEG_RANDOM = 0xB,
            SPRITECARD_TEXTURE_PP_SCALE_RANDOM_TIME = 0xC,
            SPRITECARD_TEXTURE_PP_SCALE_NEG_RANDOM_TIME = 0xD
        }
        // Alignment: 4
        // Member count: 2
        public enum BlurFilterType_t : uint {
            BLURFILTER_GAUSSIAN = 0x0,
            BLURFILTER_BOX = 0x1
        }
        // Alignment: 4
        // Member count: 2
        public enum StandardLightingAttenuationStyle_t : uint {
            LIGHT_STYLE_OLD = 0x0,
            LIGHT_STYLE_NEW = 0x1
        }
        // Alignment: 4
        // Member count: 3
        public enum ParticleParentSetMode_t : uint {
            PARTICLE_SET_PARENT_NO = 0x0,
            PARTICLE_SET_PARENT_IMMEDIATE = 0x1,
            PARTICLE_SET_PARENT_ROOT = 0x1
        }
        // Alignment: 4
        // Member count: 5
        public enum ParticleModelType_t : uint {
            PM_TYPE_INVALID = 0x0,
            PM_TYPE_NAMED_VALUE_MODEL = 0x1,
            PM_TYPE_NAMED_VALUE_EHANDLE = 0x2,
            PM_TYPE_CONTROL_POINT = 0x3,
            PM_TYPE_COUNT = 0x4
        }
        // Alignment: 4
        // Member count: 3
        public enum ParticleLightingQuality_t : uint {
            PARTICLE_LIGHTING_PER_PARTICLE = 0x0,
            PARTICLE_LIGHTING_PER_VERTEX = 0x1,
            PARTICLE_LIGHTING_PER_PIXEL = unchecked((uint)-1)
        }
        // Alignment: 4
        // Member count: 5
        public enum ParticleFloatRoundType_t : uint {
            PF_ROUND_TYPE_INVALID = unchecked((uint)-1),
            PF_ROUND_TYPE_NEAREST = 0x0,
            PF_ROUND_TYPE_FLOOR = 0x1,
            PF_ROUND_TYPE_CEIL = 0x2,
            PF_ROUND_TYPE_COUNT = 0x3
        }
        // Alignment: 4
        // Member count: 4
        public enum PFNoiseType_t : uint {
            PF_NOISE_TYPE_PERLIN = 0x0,
            PF_NOISE_TYPE_SIMPLEX = 0x1,
            PF_NOISE_TYPE_WORLEY = 0x2,
            PF_NOISE_TYPE_CURL = 0x3
        }
        // Alignment: 4
        // Member count: 11
        public enum EventTypeSelection_t : uint {
            PARTICLE_EVENT_TYPE_MASK_NONE = 0x0,
            PARTICLE_EVENT_TYPE_MASK_SPAWNED = 0x1,
            PARTICLE_EVENT_TYPE_MASK_KILLED = 0x2,
            PARTICLE_EVENT_TYPE_MASK_COLLISION = 0x4,
            PARTICLE_EVENT_TYPE_MASK_FIRST_COLLISION = 0x8,
            PARTICLE_EVENT_TYPE_MASK_COLLISION_STOPPED = 0x10,
            PARTICLE_EVENT_TYPE_MASK_KILLED_ON_COLLISION = 0x20,
            PARTICLE_EVENT_TYPE_MASK_USER_1 = 0x40,
            PARTICLE_EVENT_TYPE_MASK_USER_2 = 0x80,
            PARTICLE_EVENT_TYPE_MASK_USER_3 = 0x100,
            PARTICLE_EVENT_TYPE_MASK_USER_4 = 0x200
        }
        // Alignment: 4
        // Member count: 2
        public enum ParticleMassMode_t : uint {
            PARTICLE_MASSMODE_RADIUS_CUBED = 0x0,
            PARTICLE_MASSMODE_RADIUS_SQUARED = 0x2
        }
        // Alignment: 4
        // Member count: 3
        public enum ParticleDirectionNoiseType_t : uint {
            PARTICLE_DIR_NOISE_PERLIN = 0x0,
            PARTICLE_DIR_NOISE_CURL = 0x1,
            PARTICLE_DIR_NOISE_WORLEY_BASIC = 0x2
        }
        // Alignment: 4
        // Member count: 2
        public enum ParticleHitboxBiasType_t : uint {
            PARTICLE_HITBOX_BIAS_ENTITY = 0x0,
            PARTICLE_HITBOX_BIAS_HITBOX = 0x1
        }
        // Alignment: 4
        // Member count: 6
        public enum ParticleControlPointAxis_t : uint {
            PARTICLE_CP_AXIS_X = 0x0,
            PARTICLE_CP_AXIS_Y = 0x1,
            PARTICLE_CP_AXIS_Z = 0x2,
            PARTICLE_CP_AXIS_NEGATIVE_X = 0x3,
            PARTICLE_CP_AXIS_NEGATIVE_Y = 0x4,
            PARTICLE_CP_AXIS_NEGATIVE_Z = 0x5
        }
        // Alignment: 4
        // Member count: 12
        public enum ParticlePinDistance_t : uint {
            PARTICLE_PIN_DISTANCE_NONE = unchecked((uint)-1),
            PARTICLE_PIN_DISTANCE_NEIGHBOR = 0x0,
            PARTICLE_PIN_DISTANCE_FARTHEST = 0x1,
            PARTICLE_PIN_DISTANCE_FIRST = 0x2,
            PARTICLE_PIN_DISTANCE_LAST = 0x3,
            PARTICLE_PIN_DISTANCE_CENTER = 0x5,
            PARTICLE_PIN_DISTANCE_CP = 0x6,
            PARTICLE_PIN_DISTANCE_CP_PAIR_EITHER = 0x7,
            PARTICLE_PIN_DISTANCE_CP_PAIR_BOTH = 0x8,
            PARTICLE_PIN_SPEED = 0x9,
            PARTICLE_PIN_COLLECTION_AGE = 0xA,
            PARTICLE_PIN_FLOAT_VALUE = 0xB
        }
        // Alignment: 4
        // Member count: 7
        public enum VectorFloatExpressionType_t : uint {
            VECTOR_FLOAT_EXPRESSION_UNINITIALIZED = unchecked((uint)-1),
            VECTOR_FLOAT_EXPRESSION_DOTPRODUCT = 0x0,
            VECTOR_FLOAT_EXPRESSION_DISTANCE = 0x1,
            VECTOR_FLOAT_EXPRESSION_DISTANCESQR = 0x2,
            VECTOR_FLOAT_EXPRESSION_INPUT1_LENGTH = 0x3,
            VECTOR_FLOAT_EXPRESSION_INPUT1_LENGTHSQR = 0x4,
            VECTOR_FLOAT_EXPRESSION_INPUT1_NOISE = 0x5
        }
        // Alignment: 4
        // Member count: 3
        public enum ParticleFogType_t : uint {
            PARTICLE_FOG_GAME_DEFAULT = 0x0,
            PARTICLE_FOG_ENABLED = 0x1,
            PARTICLE_FOG_DISABLED = 0x2
        }
        // Alignment: 4
        // Member count: 9
        public enum VectorExpressionType_t : uint {
            VECTOR_EXPRESSION_UNINITIALIZED = unchecked((uint)-1),
            VECTOR_EXPRESSION_ADD = 0x0,
            VECTOR_EXPRESSION_SUBTRACT = 0x1,
            VECTOR_EXPRESSION_MUL = 0x2,
            VECTOR_EXPRESSION_DIVIDE = 0x3,
            VECTOR_EXPRESSION_INPUT_1 = 0x4,
            VECTOR_EXPRESSION_MIN = 0x5,
            VECTOR_EXPRESSION_MAX = 0x6,
            VECTOR_EXPRESSION_CROSSPRODUCT = 0x7
        }
        // Alignment: 4
        // Member count: 3
        public enum ParticleRotationLockType_t : uint {
            PARTICLE_ROTATION_LOCK_NONE = 0x0,
            PARTICLE_ROTATION_LOCK_ROTATIONS = 0x1,
            PARTICLE_ROTATION_LOCK_NORMAL = 0x2
        }
        // Alignment: 4
        // Member count: 2
        public enum HitboxLerpType_t : uint {
            HITBOX_LERP_LIFETIME = 0x0,
            HITBOX_LERP_CONSTANT = 0x1
        }
        // Alignment: 4
        // Member count: 3
        public enum AnimationType_t : uint {
            ANIMATION_TYPE_FIXED_RATE = 0x0,
            ANIMATION_TYPE_FIT_LIFETIME = 0x1,
            ANIMATION_TYPE_MANUAL_FRAMES = 0x2
        }
        // Alignment: 4
        // Member count: 2
        public enum ParticleAttrBoxFlags_t : uint {
            PARTICLE_ATTR_BOX_FLAGS_NONE = 0x0,
            PARTICLE_ATTR_BOX_FLAGS_WATER = 0x1
        }
        // Alignment: 4
        // Member count: 5
        public enum ParticleTopology_t : uint {
            PARTICLE_TOPOLOGY_POINTS = 0x0,
            PARTICLE_TOPOLOGY_LINES = 0x1,
            PARTICLE_TOPOLOGY_TRIS = 0x2,
            PARTICLE_TOPOLOGY_QUADS = 0x3,
            PARTICLE_TOPOLOGY_CUBES = 0x4
        }
        // Alignment: 4
        // Member count: 3
        public enum ParticleLightBehaviorChoiceList_t : uint {
            PARTICLE_LIGHT_BEHAVIOR_FOLLOW_DIRECTION = 0x0,
            PARTICLE_LIGHT_BEHAVIOR_ROPE = 0x1,
            PARTICLE_LIGHT_BEHAVIOR_TRAILS = 0x2
        }
        // Alignment: 4
        // Member count: 4
        public enum ModelHitboxType_t : uint {
            MODEL_HITBOX_TYPE_STANDARD = 0x0,
            MODEL_HITBOX_TYPE_RAW_BONES = 0x1,
            MODEL_HITBOX_TYPE_RENDERBOUNDS = 0x2,
            MODEL_HITBOX_TYPE_SNAPSHOT = 0x3
        }
        // Alignment: 4
        // Member count: 9
        public enum ParticleFloatMapType_t : uint {
            PF_MAP_TYPE_INVALID = unchecked((uint)-1),
            PF_MAP_TYPE_DIRECT = 0x0,
            PF_MAP_TYPE_MULT = 0x1,
            PF_MAP_TYPE_REMAP = 0x2,
            PF_MAP_TYPE_REMAP_BIASED = 0x3,
            PF_MAP_TYPE_CURVE = 0x4,
            PF_MAP_TYPE_NOTCHED = 0x5,
            PF_MAP_TYPE_ROUND = 0x6,
            PF_MAP_TYPE_COUNT = 0x7
        }
        // Alignment: 4
        // Member count: 4
        public enum ParticleTraceSet_t : uint {
            PARTICLE_TRACE_SET_ALL = 0x0,
            PARTICLE_TRACE_SET_STATIC = 0x1,
            PARTICLE_TRACE_SET_STATIC_AND_KEYFRAMED = 0x2,
            PARTICLE_TRACE_SET_DYNAMIC = 0x3
        }
        // Alignment: 4
        // Member count: 7
        public enum ParticleTextureLayerBlendType_t : uint {
            SPRITECARD_TEXTURE_BLEND_MULTIPLY = 0x0,
            SPRITECARD_TEXTURE_BLEND_MOD2X = 0x1,
            SPRITECARD_TEXTURE_BLEND_REPLACE = 0x2,
            SPRITECARD_TEXTURE_BLEND_ADD = 0x3,
            SPRITECARD_TEXTURE_BLEND_SUBTRACT = 0x4,
            SPRITECARD_TEXTURE_BLEND_AVERAGE = 0x5,
            SPRITECARD_TEXTURE_BLEND_LUMINANCE = 0x6
        }
        // Alignment: 4
        // Member count: 3
        public enum ParticleSelection_t : uint {
            PARTICLE_SELECTION_FIRST = 0x0,
            PARTICLE_SELECTION_LAST = 0x1,
            PARTICLE_SELECTION_NUMBER = 0x2
        }
        // Alignment: 4
        // Member count: 4
        public enum ParticleFloatInputMode_t : uint {
            PF_INPUT_MODE_INVALID = unchecked((uint)-1),
            PF_INPUT_MODE_CLAMPED = 0x0,
            PF_INPUT_MODE_LOOPED = 0x1,
            PF_INPUT_MODE_COUNT = 0x2
        }
        // Alignment: 4
        // Member count: 2
        public enum SnapshotIndexType_t : uint {
            SNAPSHOT_INDEX_INCREMENT = 0x0,
            SNAPSHOT_INDEX_DIRECT = 0x1
        }
        // Alignment: 4
        // Member count: 7
        public enum ParticleOutputBlendMode_t : uint {
            PARTICLE_OUTPUT_BLEND_MODE_ALPHA = 0x0,
            PARTICLE_OUTPUT_BLEND_MODE_ADD = 0x1,
            PARTICLE_OUTPUT_BLEND_MODE_BLEND_ADD = 0x2,
            PARTICLE_OUTPUT_BLEND_MODE_HALF_BLEND_ADD = 0x3,
            PARTICLE_OUTPUT_BLEND_MODE_NEG_HALF_BLEND_ADD = 0x4,
            PARTICLE_OUTPUT_BLEND_MODE_MOD2X = 0x5,
            PARTICLE_OUTPUT_BLEND_MODE_LIGHTEN = 0x6
        }
        // Alignment: 4
        // Member count: 2
        public enum ParticleLightnintBranchBehavior_t : uint {
            PARTICLE_LIGHTNING_BRANCH_CURRENT_DIR = 0x0,
            PARTICLE_LIGHTNING_BRANCH_ENDPOINT_DIR = 0x1
        }
        // Alignment: 4
        // Member count: 2
        public enum MaterialProxyType_t : uint {
            MATERIAL_PROXY_STATUS_EFFECT = 0x0,
            MATERIAL_PROXY_TINT = 0x1
        }
        // Alignment: 4
        // Member count: 3
        public enum ParticleDepthFeatheringMode_t : uint {
            PARTICLE_DEPTH_FEATHERING_OFF = 0x0,
            PARTICLE_DEPTH_FEATHERING_ON_OPTIONAL = 0x1,
            PARTICLE_DEPTH_FEATHERING_ON_REQUIRED = 0x2
        }
        // Alignment: 4
        // Member count: 4
        public enum ParticleFloatRandomMode_t : uint {
            PF_RANDOM_MODE_INVALID = unchecked((uint)-1),
            PF_RANDOM_MODE_CONSTANT = 0x0,
            PF_RANDOM_MODE_VARYING = 0x1,
            PF_RANDOM_MODE_COUNT = 0x2
        }
        // Alignment: 4
        // Member count: 4
        public enum PFNoiseModifier_t : uint {
            PF_NOISE_MODIFIER_NONE = 0x0,
            PF_NOISE_MODIFIER_LINES = 0x1,
            PF_NOISE_MODIFIER_CLUMPS = 0x2,
            PF_NOISE_MODIFIER_RINGS = 0x3
        }
        // Alignment: 4
        // Member count: 19
        public enum ParticleVecType_t : uint {
            PVEC_TYPE_INVALID = unchecked((uint)-1),
            PVEC_TYPE_LITERAL = 0x0,
            PVEC_TYPE_LITERAL_COLOR = 0x1,
            PVEC_TYPE_NAMED_VALUE = 0x2,
            PVEC_TYPE_PARTICLE_VECTOR = 0x3,
            PVEC_TYPE_PARTICLE_VELOCITY = 0x4,
            PVEC_TYPE_CP_VALUE = 0x5,
            PVEC_TYPE_CP_RELATIVE_POSITION = 0x6,
            PVEC_TYPE_CP_RELATIVE_DIR = 0x7,
            PVEC_TYPE_CP_RELATIVE_RANDOM_DIR = 0x8,
            PVEC_TYPE_FLOAT_COMPONENTS = 0x9,
            PVEC_TYPE_FLOAT_INTERP_CLAMPED = 0xA,
            PVEC_TYPE_FLOAT_INTERP_OPEN = 0xB,
            PVEC_TYPE_FLOAT_INTERP_GRADIENT = 0xC,
            PVEC_TYPE_RANDOM_UNIFORM = 0xD,
            PVEC_TYPE_RANDOM_UNIFORM_OFFSET = 0xE,
            PVEC_TYPE_CP_DELTA = 0xF,
            PVEC_TYPE_CLOSEST_CAMERA_POSITION = 0x10,
            PVEC_TYPE_COUNT = 0x11
        }
        // Alignment: 4
        // Member count: 2
        public enum ParticleLightUnitChoiceList_t : uint {
            PARTICLE_LIGHT_UNIT_CANDELAS = 0x0,
            PARTICLE_LIGHT_UNIT_LUMENS = 0x1
        }
        // Alignment: 4
        // Member count: 3
        public enum ParticleFalloffFunction_t : uint {
            PARTICLE_FALLOFF_CONSTANT = 0x0,
            PARTICLE_FALLOFF_LINEAR = 0x1,
            PARTICLE_FALLOFF_EXPONENTIAL = 0x2
        }
        // Alignment: 4
        // Member count: 3
        public enum ParticleSequenceCropOverride_t : uint {
            PARTICLE_SEQUENCE_CROP_OVERRIDE_DEFAULT = unchecked((uint)-1),
            PARTICLE_SEQUENCE_CROP_OVERRIDE_FORCE_OFF = 0x0,
            PARTICLE_SEQUENCE_CROP_OVERRIDE_FORCE_ON = 0x1
        }
        // Alignment: 4
        // Member count: 4
        public enum ParticleDetailLevel_t : uint {
            PARTICLEDETAIL_LOW = 0x0,
            PARTICLEDETAIL_MEDIUM = 0x1,
            PARTICLEDETAIL_HIGH = 0x2,
            PARTICLEDETAIL_ULTRA = 0x3
        }
        // Alignment: 4
        // Member count: 3
        public enum BBoxVolumeType_t : uint {
            BBOX_VOLUME = 0x0,
            BBOX_DIMENSIONS = 0x1,
            BBOX_MINS_MAXS = 0x2
        }
        // Alignment: 4
        // Member count: 10
        public enum SpriteCardTextureType_t : uint {
            SPRITECARD_TEXTURE_DIFFUSE = 0x0,
            SPRITECARD_TEXTURE_ZOOM = 0x1,
            SPRITECARD_TEXTURE_1D_COLOR_LOOKUP = 0x2,
            SPRITECARD_TEXTURE_UVDISTORTION = 0x3,
            SPRITECARD_TEXTURE_UVDISTORTION_ZOOM = 0x4,
            SPRITECARD_TEXTURE_NORMALMAP = 0x5,
            SPRITECARD_TEXTURE_ANIMMOTIONVEC = 0x6,
            SPRITECARD_TEXTURE_SPHERICAL_HARMONICS_A = 0x7,
            SPRITECARD_TEXTURE_SPHERICAL_HARMONICS_B = 0x8,
            SPRITECARD_TEXTURE_SPHERICAL_HARMONICS_C = 0x9
        }
        // Alignment: 4
        // Member count: 4
        public enum ParticleAlphaReferenceType_t : uint {
            PARTICLE_ALPHA_REFERENCE_ALPHA_ALPHA = 0x0,
            PARTICLE_ALPHA_REFERENCE_OPAQUE_ALPHA = 0x1,
            PARTICLE_ALPHA_REFERENCE_ALPHA_OPAQUE = 0x2,
            PARTICLE_ALPHA_REFERENCE_OPAQUE_OPAQUE = 0x3
        }
        // Alignment: 4
        // Member count: 15
        public enum SpriteCardTextureChannel_t : uint {
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGB = 0x0,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGBA = 0x1,
            SPRITECARD_TEXTURE_CHANNEL_MIX_A = 0x2,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_A = 0x3,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_ALPHAMASK = 0x4,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_RGBMASK = 0x5,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGBA_RGBALPHA = 0x6,
            SPRITECARD_TEXTURE_CHANNEL_MIX_A_RGBALPHA = 0x7,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_A_RGBALPHA = 0x8,
            SPRITECARD_TEXTURE_CHANNEL_MIX_R = 0x9,
            SPRITECARD_TEXTURE_CHANNEL_MIX_G = 0xA,
            SPRITECARD_TEXTURE_CHANNEL_MIX_B = 0xB,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RALPHA = 0xC,
            SPRITECARD_TEXTURE_CHANNEL_MIX_GALPHA = 0xD,
            SPRITECARD_TEXTURE_CHANNEL_MIX_BALPHA = 0xE
        }
        // Alignment: 4
        // Member count: 5
        public enum ParticleTransformType_t : uint {
            PT_TYPE_INVALID = 0x0,
            PT_TYPE_NAMED_VALUE = 0x1,
            PT_TYPE_CONTROL_POINT = 0x2,
            PT_TYPE_CONTROL_POINT_RANGE = 0x3,
            PT_TYPE_COUNT = 0x4
        }
        // Alignment: 4
        // Member count: 4
        public enum RenderModelSubModelFieldType_t : uint {
            SUBMODEL_AS_BODYGROUP_SUBMODEL = 0x0,
            SUBMODEL_AS_MESHGROUP_INDEX = 0x1,
            SUBMODEL_AS_MESHGROUP_MASK = 0x2,
            SUBMODEL_IGNORED_USE_MODEL_DEFAULT_MESHGROUP_MASK = 0x3
        }
        // Alignment: 4
        // Member count: 2
        public enum ParticleHitboxDataSelection_t : uint {
            PARTICLE_HITBOX_AVERAGE_SPEED = 0x0,
            PARTICLE_HITBOX_COUNT = 0x1
        }
        // Alignment: 4
        // Member count: 6
        public enum ParticleOrientationChoiceList_t : uint {
            PARTICLE_ORIENTATION_SCREEN_ALIGNED = 0x0,
            PARTICLE_ORIENTATION_SCREEN_Z_ALIGNED = 0x1,
            PARTICLE_ORIENTATION_WORLD_Z_ALIGNED = 0x2,
            PARTICLE_ORIENTATION_ALIGN_TO_PARTICLE_NORMAL = 0x3,
            PARTICLE_ORIENTATION_SCREENALIGN_TO_PARTICLE_NORMAL = 0x4,
            PARTICLE_ORIENTATION_FULL_3AXIS_ROTATION = 0x5
        }
        // Alignment: 4
        // Member count: 5
        public enum ParticleCollisionMode_t : uint {
            COLLISION_MODE_PER_PARTICLE_TRACE = 0x3,
            COLLISION_MODE_USE_NEAREST_TRACE = 0x2,
            COLLISION_MODE_PER_FRAME_PLANESET = 0x1,
            COLLISION_MODE_INITIAL_TRACE_DOWN = 0x0,
            COLLISION_MODE_DISABLED = unchecked((uint)-1)
        }
        // Alignment: 4
        // Member count: 2
        public enum ParticleSortingChoiceList_t : uint {
            PARTICLE_SORTING_NEAREST = 0x0,
            PARTICLE_SORTING_CREATION_TIME = 0x1
        }
        // Alignment: 4
        // Member count: 3
        public enum ParticleEndcapMode_t : uint {
            PARTICLE_ENDCAP_ALWAYS_ON = unchecked((uint)-1),
            PARTICLE_ENDCAP_ENDCAP_OFF = 0x0,
            PARTICLE_ENDCAP_ENDCAP_ON = 0x1
        }
        // Alignment: 4
        // Member count: 3
        public enum ClosestPointTestType_t : uint {
            PARTICLE_CLOSEST_TYPE_BOX = 0x0,
            PARTICLE_CLOSEST_TYPE_CAPSULE = 0x1,
            PARTICLE_CLOSEST_TYPE_HYBRID = 0x2
        }
        // Alignment: 4
        // Member count: 6
        public enum ParticleImpulseType_t : uint {
            IMPULSE_TYPE_NONE = 0x0,
            IMPULSE_TYPE_GENERIC = 0x1,
            IMPULSE_TYPE_ROPE = 0x2,
            IMPULSE_TYPE_EXPLOSION = 0x4,
            IMPULSE_TYPE_EXPLOSION_UNDERWATER = 0x8,
            IMPULSE_TYPE_PARTICLE_SYSTEM = 0x10
        }
        // Alignment: 4
        // Member count: 2
        public enum SpriteCardShaderType_t : uint {
            SPRITECARD_SHADER_BASE = 0x0,
            SPRITECARD_SHADER_CUSTOM = 0x1
        }
        // Alignment: 4
        // Member count: 2
        public enum ParticleOmni2LightTypeChoiceList_t : uint {
            PARTICLE_OMNI2_LIGHT_TYPE_POINT = 0x0,
            PARTICLE_OMNI2_LIGHT_TYPE_SPHERE = 0x1
        }
        // Alignment: 4
        // Member count: 3
        public enum ParticleLightFogLightingMode_t : uint {
            PARTICLE_LIGHT_FOG_LIGHTING_MODE_NONE = 0x0,
            PARTICLE_LIGHT_FOG_LIGHTING_MODE_DYNAMIC = 0x2,
            PARTICLE_LIGHT_FOG_LIGHTING_MODE_DYNAMIC_NOSHADOWS = 0x4
        }
        // Alignment: 4
        // Member count: 4
        public enum ParticleLightTypeChoiceList_t : uint {
            PARTICLE_LIGHT_TYPE_POINT = 0x0,
            PARTICLE_LIGHT_TYPE_SPOT = 0x1,
            PARTICLE_LIGHT_TYPE_FX = 0x2,
            PARTICLE_LIGHT_TYPE_CAPSULE = 0x3
        }
        // Alignment: 4
        // Member count: 2
        public enum ParticleOrientationSetMode_t : uint {
            PARTICLE_ORIENTATION_SET_FROM_VELOCITY = 0x0,
            PARTICLE_ORIENTATION_SET_FROM_ROTATIONS = 0x1
        }
        // Alignment: 4
        // Member count: 2
        public enum TextureRepetitionMode_t : uint {
            TEXTURE_REPETITION_PARTICLE = 0x0,
            TEXTURE_REPETITION_PATH = 0x1
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapGravityToVector {
            public const nint m_vInput1 = 0x1C0; // CPerParticleVecInput
            public const nint m_nOutputField = 0x838; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x83C; // ParticleSetMethod_t
            public const nint m_bNormalizedOutput = 0x840; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_Decay {
            public const nint m_bRopeDecay = 0x1C0; // bool
            public const nint m_bForcePreserveParticleOrder = 0x1C1; // bool
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 16
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderDeferredLight {
            public const nint m_bUseAlphaTestWindow = 0x210; // bool
            public const nint m_bUseTexture = 0x211; // bool
            public const nint m_flRadiusScale = 0x214; // float32
            public const nint m_flAlphaScale = 0x218; // float32
            public const nint m_nAlpha2Field = 0x21C; // ParticleAttributeIndex_t
            public const nint m_vecColorScale = 0x220; // CParticleCollectionVecInput
            public const nint m_nColorBlendType = 0x898; // ParticleColorBlendType_t
            public const nint m_flLightDistance = 0x89C; // float32
            public const nint m_flStartFalloff = 0x8A0; // float32
            public const nint m_flDistanceFalloff = 0x8A4; // float32
            public const nint m_flSpotFoV = 0x8A8; // float32
            public const nint m_nAlphaTestPointField = 0x8AC; // ParticleAttributeIndex_t
            public const nint m_nAlphaTestRangeField = 0x8B0; // ParticleAttributeIndex_t
            public const nint m_nAlphaTestSharpnessField = 0x8B4; // ParticleAttributeIndex_t
            public const nint m_hTexture = 0x8B8; // 
            public const nint m_nHSVShiftControlPoint = 0x8C0; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapSpeedtoCP {
            public const nint m_nInControlPointNumber = 0x1C8; // int32
            public const nint m_nOutControlPointNumber = 0x1CC; // int32
            public const nint m_nField = 0x1D0; // int32
            public const nint m_flInputMin = 0x1D4; // float32
            public const nint m_flInputMax = 0x1D8; // float32
            public const nint m_flOutputMin = 0x1DC; // float32
            public const nint m_flOutputMax = 0x1E0; // float32
            public const nint m_bUseDeltaV = 0x1E4; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapTransformToVelocity {
            public const nint m_TransformInput = 0x1C0; // CParticleTransformInput
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CollisionGroupContext_t {
            public const nint m_nCollisionGroupNumber = 0x0; // int32
        }
        // Parent: CParticleInput
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyCustomEditor
        // MParticleCustomFieldDefaultValue
        public static class CParticleModelInput {
            public const nint m_nType = 0x10; // ParticleModelType_t
            public const nint m_NamedValue = 0x18; // CParticleNamedValueRef
            public const nint m_nControlPoint = 0x58; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CParticleFunctionPreEmission {
            public const nint m_bRunOnce = 0x1C0; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_FadeOutSimple {
            public const nint m_flFadeOutTime = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SpringToVectorConstraint {
            public const nint m_flRestLength = 0x1C0; // CPerParticleFloatInput
            public const nint m_flMinDistance = 0x320; // CPerParticleFloatInput
            public const nint m_flMaxDistance = 0x480; // CPerParticleFloatInput
            public const nint m_flRestingLength = 0x5E0; // CPerParticleFloatInput
            public const nint m_vecAnchorVector = 0x740; // CPerParticleVecInput
        }
        // Parent: CBaseRendererSource2
        // Field count: 30
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderRopes {
            public const nint m_bEnableFadingAndClamping = 0x2AA8; // bool
            public const nint m_flMinSize = 0x2AAC; // float32
            public const nint m_flMaxSize = 0x2AB0; // float32
            public const nint m_flStartFadeSize = 0x2AB4; // float32
            public const nint m_flEndFadeSize = 0x2AB8; // float32
            public const nint m_flStartFadeDot = 0x2ABC; // float32
            public const nint m_flEndFadeDot = 0x2AC0; // float32
            public const nint m_flRadiusTaper = 0x2AC4; // float32
            public const nint m_nMinTesselation = 0x2AC8; // int32
            public const nint m_nMaxTesselation = 0x2ACC; // int32
            public const nint m_flTessScale = 0x2AD0; // float32
            public const nint m_flTextureVWorldSize = 0x2AD8; // 
            public const nint m_flTextureVScrollRate = 0x2C38; // 
            public const nint m_flTextureVOffset = 0x2D98; // 
            public const nint m_nTextureVParamsCP = 0x2EF8; // int32
            public const nint m_bClampV = 0x2EFC; // bool
            public const nint m_nScaleCP1 = 0x2F00; // int32
            public const nint m_nScaleCP2 = 0x2F04; // int32
            public const nint m_flScaleVSizeByControlPointDistance = 0x2F08; // float32
            public const nint m_flScaleVScrollByControlPointDistance = 0x2F0C; // float32
            public const nint m_flScaleVOffsetByControlPointDistance = 0x2F10; // float32
            public const nint m_bUseScalarForTextureCoordinate = 0x2F15; // bool
            public const nint m_nScalarFieldForTextureCoordinate = 0x2F18; // ParticleAttributeIndex_t
            public const nint m_flScalarAttributeTextureCoordScale = 0x2F1C; // float32
            public const nint m_bReverseOrder = 0x2F20; // bool
            public const nint m_bClosedLoop = 0x2F21; // bool
            public const nint m_nOrientationType = 0x2F24; // ParticleOrientationChoiceList_t
            public const nint m_nVectorFieldForOrientation = 0x2F28; // ParticleAttributeIndex_t
            public const nint m_bDrawAsOpaque = 0x2F2C; // bool
            public const nint m_bGenerateNormals = 0x2F2D; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 19
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_StatusEffectCitadel {
            public const nint m_flSFXColorWarpAmount = 0x1C8; // float32
            public const nint m_flSFXNormalAmount = 0x1CC; // float32
            public const nint m_flSFXMetalnessAmount = 0x1D0; // float32
            public const nint m_flSFXRoughnessAmount = 0x1D4; // float32
            public const nint m_flSFXSelfIllumAmount = 0x1D8; // float32
            public const nint m_flSFXSScale = 0x1DC; // float32
            public const nint m_flSFXSScrollX = 0x1E0; // float32
            public const nint m_flSFXSScrollY = 0x1E4; // float32
            public const nint m_flSFXSScrollZ = 0x1E8; // float32
            public const nint m_flSFXSOffsetX = 0x1EC; // float32
            public const nint m_flSFXSOffsetY = 0x1F0; // float32
            public const nint m_flSFXSOffsetZ = 0x1F4; // float32
            public const nint m_nDetailCombo = 0x1F8; // DetailCombo_t
            public const nint m_flSFXSDetailAmount = 0x1FC; // float32
            public const nint m_flSFXSDetailScale = 0x200; // float32
            public const nint m_flSFXSDetailScrollX = 0x204; // float32
            public const nint m_flSFXSDetailScrollY = 0x208; // float32
            public const nint m_flSFXSDetailScrollZ = 0x20C; // float32
            public const nint m_flSFXSUseModelUVs = 0x210; // float32
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 12
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderSound {
            public const nint m_flDurationScale = 0x210; // float32
            public const nint m_flSndLvlScale = 0x214; // float32
            public const nint m_flPitchScale = 0x218; // float32
            public const nint m_flVolumeScale = 0x21C; // float32
            public const nint m_nSndLvlField = 0x220; // ParticleAttributeIndex_t
            public const nint m_nDurationField = 0x224; // ParticleAttributeIndex_t
            public const nint m_nPitchField = 0x228; // ParticleAttributeIndex_t
            public const nint m_nVolumeField = 0x22C; // ParticleAttributeIndex_t
            public const nint m_nChannel = 0x230; // int32
            public const nint m_nCPReference = 0x234; // int32
            public const nint m_pszSoundName = 0x238; // char[256]
            public const nint m_bSuppressStopSoundEvent = 0x338; // bool
        }
        // Parent: None
        // Field count: 19
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CParticleVisibilityInputs {
            public const nint m_flCameraBias = 0x0; // float32
            public const nint m_nCPin = 0x4; // int32
            public const nint m_flProxyRadius = 0x8; // float32
            public const nint m_flInputMin = 0xC; // float32
            public const nint m_flInputMax = 0x10; // float32
            public const nint m_flInputPixelVisFade = 0x14; // float32
            public const nint m_flNoPixelVisibilityFallback = 0x18; // float32
            public const nint m_flDistanceInputMin = 0x1C; // float32
            public const nint m_flDistanceInputMax = 0x20; // float32
            public const nint m_flDotInputMin = 0x24; // float32
            public const nint m_flDotInputMax = 0x28; // float32
            public const nint m_bDotCPAngles = 0x2C; // bool
            public const nint m_bDotCameraAngles = 0x2D; // bool
            public const nint m_flAlphaScaleMin = 0x30; // float32
            public const nint m_flAlphaScaleMax = 0x34; // float32
            public const nint m_flRadiusScaleMin = 0x38; // float32
            public const nint m_flRadiusScaleMax = 0x3C; // float32
            public const nint m_flRadiusScaleFOVBase = 0x40; // float32
            public const nint m_bRightEye = 0x44; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointsToParticle {
            public const nint m_nChildGroupID = 0x1C0; // int32
            public const nint m_nFirstControlPoint = 0x1C4; // int32
            public const nint m_nNumControlPoints = 0x1C8; // int32
            public const nint m_nFirstSourcePoint = 0x1CC; // int32
            public const nint m_bSetOrientation = 0x1D0; // bool
            public const nint m_nOrientationMode = 0x1D4; // ParticleOrientationSetMode_t
            public const nint m_nSetParent = 0x1D8; // ParticleParentSetMode_t
        }
        // Parent: CParticleFunctionOperator
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapSDFDistanceToVectorAttribute {
            public const nint m_nVectorFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nVectorFieldInput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flMinDistance = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_flMaxDistance = 0x328; // CParticleCollectionFloatInput
            public const nint m_vValueBelowMin = 0x488; // Vector
            public const nint m_vValueAtMin = 0x494; // Vector
            public const nint m_vValueAtMax = 0x4A0; // Vector
            public const nint m_vValueAboveMax = 0x4AC; // Vector
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapCPVelocityToVector {
            public const nint m_nControlPoint = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x1C8; // float32
            public const nint m_bNormalize = 0x1CC; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_PointVectorAtNextParticle {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInterpolation = 0x1C8; // CPerParticleFloatInput
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ParticlePreviewBodyGroup_t {
            public const nint m_bodyGroupName = 0x0; // CUtlString
            public const nint m_nValue = 0x8; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_OscillateScalarSimple {
            public const nint m_Rate = 0x1C0; // float32
            public const nint m_Frequency = 0x1C4; // float32
            public const nint m_nField = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_flOscMult = 0x1CC; // float32
            public const nint m_flOscAdd = 0x1D0; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 18
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_StatusEffect {
            public const nint m_nDetail2Combo = 0x1C8; // Detail2Combo_t
            public const nint m_flDetail2Rotation = 0x1CC; // float32
            public const nint m_flDetail2Scale = 0x1D0; // float32
            public const nint m_flDetail2BlendFactor = 0x1D4; // float32
            public const nint m_flColorWarpIntensity = 0x1D8; // float32
            public const nint m_flDiffuseWarpBlendToFull = 0x1DC; // float32
            public const nint m_flEnvMapIntensity = 0x1E0; // float32
            public const nint m_flAmbientScale = 0x1E4; // float32
            public const nint m_specularColor = 0x1E8; // Color
            public const nint m_flSpecularScale = 0x1EC; // float32
            public const nint m_flSpecularExponent = 0x1F0; // float32
            public const nint m_flSpecularExponentBlendToFull = 0x1F4; // float32
            public const nint m_flSpecularBlendToFull = 0x1F8; // float32
            public const nint m_rimLightColor = 0x1FC; // Color
            public const nint m_flRimLightScale = 0x200; // float32
            public const nint m_flReflectionsTintByBaseBlendToNone = 0x204; // float32
            public const nint m_flMetalnessBlendToFull = 0x208; // float32
            public const nint m_flSelfIllumBlendToFull = 0x20C; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RtEnvCull {
            public const nint m_vecTestDir = 0x1C8; // Vector
            public const nint m_vecTestNormal = 0x1D4; // Vector
            public const nint m_bUseVelocity = 0x1E0; // bool
            public const nint m_bCullOnMiss = 0x1E1; // bool
            public const nint m_bLifeAdjust = 0x1E2; // bool
            public const nint m_RtEnvName = 0x1E3; // char[128]
            public const nint m_nRTEnvCP = 0x264; // int32
            public const nint m_nComponent = 0x268; // int32
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ConstrainDistance {
            public const nint m_fMinDistance = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_fMaxDistance = 0x320; // CParticleCollectionFloatInput
            public const nint m_nControlPointNumber = 0x480; // int32
            public const nint m_CenterOffset = 0x484; // Vector
            public const nint m_bGlobalCenter = 0x490; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomVector {
            public const nint m_vecMin = 0x1C8; // Vector
            public const nint m_vecMax = 0x1D4; // Vector
            public const nint m_nFieldOutput = 0x1E0; // ParticleAttributeIndex_t
            public const nint m_randomnessParameters = 0x1E4; // CRandomNumberGeneratorParameters
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InitialVelocityNoise {
            public const nint m_vecAbsVal = 0x1C8; // Vector
            public const nint m_vecAbsValInv = 0x1D4; // Vector
            public const nint m_vecOffsetLoc = 0x1E0; // CPerParticleVecInput
            public const nint m_flOffset = 0x858; // CPerParticleFloatInput
            public const nint m_vecOutputMin = 0x9B8; // CPerParticleVecInput
            public const nint m_vecOutputMax = 0x1030; // CPerParticleVecInput
            public const nint m_flNoiseScale = 0x16A8; // CPerParticleFloatInput
            public const nint m_flNoiseScaleLoc = 0x1808; // CPerParticleFloatInput
            public const nint m_TransformInput = 0x1968; // CParticleTransformInput
            public const nint m_bIgnoreDt = 0x19D0; // bool
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ParticleChildrenInfo_t {
            public const nint m_ChildRef = 0x0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_flDelay = 0x8; // float32
            public const nint m_bEndCap = 0xC; // bool
            public const nint m_bDisableChild = 0xD; // bool
            public const nint m_nDetailLevel = 0x10; // ParticleDetailLevel_t
        }
        // Parent: CParticleFunctionOperator
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapScalarOnceTimed {
            public const nint m_bProportional = 0x1C0; // bool
            public const nint m_nFieldInput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1CC; // float32
            public const nint m_flInputMax = 0x1D0; // float32
            public const nint m_flOutputMin = 0x1D4; // float32
            public const nint m_flOutputMax = 0x1D8; // float32
            public const nint m_flRemapTime = 0x1DC; // float32
        }
        // Parent: C_INIT_RandomNamedModelElement
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomNamedModelSequence {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_PlaneCull {
            public const nint m_nPlaneControlPoint = 0x1C0; // int32
            public const nint m_vecPlaneDirection = 0x1C4; // Vector
            public const nint m_bLocalSpace = 0x1D0; // bool
            public const nint m_flPlaneOffset = 0x1D4; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_VelocityRandom {
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_fSpeedMin = 0x1D0; // CPerParticleFloatInput
            public const nint m_fSpeedMax = 0x330; // CPerParticleFloatInput
            public const nint m_LocalCoordinateSystemSpeedMin = 0x490; // CPerParticleVecInput
            public const nint m_LocalCoordinateSystemSpeedMax = 0xB08; // CPerParticleVecInput
            public const nint m_bIgnoreDT = 0x1180; // bool
            public const nint m_randomnessParameters = 0x1184; // CRandomNumberGeneratorParameters
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ModelDampenMovement {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_bBoundBox = 0x1C4; // bool
            public const nint m_bOutside = 0x1C5; // bool
            public const nint m_bUseBones = 0x1C6; // bool
            public const nint m_HitboxSetName = 0x1C7; // char[128]
            public const nint m_vecPosOffset = 0x248; // CPerParticleVecInput
            public const nint m_fDrag = 0x8C0; // float32
        }
        // Parent: CParticleFunctionForce
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_TwistAroundAxis {
            public const nint m_fForceAmount = 0x1D0; // float32
            public const nint m_TwistAxis = 0x1D4; // Vector
            public const nint m_bLocalSpace = 0x1E0; // bool
            public const nint m_nControlPointNumber = 0x1E4; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_TeleportBeam {
            public const nint m_nCPPosition = 0x1C0; // int32
            public const nint m_nCPVelocity = 0x1C4; // int32
            public const nint m_nCPMisc = 0x1C8; // int32
            public const nint m_nCPColor = 0x1CC; // int32
            public const nint m_nCPInvalidColor = 0x1D0; // int32
            public const nint m_nCPExtraArcData = 0x1D4; // int32
            public const nint m_vGravity = 0x1D8; // Vector
            public const nint m_flArcMaxDuration = 0x1E4; // float32
            public const nint m_flSegmentBreak = 0x1E8; // float32
            public const nint m_flArcSpeed = 0x1EC; // float32
            public const nint m_flAlpha = 0x1F0; // float32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapExternalWindToCP {
            public const nint m_nCP = 0x1C8; // int32
            public const nint m_nCPOutput = 0x1CC; // int32
            public const nint m_vecScale = 0x1D0; // CParticleCollectionVecInput
            public const nint m_bSetMagnitude = 0x848; // bool
            public const nint m_nOutVectorField = 0x84C; // int32
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 64
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CBaseRendererSource2 {
            public const nint m_flRadiusScale = 0x210; // 
            public const nint m_flAlphaScale = 0x370; // 
            public const nint m_flRollScale = 0x4D0; // 
            public const nint m_nAlpha2Field = 0x630; // ParticleAttributeIndex_t
            public const nint m_vecColorScale = 0x638; // CParticleCollectionRendererVecInput
            public const nint m_nColorBlendType = 0xCB0; // ParticleColorBlendType_t
            public const nint m_nShaderType = 0xCB4; // SpriteCardShaderType_t
            public const nint m_strShaderOverride = 0xCB8; // CUtlString
            public const nint m_flCenterXOffset = 0xCC0; // 
            public const nint m_flCenterYOffset = 0xE20; // 
            public const nint m_flBumpStrength = 0xF80; // float32
            public const nint m_nCropTextureOverride = 0xF84; // ParticleSequenceCropOverride_t
            public const nint m_vecTexturesInput = 0xF88; // CUtlVector<TextureGroup_t>
            public const nint m_flAnimationRate = 0xFA0; // float32
            public const nint m_nAnimationType = 0xFA4; // AnimationType_t
            public const nint m_bAnimateInFPS = 0xFA8; // bool
            public const nint m_flMotionVectorScaleU = 0xFB0; // 
            public const nint m_flMotionVectorScaleV = 0x1110; // 
            public const nint m_flSelfIllumAmount = 0x1270; // 
            public const nint m_flDiffuseAmount = 0x13D0; // 
            public const nint m_flDiffuseClamp = 0x1530; // 
            public const nint m_nLightingControlPoint = 0x1690; // int32
            public const nint m_nSelfIllumPerParticle = 0x1694; // ParticleAttributeIndex_t
            public const nint m_nOutputBlendMode = 0x1698; // ParticleOutputBlendMode_t
            public const nint m_bGammaCorrectVertexColors = 0x169C; // bool
            public const nint m_bSaturateColorPreAlphaBlend = 0x169D; // bool
            public const nint m_flAddSelfAmount = 0x16A0; // 
            public const nint m_flDesaturation = 0x1800; // 
            public const nint m_flOverbrightFactor = 0x1960; // 
            public const nint m_nHSVShiftControlPoint = 0x1AC0; // int32
            public const nint m_nFogType = 0x1AC4; // ParticleFogType_t
            public const nint m_flFogAmount = 0x1AC8; // 
            public const nint m_bTintByFOW = 0x1C28; // bool
            public const nint m_bTintByGlobalLight = 0x1C29; // bool
            public const nint m_nPerParticleAlphaReference = 0x1C2C; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleAlphaRefWindow = 0x1C30; // SpriteCardPerParticleScale_t
            public const nint m_nAlphaReferenceType = 0x1C34; // ParticleAlphaReferenceType_t
            public const nint m_flAlphaReferenceSoftness = 0x1C38; // 
            public const nint m_flSourceAlphaValueToMapToZero = 0x1D98; // 
            public const nint m_flSourceAlphaValueToMapToOne = 0x1EF8; // 
            public const nint m_bRefract = 0x2058; // bool
            public const nint m_bRefractSolid = 0x2059; // bool
            public const nint m_flRefractAmount = 0x2060; // 
            public const nint m_nRefractBlurRadius = 0x21C0; // int32
            public const nint m_nRefractBlurType = 0x21C4; // BlurFilterType_t
            public const nint m_bOnlyRenderInEffectsBloomPass = 0x21C8; // bool
            public const nint m_bOnlyRenderInEffectsWaterPass = 0x21C9; // bool
            public const nint m_bUseMixedResolutionRendering = 0x21CA; // bool
            public const nint m_bOnlyRenderInEffecsGameOverlay = 0x21CB; // bool
            public const nint m_stencilTestID = 0x21CC; // char[128]
            public const nint m_bStencilTestExclude = 0x224C; // bool
            public const nint m_stencilWriteID = 0x224D; // char[128]
            public const nint m_bWriteStencilOnDepthPass = 0x22CD; // bool
            public const nint m_bWriteStencilOnDepthFail = 0x22CE; // bool
            public const nint m_bReverseZBuffering = 0x22CF; // bool
            public const nint m_bDisableZBuffering = 0x22D0; // bool
            public const nint m_nFeatheringMode = 0x22D4; // ParticleDepthFeatheringMode_t
            public const nint m_flFeatheringMinDist = 0x22D8; // 
            public const nint m_flFeatheringMaxDist = 0x2438; // 
            public const nint m_flFeatheringFilter = 0x2598; // 
            public const nint m_flDepthBias = 0x26F8; // 
            public const nint m_nSortMethod = 0x2858; // ParticleSortingChoiceList_t
            public const nint m_bBlendFramesSeq0 = 0x285C; // bool
            public const nint m_bMaxLuminanceBlendingSequence0 = 0x285D; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSpinUpdateBase {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_OrientTo2dDirection {
            public const nint m_flRotOffset = 0x1C0; // float32
            public const nint m_flSpinStrength = 0x1C4; // float32
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapDotProductToCP {
            public const nint m_nInputCP1 = 0x1C8; // int32
            public const nint m_nInputCP2 = 0x1CC; // int32
            public const nint m_nOutputCP = 0x1D0; // int32
            public const nint m_nOutVectorField = 0x1D4; // int32
            public const nint m_flInputMin = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_flInputMax = 0x338; // CParticleCollectionFloatInput
            public const nint m_flOutputMin = 0x498; // CParticleCollectionFloatInput
            public const nint m_flOutputMax = 0x5F8; // CParticleCollectionFloatInput
        }
        // Parent: C_INIT_RemapParticleCountToScalar
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapParticleCountToNamedModelElementScalar {
            public const nint m_hModel = 0x1F8; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_outputMinName = 0x200; // CUtlString
            public const nint m_outputMaxName = 0x208; // CUtlString
            public const nint m_bModelFromRenderer = 0x210; // bool
        }
        // Parent: CBaseTrailRenderer
        // Field count: 20
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderTrails {
            public const nint m_bEnableFadingAndClamping = 0x2D80; // bool
            public const nint m_flStartFadeDot = 0x2D84; // float32
            public const nint m_flEndFadeDot = 0x2D88; // float32
            public const nint m_nPrevPntSource = 0x2D8C; // ParticleAttributeIndex_t
            public const nint m_flMaxLength = 0x2D90; // float32
            public const nint m_flMinLength = 0x2D94; // float32
            public const nint m_bIgnoreDT = 0x2D98; // bool
            public const nint m_flConstrainRadiusToLengthRatio = 0x2D9C; // float32
            public const nint m_flLengthScale = 0x2DA0; // float32
            public const nint m_flLengthFadeInTime = 0x2DA4; // float32
            public const nint m_flRadiusHeadTaper = 0x2DA8; // CPerParticleFloatInput
            public const nint m_vecHeadColorScale = 0x2F08; // CParticleCollectionVecInput
            public const nint m_flHeadAlphaScale = 0x3580; // CPerParticleFloatInput
            public const nint m_flRadiusTaper = 0x36E0; // CPerParticleFloatInput
            public const nint m_vecTailColorScale = 0x3840; // CParticleCollectionVecInput
            public const nint m_flTailAlphaScale = 0x3EB8; // CPerParticleFloatInput
            public const nint m_nHorizCropField = 0x4018; // ParticleAttributeIndex_t
            public const nint m_nVertCropField = 0x401C; // ParticleAttributeIndex_t
            public const nint m_flForwardShift = 0x4020; // float32
            public const nint m_bFlipUVBasedOnPitchYaw = 0x4024; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointPositionToTimeOfDayValue {
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_pszTimeOfDayParameter = 0x1CC; // char[128]
            public const nint m_vecDefaultValue = 0x24C; // Vector
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DecayMaintainCount {
            public const nint m_nParticlesToMaintain = 0x1C0; // int32
            public const nint m_flDecayDelay = 0x1C4; // float32
            public const nint m_nSnapshotControlPoint = 0x1C8; // int32
            public const nint m_bLifespanDecay = 0x1CC; // bool
            public const nint m_flScale = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_bKillNewest = 0x330; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomModelSequence {
            public const nint m_ActivityName = 0x1C8; // char[256]
            public const nint m_SequenceName = 0x2C8; // char[256]
            public const nint m_hModel = 0x3C8; // CStrongHandle<InfoForResourceTypeCModel>
        }
        // Parent: CParticleVecInput
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyCustomEditor
        public static class CPerParticleVecInput {
        }
        // Parent: CParticleFunctionForce
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ExternalGameImpulseForce {
            public const nint m_flForceScale = 0x1D0; // CPerParticleFloatInput
            public const nint m_bRopes = 0x330; // bool
            public const nint m_bRopesZOnly = 0x331; // bool
            public const nint m_bExplosions = 0x332; // bool
            public const nint m_bParticles = 0x333; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapAverageHitboxSpeedtoCP {
            public const nint m_nInControlPointNumber = 0x1C8; // int32
            public const nint m_nOutControlPointNumber = 0x1CC; // int32
            public const nint m_nField = 0x1D0; // int32
            public const nint m_nHitboxDataType = 0x1D4; // 
            public const nint m_flInputMin = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_flInputMax = 0x338; // CParticleCollectionFloatInput
            public const nint m_flOutputMin = 0x498; // CParticleCollectionFloatInput
            public const nint m_flOutputMax = 0x5F8; // CParticleCollectionFloatInput
            public const nint m_nHeightControlPointNumber = 0x758; // int32
            public const nint m_vecComparisonVelocity = 0x760; // CParticleCollectionVecInput
            public const nint m_HitboxSetName = 0xDD8; // char[128]
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomAlpha {
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_nAlphaMin = 0x1CC; // int32
            public const nint m_nAlphaMax = 0x1D0; // int32
            public const nint m_flAlphaRandExponent = 0x1DC; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_NormalizeVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x1C4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_FadeInSimple {
            public const nint m_flFadeInTime = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RepeatedTriggerChildGroup {
            public const nint m_nChildGroupID = 0x1C8; // int32
            public const nint m_flClusterRefireTime = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_flClusterSize = 0x330; // CParticleCollectionFloatInput
            public const nint m_flClusterCooldown = 0x490; // CParticleCollectionFloatInput
            public const nint m_bLimitChildCount = 0x5F0; // bool
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderTonemapController {
            public const nint m_flTonemapLevel = 0x210; // float32
            public const nint m_flTonemapWeight = 0x214; // float32
            public const nint m_nTonemapLevelField = 0x218; // ParticleAttributeIndex_t
            public const nint m_nTonemapWeightField = 0x21C; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapVelocityToVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x1C4; // float32
            public const nint m_bNormalize = 0x1C8; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_SetHitboxToClosest {
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_nDesiredHitbox = 0x1CC; // int32
            public const nint m_vecHitBoxScale = 0x1D0; // CParticleCollectionVecInput
            public const nint m_HitboxSetName = 0x848; // char[128]
            public const nint m_bUseBones = 0x8C8; // bool
            public const nint m_bUseClosestPointOnHitbox = 0x8C9; // bool
            public const nint m_nTestType = 0x8CC; // ClosestPointTestType_t
            public const nint m_flHybridRatio = 0x8D0; // CParticleCollectionFloatInput
            public const nint m_bUpdatePosition = 0xA30; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RingWave {
            public const nint m_TransformInput = 0x1C8; // CParticleTransformInput
            public const nint m_flParticlesPerOrbit = 0x230; // CParticleCollectionFloatInput
            public const nint m_flInitialRadius = 0x390; // CPerParticleFloatInput
            public const nint m_flThickness = 0x4F0; // CPerParticleFloatInput
            public const nint m_flInitialSpeedMin = 0x650; // CPerParticleFloatInput
            public const nint m_flInitialSpeedMax = 0x7B0; // CPerParticleFloatInput
            public const nint m_flRoll = 0x910; // CPerParticleFloatInput
            public const nint m_flPitch = 0xA70; // CPerParticleFloatInput
            public const nint m_flYaw = 0xBD0; // CPerParticleFloatInput
            public const nint m_bEvenDistribution = 0xD30; // bool
            public const nint m_bXYVelocityOnly = 0xD31; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomTrailLength {
            public const nint m_flMinLength = 0x1C8; // float32
            public const nint m_flMaxLength = 0x1CC; // float32
            public const nint m_flLengthRandExponent = 0x1D0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapScalar {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // float32
            public const nint m_flInputMax = 0x1CC; // float32
            public const nint m_flOutputMin = 0x1D0; // float32
            public const nint m_flOutputMax = 0x1D4; // float32
            public const nint m_bOldCode = 0x1D8; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 13
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DistanceBetweenTransforms {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_TransformStart = 0x1C8; // CParticleTransformInput
            public const nint m_TransformEnd = 0x230; // CParticleTransformInput
            public const nint m_flInputMin = 0x298; // CPerParticleFloatInput
            public const nint m_flInputMax = 0x3F8; // CPerParticleFloatInput
            public const nint m_flOutputMin = 0x558; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x6B8; // CPerParticleFloatInput
            public const nint m_flMaxTraceLength = 0x818; // float32
            public const nint m_flLOSScale = 0x81C; // float32
            public const nint m_CollisionGroupName = 0x820; // char[128]
            public const nint m_nTraceSet = 0x8A0; // ParticleTraceSet_t
            public const nint m_bLOS = 0x8A4; // bool
            public const nint m_nSetMethod = 0x8A8; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionOperator
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DecayOffscreen {
            public const nint m_flOffscreenTime = 0x1C0; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 6
        //
        // Metadata:
        // MParticleMaxVersion
        // MParticleReplacementOp
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateSequentialPath {
            public const nint m_fMaxDistance = 0x1C8; // float32
            public const nint m_flNumToAssign = 0x1CC; // float32
            public const nint m_bLoop = 0x1D0; // bool
            public const nint m_bCPPairs = 0x1D1; // bool
            public const nint m_bSaveOffset = 0x1D2; // bool
            public const nint m_PathParams = 0x1E0; // CPathParameters
        }
        // Parent: CParticleFunctionOperator
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_EndCapTimedDecay {
            public const nint m_flDecayTime = 0x1C0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapDistanceToLineSegmentBase {
            public const nint m_nCP0 = 0x1C0; // int32
            public const nint m_nCP1 = 0x1C4; // int32
            public const nint m_flMinInputValue = 0x1C8; // float32
            public const nint m_flMaxInputValue = 0x1CC; // float32
            public const nint m_bInfiniteLine = 0x1D0; // bool
        }
        // Parent: CParticleFunctionEmitter
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ContinuousEmitter {
            public const nint m_flEmissionDuration = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_flStartTime = 0x328; // CParticleCollectionFloatInput
            public const nint m_flEmitRate = 0x488; // CParticleCollectionFloatInput
            public const nint m_flEmissionScale = 0x5E8; // float32
            public const nint m_flScalePerParentParticle = 0x5EC; // float32
            public const nint m_bInitFromKilledParentParticles = 0x5F0; // bool
            public const nint m_nEventType = 0x5F4; // EventTypeSelection_t
            public const nint m_nSnapshotControlPoint = 0x5F8; // int32
            public const nint m_nLimitPerUpdate = 0x5FC; // int32
            public const nint m_bForceEmitOnFirstUpdate = 0x600; // bool
            public const nint m_bForceEmitOnLastUpdate = 0x601; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_OscillateVectorSimple {
            public const nint m_Rate = 0x1C0; // Vector
            public const nint m_Frequency = 0x1CC; // Vector
            public const nint m_nField = 0x1D8; // ParticleAttributeIndex_t
            public const nint m_flOscMult = 0x1DC; // float32
            public const nint m_flOscAdd = 0x1E0; // float32
            public const nint m_bOffset = 0x1E4; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_SequenceLifeTime {
            public const nint m_flFramerate = 0x1C8; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_MoveBetweenPoints {
            public const nint m_flSpeedMin = 0x1C8; // CPerParticleFloatInput
            public const nint m_flSpeedMax = 0x328; // CPerParticleFloatInput
            public const nint m_flEndSpread = 0x488; // CPerParticleFloatInput
            public const nint m_flStartOffset = 0x5E8; // CPerParticleFloatInput
            public const nint m_flEndOffset = 0x748; // CPerParticleFloatInput
            public const nint m_nEndControlPointNumber = 0x8A8; // int32
            public const nint m_bTrailBias = 0x8AC; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapScalar {
            public const nint m_nFieldInput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1D0; // float32
            public const nint m_flInputMax = 0x1D4; // float32
            public const nint m_flOutputMin = 0x1D8; // float32
            public const nint m_flOutputMax = 0x1DC; // float32
            public const nint m_flStartTime = 0x1E0; // float32
            public const nint m_flEndTime = 0x1E4; // float32
            public const nint m_nSetMethod = 0x1E8; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x1EC; // bool
            public const nint m_flRemapBias = 0x1F0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetUserEvent {
            public const nint m_flInput = 0x1C0; // CPerParticleFloatInput
            public const nint m_flRisingEdge = 0x320; // CPerParticleFloatInput
            public const nint m_nRisingEventType = 0x480; // EventTypeSelection_t
            public const nint m_flFallingEdge = 0x488; // CPerParticleFloatInput
            public const nint m_nFallingEventType = 0x5E8; // EventTypeSelection_t
        }
        // Parent: CParticleFunctionOperator
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_QuantizeFloat {
            public const nint m_InputValue = 0x1C0; // CPerParticleFloatInput
            public const nint m_nOutputField = 0x320; // ParticleAttributeIndex_t
        }
        // Parent: CBasePulseGraphInstance
        // Field count: 0
        //
        // Metadata:
        // MPulseInstanceDomainInfo
        // MPulseDomainHookInfo
        // MPulseLibraryBindings
        // MPulseDomainOptInFeatureTag
        // MPulseDomainOptInFeatureTag
        public static class CParticleCollectionBindingInstance {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_BasicMovement {
            public const nint m_Gravity = 0x1C0; // CParticleCollectionVecInput
            public const nint m_fDrag = 0x838; // CParticleCollectionFloatInput
            public const nint m_massControls = 0x998; // CParticleMassCalculationParameters
            public const nint m_nMaxConstraintPasses = 0xDC0; // int32
            public const nint m_bUseNewCode = 0xDC4; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomNamedModelElement {
            public const nint m_hModel = 0x1C8; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_names = 0x1D0; // CUtlVector<CUtlString>
            public const nint m_bShuffle = 0x1E8; // bool
            public const nint m_bLinear = 0x1E9; // bool
            public const nint m_bModelFromRenderer = 0x1EA; // bool
            public const nint m_nFieldOutput = 0x1EC; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InitFromParentKilled {
            public const nint m_nAttributeToCopy = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_nEventType = 0x1CC; // EventTypeSelection_t
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_Callback {
        }
        // Parent: None
        // Field count: 16
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CParticleFunction {
            public const nint m_flOpStrength = 0x8; // CParticleCollectionFloatInput
            public const nint m_nOpEndCapState = 0x168; // ParticleEndcapMode_t
            public const nint m_flOpStartFadeInTime = 0x16C; // float32
            public const nint m_flOpEndFadeInTime = 0x170; // float32
            public const nint m_flOpStartFadeOutTime = 0x174; // float32
            public const nint m_flOpEndFadeOutTime = 0x178; // float32
            public const nint m_flOpFadeOscillatePeriod = 0x17C; // float32
            public const nint m_bNormalizeToStopTime = 0x180; // bool
            public const nint m_flOpTimeOffsetMin = 0x184; // float32
            public const nint m_flOpTimeOffsetMax = 0x188; // float32
            public const nint m_nOpTimeOffsetSeed = 0x18C; // int32
            public const nint m_nOpTimeScaleSeed = 0x190; // int32
            public const nint m_flOpTimeScaleMin = 0x194; // float32
            public const nint m_flOpTimeScaleMax = 0x198; // float32
            public const nint m_bDisableOperator = 0x19E; // bool
            public const nint m_Notes = 0x1A0; // CUtlString
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_GlobalLight {
            public const nint m_flScale = 0x1C0; // float32
            public const nint m_bClampLowerRange = 0x1C4; // bool
            public const nint m_bClampUpperRange = 0x1C5; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_OffsetVectorToVector {
            public const nint m_nFieldInput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_vecOutputMin = 0x1D0; // Vector
            public const nint m_vecOutputMax = 0x1DC; // Vector
            public const nint m_randomnessParameters = 0x1E8; // CRandomNumberGeneratorParameters
        }
        // Parent: CParticleFunctionOperator
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetPerChildControlPointFromAttribute {
            public const nint m_nChildGroupID = 0x1C0; // int32
            public const nint m_nFirstControlPoint = 0x1C4; // int32
            public const nint m_nNumControlPoints = 0x1C8; // int32
            public const nint m_nParticleIncrement = 0x1CC; // int32
            public const nint m_nFirstSourcePoint = 0x1D0; // int32
            public const nint m_bNumBasedOnParticleCount = 0x1D4; // bool
            public const nint m_nAttributeToRead = 0x1D8; // ParticleAttributeIndex_t
            public const nint m_nCPField = 0x1DC; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetParentControlPointsToChildCP {
            public const nint m_nChildGroupID = 0x1C8; // int32
            public const nint m_nChildControlPoint = 0x1CC; // int32
            public const nint m_nNumControlPoints = 0x1D0; // int32
            public const nint m_nFirstSourcePoint = 0x1D4; // int32
            public const nint m_bSetOrientation = 0x1D8; // bool
        }
        // Parent: CParticleFunctionForce
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SDFForce {
            public const nint m_flForceScale = 0x1D0; // float32
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_BoxConstraint {
            public const nint m_vecMin = 0x1C0; // CParticleCollectionVecInput
            public const nint m_vecMax = 0x838; // CParticleCollectionVecInput
            public const nint m_nCP = 0xEB0; // int32
            public const nint m_bLocalSpace = 0xEB4; // bool
            public const nint m_bAccountForRadius = 0xEB5; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 14
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreatePhyllotaxis {
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_nScaleCP = 0x1CC; // int32
            public const nint m_nComponent = 0x1D0; // int32
            public const nint m_fRadCentCore = 0x1D4; // float32
            public const nint m_fRadPerPoint = 0x1D8; // float32
            public const nint m_fRadPerPointTo = 0x1DC; // float32
            public const nint m_fpointAngle = 0x1E0; // float32
            public const nint m_fsizeOverall = 0x1E4; // float32
            public const nint m_fRadBias = 0x1E8; // float32
            public const nint m_fMinRad = 0x1EC; // float32
            public const nint m_fDistBias = 0x1F0; // float32
            public const nint m_bUseLocalCoords = 0x1F4; // bool
            public const nint m_bUseWithContEmit = 0x1F5; // bool
            public const nint m_bUseOrigRadius = 0x1F6; // bool
        }
        // Parent: CParticleFunctionForce
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_AttractToControlPoint {
            public const nint m_vecComponentScale = 0x1D0; // Vector
            public const nint m_fForceAmount = 0x1E0; // CPerParticleFloatInput
            public const nint m_fFalloffPower = 0x340; // float32
            public const nint m_TransformInput = 0x348; // CParticleTransformInput
            public const nint m_fForceAmountMin = 0x3B0; // CPerParticleFloatInput
            public const nint m_bApplyMinForce = 0x510; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomLifeTime {
            public const nint m_fLifetimeMin = 0x1C8; // float32
            public const nint m_fLifetimeMax = 0x1CC; // float32
            public const nint m_fLifetimeRandExponent = 0x1D0; // float32
        }
        // Parent: C_INIT_RemapParticleCountToNamedModelElementScalar
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapParticleCountToNamedModelSequenceScalar {
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_VelocityRadialRandom {
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_fSpeedMin = 0x1D0; // CPerParticleFloatInput
            public const nint m_fSpeedMax = 0x330; // CPerParticleFloatInput
            public const nint m_vecLocalCoordinateSystemSpeedScale = 0x490; // Vector
            public const nint m_bIgnoreDelta = 0x49D; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomRadius {
            public const nint m_flRadiusMin = 0x1C8; // float32
            public const nint m_flRadiusMax = 0x1CC; // float32
            public const nint m_flRadiusRandExponent = 0x1D0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_Orient2DRelToCP {
            public const nint m_flRotOffset = 0x1C0; // float32
            public const nint m_flSpinStrength = 0x1C4; // float32
            public const nint m_nCP = 0x1C8; // int32
            public const nint m_nFieldOutput = 0x1CC; // ParticleAttributeIndex_t
        }
        // Parent: None
        // Field count: 16
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class TextureControls_t {
            public const nint m_flFinalTextureScaleU = 0x0; // 
            public const nint m_flFinalTextureScaleV = 0x160; // 
            public const nint m_flFinalTextureOffsetU = 0x2C0; // 
            public const nint m_flFinalTextureOffsetV = 0x420; // 
            public const nint m_flFinalTextureUVRotation = 0x580; // 
            public const nint m_flZoomScale = 0x6E0; // 
            public const nint m_flDistortion = 0x840; // 
            public const nint m_bRandomizeOffsets = 0x9A0; // bool
            public const nint m_bClampUVs = 0x9A1; // bool
            public const nint m_nPerParticleBlend = 0x9A4; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleScale = 0x9A8; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleOffsetU = 0x9AC; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleOffsetV = 0x9B0; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleRotation = 0x9B4; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleZoom = 0x9B8; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleDistortion = 0x9BC; // SpriteCardPerParticleScale_t
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ControlPointReference_t {
            public const nint m_controlPointNameString = 0x0; // int32
            public const nint m_vOffsetFromControlPoint = 0x4; // Vector
            public const nint m_bOffsetInLocalSpace = 0x10; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointToVectorExpression {
            public const nint m_nExpression = 0x1C8; // VectorExpressionType_t
            public const nint m_nOutputCP = 0x1CC; // int32
            public const nint m_vInput1 = 0x1D0; // CParticleCollectionVecInput
            public const nint m_vInput2 = 0x848; // CParticleCollectionVecInput
            public const nint m_bNormalizedOutput = 0xEC0; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 15
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_LightningSnapshotGenerator {
            public const nint m_nCPSnapshot = 0x1C8; // int32
            public const nint m_nCPStartPnt = 0x1CC; // int32
            public const nint m_nCPEndPnt = 0x1D0; // int32
            public const nint m_flSegments = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_flOffset = 0x338; // CParticleCollectionFloatInput
            public const nint m_flOffsetDecay = 0x498; // CParticleCollectionFloatInput
            public const nint m_flRecalcRate = 0x5F8; // CParticleCollectionFloatInput
            public const nint m_flUVScale = 0x758; // CParticleCollectionFloatInput
            public const nint m_flUVOffset = 0x8B8; // CParticleCollectionFloatInput
            public const nint m_flSplitRate = 0xA18; // CParticleCollectionFloatInput
            public const nint m_flBranchTwist = 0xB78; // CParticleCollectionFloatInput
            public const nint m_nBranchBehavior = 0xCD8; // ParticleLightnintBranchBehavior_t
            public const nint m_flRadiusStart = 0xCE0; // CParticleCollectionFloatInput
            public const nint m_flRadiusEnd = 0xE40; // CParticleCollectionFloatInput
            public const nint m_flDedicatedPool = 0xFA0; // CParticleCollectionFloatInput
        }
        // Parent: C_OP_RemapNamedModelElementOnceTimed
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapNamedModelMeshGroupOnceTimed {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CParticleInput {
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapSpeedToScalar {
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_nControlPointNumber = 0x1CC; // int32
            public const nint m_flStartTime = 0x1D0; // float32
            public const nint m_flEndTime = 0x1D4; // float32
            public const nint m_flInputMin = 0x1D8; // float32
            public const nint m_flInputMax = 0x1DC; // float32
            public const nint m_flOutputMin = 0x1E0; // float32
            public const nint m_flOutputMax = 0x1E4; // float32
            public const nint m_nSetMethod = 0x1E8; // ParticleSetMethod_t
            public const nint m_bPerParticle = 0x1EC; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapQAnglesToRotation {
            public const nint m_TransformInput = 0x1C8; // CParticleTransformInput
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_PositionWarp {
            public const nint m_vecWarpMin = 0x1C8; // CParticleCollectionVecInput
            public const nint m_vecWarpMax = 0x840; // CParticleCollectionVecInput
            public const nint m_nScaleControlPointNumber = 0xEB8; // int32
            public const nint m_nControlPointNumber = 0xEBC; // int32
            public const nint m_nRadiusComponent = 0xEC0; // int32
            public const nint m_flWarpTime = 0xEC4; // float32
            public const nint m_flWarpStartTime = 0xEC8; // float32
            public const nint m_flPrevPosScale = 0xECC; // float32
            public const nint m_bInvertWarp = 0xED0; // bool
            public const nint m_bUseCount = 0xED1; // bool
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SDFConstraint {
            public const nint m_flMinDist = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_flMaxDist = 0x320; // CParticleCollectionFloatInput
            public const nint m_nMaxIterations = 0x480; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointFieldToScalarExpression {
            public const nint m_nExpression = 0x1C8; // ScalarExpressionType_t
            public const nint m_flInput1 = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_flInput2 = 0x330; // CParticleCollectionFloatInput
            public const nint m_flOutputRemap = 0x490; // CParticleRemapFloatInput
            public const nint m_nOutputCP = 0x5F0; // int32
            public const nint m_nOutVectorField = 0x5F4; // int32
        }
        // Parent: CParticleFunction
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CParticleFunctionForce {
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomVectorComponent {
            public const nint m_flMin = 0x1C8; // float32
            public const nint m_flMax = 0x1CC; // float32
            public const nint m_nFieldOutput = 0x1D0; // ParticleAttributeIndex_t
            public const nint m_nComponent = 0x1D4; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MParticleMaxVersion
        // MParticleReplacementOp
        // MGetKV3ClassDefaults
        public static class C_OP_InheritFromParentParticles {
            public const nint m_flScale = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nIncrement = 0x1C8; // int32
            public const nint m_bRandomDistribution = 0x1CC; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_SetVectorAttributeToVectorExpression {
            public const nint m_nExpression = 0x1C8; // VectorExpressionType_t
            public const nint m_vInput1 = 0x1D0; // CPerParticleVecInput
            public const nint m_vInput2 = 0x848; // CPerParticleVecInput
            public const nint m_nOutputField = 0xEC0; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0xEC4; // ParticleSetMethod_t
            public const nint m_bNormalizedOutput = 0xEC8; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapTransformVisibilityToVector {
            public const nint m_nSetMethod = 0x1C0; // ParticleSetMethod_t
            public const nint m_TransformInput = 0x1C8; // CParticleTransformInput
            public const nint m_nFieldOutput = 0x230; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x234; // float32
            public const nint m_flInputMax = 0x238; // float32
            public const nint m_vecOutputMin = 0x23C; // Vector
            public const nint m_vecOutputMax = 0x248; // Vector
            public const nint m_flRadius = 0x254; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DirectionBetweenVecsToVec {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecPoint1 = 0x1C8; // CPerParticleVecInput
            public const nint m_vecPoint2 = 0x840; // CPerParticleVecInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_MovementLoopInsideSphere {
            public const nint m_nCP = 0x1C0; // int32
            public const nint m_flDistance = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_vecScale = 0x328; // CParticleCollectionVecInput
            public const nint m_nDistSqrAttr = 0x9A0; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderSimpleModelCollection {
            public const nint m_bCenterOffset = 0x210; // bool
            public const nint m_hModel = 0x218; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_modelInput = 0x220; // CParticleModelInput
            public const nint m_fSizeCullScale = 0x280; // CParticleCollectionFloatInput
            public const nint m_bDisableShadows = 0x3E0; // bool
            public const nint m_bDisableMotionBlur = 0x3E1; // bool
            public const nint m_bAcceptsDecals = 0x3E2; // bool
            public const nint m_nAngularVelocityField = 0x3E4; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_QuantizeCPComponent {
            public const nint m_flInputValue = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_nCPOutput = 0x328; // int32
            public const nint m_nOutVectorField = 0x32C; // int32
            public const nint m_flQuantizeValue = 0x330; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_PlayEndCapWhenFinished {
            public const nint m_bFireOnEmissionEnd = 0x1C8; // bool
            public const nint m_bIncludeChildren = 0x1C9; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InitFloatCollection {
            public const nint m_InputValue = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_nOutputField = 0x328; // ParticleAttributeIndex_t
        }
        // Parent: None
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPathParameters {
            public const nint m_nStartControlPointNumber = 0x0; // int32
            public const nint m_nEndControlPointNumber = 0x4; // int32
            public const nint m_nBulgeControl = 0x8; // int32
            public const nint m_flBulge = 0xC; // float32
            public const nint m_flMidPoint = 0x10; // float32
            public const nint m_vStartPointOffset = 0x14; // Vector
            public const nint m_vMidPointOffset = 0x20; // Vector
            public const nint m_vEndOffset = 0x2C; // Vector
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapScalarEndCap {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // float32
            public const nint m_flInputMax = 0x1CC; // float32
            public const nint m_flOutputMin = 0x1D0; // float32
            public const nint m_flOutputMax = 0x1D4; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateFromPlaneCache {
            public const nint m_vecOffsetMin = 0x1C8; // Vector
            public const nint m_vecOffsetMax = 0x1D4; // Vector
            public const nint m_bUseNormal = 0x1E1; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ControlPointToRadialScreenSpace {
            public const nint m_nCPIn = 0x1C8; // int32
            public const nint m_vecCP1Pos = 0x1CC; // Vector
            public const nint m_nCPOut = 0x1D8; // int32
            public const nint m_nCPOutField = 0x1DC; // int32
            public const nint m_nCPSSPosOut = 0x1E0; // int32
        }
        // Parent: CSpinUpdateBase
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SpinUpdate {
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_NormalOffset {
            public const nint m_OffsetMin = 0x1C8; // Vector
            public const nint m_OffsetMax = 0x1D4; // Vector
            public const nint m_nControlPointNumber = 0x1E0; // int32
            public const nint m_bLocalCoords = 0x1E4; // bool
            public const nint m_bNormalize = 0x1E5; // bool
        }
        // Parent: C_OP_RemapDistanceToLineSegmentBase
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapDistanceToLineSegmentToVector {
            public const nint m_nFieldOutput = 0x1D8; // ParticleAttributeIndex_t
            public const nint m_vMinOutputValue = 0x1DC; // Vector
            public const nint m_vMaxOutputValue = 0x1E8; // Vector
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderAsModels {
            public const nint m_ModelList = 0x210; // CUtlVector<ModelReference_t>
            public const nint m_flModelScale = 0x22C; // float32
            public const nint m_bFitToModelSize = 0x230; // bool
            public const nint m_bNonUniformScaling = 0x231; // bool
            public const nint m_nXAxisScalingAttribute = 0x234; // ParticleAttributeIndex_t
            public const nint m_nYAxisScalingAttribute = 0x238; // ParticleAttributeIndex_t
            public const nint m_nZAxisScalingAttribute = 0x23C; // ParticleAttributeIndex_t
            public const nint m_nSizeCullBloat = 0x240; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreationNoise {
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_bAbsVal = 0x1CC; // bool
            public const nint m_bAbsValInv = 0x1CD; // bool
            public const nint m_flOffset = 0x1D0; // float32
            public const nint m_flOutputMin = 0x1D4; // float32
            public const nint m_flOutputMax = 0x1D8; // float32
            public const nint m_flNoiseScale = 0x1DC; // float32
            public const nint m_flNoiseScaleLoc = 0x1E0; // float32
            public const nint m_vecOffsetLoc = 0x1E4; // Vector
            public const nint m_flWorldTimeScale = 0x1F0; // float32
        }
        // Parent: CGeneralSpin
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_Spin {
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ParticleNamedValueConfiguration_t {
            public const nint m_ConfigName = 0x0; // CUtlString
            public const nint m_ConfigValue = 0x8; // KeyValues3
            public const nint m_iAttachType = 0x18; // 
            public const nint m_BoundEntityPath = 0x20; // CUtlString
            public const nint m_strEntityScope = 0x28; // CUtlString
            public const nint m_strAttachmentName = 0x30; // CUtlString
        }
        // Parent: CParticleInput
        // Field count: 23
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MParticleCustomFieldDefaultValue
        public static class CParticleVecInput {
            public const nint m_nType = 0x10; // ParticleVecType_t
            public const nint m_vLiteralValue = 0x14; // Vector
            public const nint m_LiteralColor = 0x20; // Color
            public const nint m_NamedValue = 0x28; // CParticleNamedValueRef
            public const nint m_bFollowNamedValue = 0x68; // bool
            public const nint m_nVectorAttribute = 0x6C; // ParticleAttributeIndex_t
            public const nint m_vVectorAttributeScale = 0x70; // Vector
            public const nint m_nControlPoint = 0x7C; // int32
            public const nint m_nDeltaControlPoint = 0x80; // int32
            public const nint m_vCPValueScale = 0x84; // Vector
            public const nint m_vCPRelativePosition = 0x90; // Vector
            public const nint m_vCPRelativeDir = 0x9C; // Vector
            public const nint m_FloatComponentX = 0xA8; // CParticleFloatInput
            public const nint m_FloatComponentY = 0x208; // CParticleFloatInput
            public const nint m_FloatComponentZ = 0x368; // CParticleFloatInput
            public const nint m_FloatInterp = 0x4C8; // CParticleFloatInput
            public const nint m_flInterpInput0 = 0x628; // float32
            public const nint m_flInterpInput1 = 0x62C; // float32
            public const nint m_vInterpOutput0 = 0x630; // Vector
            public const nint m_vInterpOutput1 = 0x63C; // Vector
            public const nint m_Gradient = 0x648; // CColorGradient
            public const nint m_vRandomMin = 0x660; // Vector
            public const nint m_vRandomMax = 0x66C; // Vector
        }
        // Parent: CParticleFunctionEmitter
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_InstantaneousEmitter {
            public const nint m_nParticlesToEmit = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_flStartTime = 0x328; // CParticleCollectionFloatInput
            public const nint m_flInitFromKilledParentParticles = 0x488; // float32
            public const nint m_nEventType = 0x48C; // EventTypeSelection_t
            public const nint m_flParentParticleScale = 0x490; // CParticleCollectionFloatInput
            public const nint m_nMaxEmittedPerFrame = 0x5F0; // int32
            public const nint m_nSnapshotControlPoint = 0x5F4; // int32
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ConstrainLineLength {
            public const nint m_flMinDistance = 0x1C0; // float32
            public const nint m_flMaxDistance = 0x1C4; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_LifespanFromVelocity {
            public const nint m_vecComponentScale = 0x1C8; // Vector
            public const nint m_flTraceOffset = 0x1D4; // float32
            public const nint m_flMaxTraceLength = 0x1D8; // float32
            public const nint m_flTraceTolerance = 0x1DC; // float32
            public const nint m_nMaxPlanes = 0x1E0; // int32
            public const nint m_CollisionGroupName = 0x1E8; // char[128]
            public const nint m_nTraceSet = 0x268; // ParticleTraceSet_t
            public const nint m_bIncludeWater = 0x278; // bool
        }
        // Parent: CBaseRendererSource2
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CBaseTrailRenderer {
            public const nint m_nOrientationType = 0x2AA8; // ParticleOrientationChoiceList_t
            public const nint m_nOrientationControlPoint = 0x2AAC; // int32
            public const nint m_flMinSize = 0x2AB0; // float32
            public const nint m_flMaxSize = 0x2AB4; // float32
            public const nint m_flStartFadeSize = 0x2AB8; // 
            public const nint m_flEndFadeSize = 0x2C18; // 
            public const nint m_bClampV = 0x2D78; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_VelocityFromCP {
            public const nint m_velocityInput = 0x1C8; // CParticleCollectionVecInput
            public const nint m_transformInput = 0x840; // CParticleTransformInput
            public const nint m_flVelocityScale = 0x8A8; // float32
            public const nint m_bDirectionOnly = 0x8AC; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointOrientation {
            public const nint m_bUseWorldLocation = 0x1C8; // bool
            public const nint m_bRandomize = 0x1CA; // bool
            public const nint m_bSetOnce = 0x1CB; // bool
            public const nint m_nCP = 0x1CC; // int32
            public const nint m_nHeadLocation = 0x1D0; // int32
            public const nint m_vecRotation = 0x1D4; // QAngle
            public const nint m_vecRotationB = 0x1E0; // QAngle
            public const nint m_flInterpolation = 0x1F0; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 12
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_MovementSkinnedPositionFromCPSnapshot {
            public const nint m_nSnapshotControlPointNumber = 0x1C0; // int32
            public const nint m_nControlPointNumber = 0x1C4; // int32
            public const nint m_bRandom = 0x1C8; // bool
            public const nint m_nRandomSeed = 0x1CC; // int32
            public const nint m_bSetNormal = 0x1D0; // bool
            public const nint m_bSetRadius = 0x1D1; // bool
            public const nint m_nIndexType = 0x1D4; // SnapshotIndexType_t
            public const nint m_flReadIndex = 0x1D8; // CPerParticleFloatInput
            public const nint m_flIncrement = 0x338; // CParticleCollectionFloatInput
            public const nint m_nFullLoopIncrement = 0x498; // CParticleCollectionFloatInput
            public const nint m_nSnapShotStartPoint = 0x5F8; // CParticleCollectionFloatInput
            public const nint m_flInterpolation = 0x758; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 15
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_OscillateVector {
            public const nint m_RateMin = 0x1C0; // Vector
            public const nint m_RateMax = 0x1CC; // Vector
            public const nint m_FrequencyMin = 0x1D8; // Vector
            public const nint m_FrequencyMax = 0x1E4; // Vector
            public const nint m_nField = 0x1F0; // ParticleAttributeIndex_t
            public const nint m_bProportional = 0x1F4; // bool
            public const nint m_bProportionalOp = 0x1F5; // bool
            public const nint m_bOffset = 0x1F6; // bool
            public const nint m_flStartTime_min = 0x1F8; // float32
            public const nint m_flStartTime_max = 0x1FC; // float32
            public const nint m_flEndTime_min = 0x200; // float32
            public const nint m_flEndTime_max = 0x204; // float32
            public const nint m_flOscMult = 0x208; // CPerParticleFloatInput
            public const nint m_flOscAdd = 0x368; // CPerParticleFloatInput
            public const nint m_flRateScale = 0x4C8; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 15
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_PositionLock {
            public const nint m_TransformInput = 0x1C0; // CParticleTransformInput
            public const nint m_flStartTime_min = 0x228; // float32
            public const nint m_flStartTime_max = 0x22C; // float32
            public const nint m_flStartTime_exp = 0x230; // float32
            public const nint m_flEndTime_min = 0x234; // float32
            public const nint m_flEndTime_max = 0x238; // float32
            public const nint m_flEndTime_exp = 0x23C; // float32
            public const nint m_flRange = 0x240; // float32
            public const nint m_flRangeBias = 0x248; // CParticleCollectionFloatInput
            public const nint m_flJumpThreshold = 0x3A8; // float32
            public const nint m_flPrevPosScale = 0x3AC; // float32
            public const nint m_bLockRot = 0x3B0; // bool
            public const nint m_vecScale = 0x3B8; // CParticleCollectionVecInput
            public const nint m_nFieldOutput = 0xA30; // ParticleAttributeIndex_t
            public const nint m_nFieldOutputPrev = 0xA34; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderVRHapticEvent {
            public const nint m_nHand = 0x210; // ParticleVRHandChoiceList_t
            public const nint m_nOutputHandCP = 0x214; // int32
            public const nint m_nOutputField = 0x218; // int32
            public const nint m_flAmplitude = 0x220; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 12
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointToImpactPoint {
            public const nint m_nCPOut = 0x1C8; // int32
            public const nint m_nCPIn = 0x1CC; // int32
            public const nint m_flUpdateRate = 0x1D0; // float32
            public const nint m_flTraceLength = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_flStartOffset = 0x338; // float32
            public const nint m_flOffset = 0x33C; // float32
            public const nint m_vecTraceDir = 0x340; // Vector
            public const nint m_CollisionGroupName = 0x34C; // char[128]
            public const nint m_nTraceSet = 0x3CC; // ParticleTraceSet_t
            public const nint m_bSetToEndpoint = 0x3D0; // bool
            public const nint m_bTraceToClosestSurface = 0x3D1; // bool
            public const nint m_bIncludeWater = 0x3D2; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_InterpolateRadius {
            public const nint m_flStartTime = 0x1C0; // float32
            public const nint m_flEndTime = 0x1C4; // float32
            public const nint m_flStartScale = 0x1C8; // float32
            public const nint m_flEndScale = 0x1CC; // float32
            public const nint m_bEaseInAndOut = 0x1D0; // bool
            public const nint m_flBias = 0x1D4; // float32
        }
        // Parent: None
        // Field count: 1
        public static class ParticleAttributeIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ReinitializeScalarEndCap {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flOutputMin = 0x1C4; // float32
            public const nint m_flOutputMax = 0x1C8; // float32
        }
        // Parent: CParticleFunctionForce
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_TurbulenceForce {
            public const nint m_flNoiseCoordScale0 = 0x1D0; // float32
            public const nint m_flNoiseCoordScale1 = 0x1D4; // float32
            public const nint m_flNoiseCoordScale2 = 0x1D8; // float32
            public const nint m_flNoiseCoordScale3 = 0x1DC; // float32
            public const nint m_vecNoiseAmount0 = 0x1E0; // Vector
            public const nint m_vecNoiseAmount1 = 0x1EC; // Vector
            public const nint m_vecNoiseAmount2 = 0x1F8; // Vector
            public const nint m_vecNoiseAmount3 = 0x204; // Vector
        }
        // Parent: CParticleFunctionOperator
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapNamedModelElementOnceTimed {
            public const nint m_hModel = 0x1C0; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_inNames = 0x1C8; // CUtlVector<CUtlString>
            public const nint m_outNames = 0x1E0; // CUtlVector<CUtlString>
            public const nint m_fallbackNames = 0x1F8; // CUtlVector<CUtlString>
            public const nint m_bModelFromRenderer = 0x210; // bool
            public const nint m_bProportional = 0x211; // bool
            public const nint m_nFieldInput = 0x214; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x218; // ParticleAttributeIndex_t
            public const nint m_flRemapTime = 0x21C; // float32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointToPlayer {
            public const nint m_nCP1 = 0x1C8; // int32
            public const nint m_vecCP1Pos = 0x1CC; // Vector
            public const nint m_bOrientToEyes = 0x1D8; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_EndCapTimedFreeze {
            public const nint m_flFreezeTime = 0x1C0; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderGpuImplicit {
            public const nint m_bUsePerParticleRadius = 0x210; // bool
            public const nint m_nVertexCountKb = 0x214; // uint32
            public const nint m_nIndexCountKb = 0x218; // uint32
            public const nint m_fGridSize = 0x220; // 
            public const nint m_fRadiusScale = 0x380; // 
            public const nint m_fIsosurfaceThreshold = 0x4E0; // 
            public const nint m_nScaleCP = 0x640; // int32
            public const nint m_hMaterial = 0x648; // CStrongHandle<InfoForResourceTypeIMaterial2>
        }
        // Parent: IParticleEffect
        // Field count: 32
        public static class CNewParticleEffect {
            public const nint m_pNext = 0x10; // CNewParticleEffect*
            public const nint m_pPrev = 0x18; // CNewParticleEffect*
            public const nint m_pParticles = 0x20; // IParticleCollection*
            public const nint m_pDebugName = 0x28; // char*
            public const nint m_bDontRemove = 0x0; // bitfield:1
            public const nint m_bRemove = 0x0; // bitfield:1
            public const nint m_bNeedsBBoxUpdate = 0x0; // bitfield:1
            public const nint m_bIsFirstFrame = 0x0; // bitfield:1
            public const nint m_bAutoUpdateBBox = 0x0; // bitfield:1
            public const nint m_bAllocated = 0x0; // bitfield:1
            public const nint m_bSimulate = 0x0; // bitfield:1
            public const nint m_bShouldPerformCullCheck = 0x0; // bitfield:1
            public const nint m_bForceNoDraw = 0x0; // bitfield:1
            public const nint m_bShouldSave = 0x0; // bitfield:1
            public const nint m_bDisableAggregation = 0x0; // bitfield:1
            public const nint m_bShouldSimulateDuringGamePaused = 0x0; // bitfield:1
            public const nint m_bShouldCheckFoW = 0x0; // bitfield:1
            public const nint m_vSortOrigin = 0x40; // Vector
            public const nint m_flScale = 0x4C; // float32
            public const nint m_hOwner = 0x50; // PARTICLE_EHANDLE__*
            public const nint m_pOwningParticleProperty = 0x58; // CParticleProperty*
            public const nint m_flFreezeTransitionStart = 0x70; // float32
            public const nint m_flFreezeTransitionDuration = 0x74; // float32
            public const nint m_flFreezeTransitionOverride = 0x78; // float32
            public const nint m_bFreezeTransitionActive = 0x7C; // bool
            public const nint m_bFreezeTargetState = 0x7D; // bool
            public const nint m_bCanFreeze = 0x7E; // bool
            public const nint m_LastMin = 0x80; // Vector
            public const nint m_LastMax = 0x8C; // Vector
            public const nint m_nSplitScreenUser = 0x98; // CSplitScreenSlot
            public const nint m_vecAggregationCenter = 0x9C; // Vector
            public const nint m_RefCount = 0xC0; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetRandomControlPointPosition {
            public const nint m_bUseWorldLocation = 0x1C8; // bool
            public const nint m_bOrient = 0x1C9; // bool
            public const nint m_nCP1 = 0x1CC; // int32
            public const nint m_nHeadLocation = 0x1D0; // int32
            public const nint m_flReRandomRate = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_vecCPMinPos = 0x338; // Vector
            public const nint m_vecCPMaxPos = 0x344; // Vector
            public const nint m_flInterpolation = 0x350; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapTransformVisibilityToScalar {
            public const nint m_nSetMethod = 0x1C0; // ParticleSetMethod_t
            public const nint m_TransformInput = 0x1C8; // CParticleTransformInput
            public const nint m_nFieldOutput = 0x230; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x234; // float32
            public const nint m_flInputMax = 0x238; // float32
            public const nint m_flOutputMin = 0x23C; // float32
            public const nint m_flOutputMax = 0x240; // float32
            public const nint m_flRadius = 0x244; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapControlPointDirectionToVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x1C4; // float32
            public const nint m_nControlPointNumber = 0x1C8; // int32
        }
        // Parent: CParticleFunction
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CParticleFunctionOperator {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DragRelativeToPlane {
            public const nint m_flDragAtPlane = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_flFalloff = 0x320; // CParticleCollectionFloatInput
            public const nint m_bDirectional = 0x480; // bool
            public const nint m_vecPlaneNormal = 0x488; // CParticleCollectionVecInput
            public const nint m_nControlPointNumber = 0xB00; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetCPtoVector {
            public const nint m_nCPInput = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ParticleNamedValueSource_t {
            public const nint m_Name = 0x0; // CUtlString
            public const nint m_IsPublic = 0x8; // bool
            public const nint m_ValueType = 0xC; // PulseValueType_t
            public const nint m_DefaultConfig = 0x10; // ParticleNamedValueConfiguration_t
            public const nint m_NamedConfigs = 0x48; // CUtlVector<ParticleNamedValueConfiguration_t>
        }
        // Parent: CGeneralRandomRotation
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomYaw {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SnapshotRigidSkinToBones {
            public const nint m_bTransformNormals = 0x1C0; // bool
            public const nint m_bTransformRadii = 0x1C1; // bool
            public const nint m_nControlPointNumber = 0x1C4; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetSingleControlPointPosition {
            public const nint m_bSetOnce = 0x1C8; // bool
            public const nint m_nCP1 = 0x1CC; // int32
            public const nint m_vecCP1Pos = 0x1D0; // CParticleCollectionVecInput
            public const nint m_transformInput = 0x848; // CParticleTransformInput
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_DistanceToNeighborCull {
            public const nint m_flDistance = 0x1C8; // CPerParticleFloatInput
            public const nint m_bIncludeRadii = 0x328; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapCPtoScalar {
            public const nint m_nCPInput = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nField = 0x1C8; // int32
            public const nint m_flInputMin = 0x1CC; // float32
            public const nint m_flInputMax = 0x1D0; // float32
            public const nint m_flOutputMin = 0x1D4; // float32
            public const nint m_flOutputMax = 0x1D8; // float32
            public const nint m_flStartTime = 0x1DC; // float32
            public const nint m_flEndTime = 0x1E0; // float32
            public const nint m_flInterpRate = 0x1E4; // float32
            public const nint m_nSetMethod = 0x1E8; // ParticleSetMethod_t
        }
        // Parent: CParticleFunction
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CParticleFunctionRenderer {
            public const nint VisibilityInputs = 0x1C0; // CParticleVisibilityInputs
            public const nint m_bCannotBeRefracted = 0x208; // bool
            public const nint m_bSkipRenderingOnMobile = 0x209; // bool
        }
        // Parent: IParticleSystemDefinition
        // Field count: 65
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CParticleSystemDefinition {
            public const nint m_nBehaviorVersion = 0x8; // int32
            public const nint m_PreEmissionOperators = 0x10; // CUtlVector<CParticleFunctionPreEmission*>
            public const nint m_Emitters = 0x28; // CUtlVector<CParticleFunctionEmitter*>
            public const nint m_Initializers = 0x40; // CUtlVector<CParticleFunctionInitializer*>
            public const nint m_Operators = 0x58; // CUtlVector<CParticleFunctionOperator*>
            public const nint m_ForceGenerators = 0x70; // CUtlVector<CParticleFunctionForce*>
            public const nint m_Constraints = 0x88; // CUtlVector<CParticleFunctionConstraint*>
            public const nint m_Renderers = 0xA0; // CUtlVector<CParticleFunctionRenderer*>
            public const nint m_Children = 0xB8; // CUtlVector<ParticleChildrenInfo_t>
            public const nint m_nFirstMultipleOverride_BackwardCompat = 0x178; // int32
            public const nint m_nInitialParticles = 0x210; // int32
            public const nint m_nMaxParticles = 0x214; // int32
            public const nint m_nGroupID = 0x218; // int32
            public const nint m_BoundingBoxMin = 0x21C; // Vector
            public const nint m_BoundingBoxMax = 0x228; // Vector
            public const nint m_flDepthSortBias = 0x234; // float32
            public const nint m_nSortOverridePositionCP = 0x238; // int32
            public const nint m_bInfiniteBounds = 0x23C; // bool
            public const nint m_bEnableNamedValues = 0x23D; // bool
            public const nint m_NamedValueDomain = 0x240; // CUtlString
            public const nint m_NamedValueLocals = 0x248; // CUtlVector<ParticleNamedValueSource_t*>
            public const nint m_ConstantColor = 0x260; // Color
            public const nint m_ConstantNormal = 0x264; // Vector
            public const nint m_flConstantRadius = 0x270; // float32
            public const nint m_flConstantRotation = 0x274; // float32
            public const nint m_flConstantRotationSpeed = 0x278; // float32
            public const nint m_flConstantLifespan = 0x27C; // float32
            public const nint m_nConstantSequenceNumber = 0x280; // int32
            public const nint m_nConstantSequenceNumber1 = 0x284; // int32
            public const nint m_nSnapshotControlPoint = 0x288; // int32
            public const nint m_hSnapshot = 0x290; // CStrongHandle<InfoForResourceTypeIParticleSnapshot>
            public const nint m_pszCullReplacementName = 0x298; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_flCullRadius = 0x2A0; // float32
            public const nint m_flCullFillCost = 0x2A4; // float32
            public const nint m_nCullControlPoint = 0x2A8; // int32
            public const nint m_hFallback = 0x2B0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_nFallbackMaxCount = 0x2B8; // int32
            public const nint m_hLowViolenceDef = 0x2C0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_hReferenceReplacement = 0x2C8; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_flPreSimulationTime = 0x2D0; // float32
            public const nint m_flStopSimulationAfterTime = 0x2D4; // float32
            public const nint m_flMaximumTimeStep = 0x2D8; // float32
            public const nint m_flMaximumSimTime = 0x2DC; // float32
            public const nint m_flMinimumSimTime = 0x2E0; // float32
            public const nint m_flMinimumTimeStep = 0x2E4; // float32
            public const nint m_nMinimumFrames = 0x2E8; // int32
            public const nint m_nMinCPULevel = 0x2EC; // int32
            public const nint m_nMinGPULevel = 0x2F0; // int32
            public const nint m_flNoDrawTimeToGoToSleep = 0x2F4; // float32
            public const nint m_flMaxDrawDistance = 0x2F8; // float32
            public const nint m_flStartFadeDistance = 0x2FC; // float32
            public const nint m_flMaxCreationDistance = 0x300; // float32
            public const nint m_nAggregationMinAvailableParticles = 0x304; // int32
            public const nint m_flAggregateRadius = 0x308; // float32
            public const nint m_bShouldBatch = 0x30C; // bool
            public const nint m_bShouldHitboxesFallbackToRenderBounds = 0x30D; // bool
            public const nint m_bShouldHitboxesFallbackToSnapshot = 0x30E; // bool
            public const nint m_bShouldHitboxesFallbackToCollisionHulls = 0x30F; // bool
            public const nint m_nViewModelEffect = 0x310; // InheritableBoolType_t
            public const nint m_bScreenSpaceEffect = 0x314; // bool
            public const nint m_pszTargetLayerID = 0x318; // CUtlSymbolLarge
            public const nint m_nSkipRenderControlPoint = 0x320; // int32
            public const nint m_nAllowRenderControlPoint = 0x324; // int32
            public const nint m_bShouldSort = 0x328; // bool
            public const nint m_controlPointConfigurations = 0x370; // CUtlVector<ParticleControlPointConfiguration_t>
        }
        // Parent: C_OP_RemapNamedModelElementEndCap
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapNamedModelMeshGroupEndCap {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_PercentageBetweenTransformsVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C4; // float32
            public const nint m_flInputMax = 0x1C8; // float32
            public const nint m_vecOutputMin = 0x1CC; // Vector
            public const nint m_vecOutputMax = 0x1D8; // Vector
            public const nint m_TransformStart = 0x1E8; // CParticleTransformInput
            public const nint m_TransformEnd = 0x250; // CParticleTransformInput
            public const nint m_nSetMethod = 0x2B8; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x2BC; // bool
            public const nint m_bRadialCheck = 0x2BD; // bool
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderScreenVelocityRotate {
            public const nint m_flRotateRateDegrees = 0x210; // float32
            public const nint m_flForwardDegrees = 0x214; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_UpdateLightSource {
            public const nint m_vColorTint = 0x1C0; // Color
            public const nint m_flBrightnessScale = 0x1C4; // float32
            public const nint m_flRadiusScale = 0x1C8; // float32
            public const nint m_flMinimumLightingRadius = 0x1CC; // float32
            public const nint m_flMaximumLightingRadius = 0x1D0; // float32
            public const nint m_flPositionDampingConstant = 0x1D4; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateWithinBox {
            public const nint m_vecMin = 0x1C8; // CPerParticleVecInput
            public const nint m_vecMax = 0x840; // CPerParticleVecInput
            public const nint m_nControlPointNumber = 0xEB8; // int32
            public const nint m_bLocalSpace = 0xEBC; // bool
            public const nint m_randomnessParameters = 0xEC0; // CRandomNumberGeneratorParameters
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ChooseRandomChildrenInGroup {
            public const nint m_nChildGroupID = 0x1C8; // int32
            public const nint m_flNumberOfChildren = 0x1D0; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 33
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ControlpointLight {
            public const nint m_flScale = 0x1C0; // float32
            public const nint m_nControlPoint1 = 0x650; // int32
            public const nint m_nControlPoint2 = 0x654; // int32
            public const nint m_nControlPoint3 = 0x658; // int32
            public const nint m_nControlPoint4 = 0x65C; // int32
            public const nint m_vecCPOffset1 = 0x660; // Vector
            public const nint m_vecCPOffset2 = 0x66C; // Vector
            public const nint m_vecCPOffset3 = 0x678; // Vector
            public const nint m_vecCPOffset4 = 0x684; // Vector
            public const nint m_LightFiftyDist1 = 0x690; // float32
            public const nint m_LightZeroDist1 = 0x694; // float32
            public const nint m_LightFiftyDist2 = 0x698; // float32
            public const nint m_LightZeroDist2 = 0x69C; // float32
            public const nint m_LightFiftyDist3 = 0x6A0; // float32
            public const nint m_LightZeroDist3 = 0x6A4; // float32
            public const nint m_LightFiftyDist4 = 0x6A8; // float32
            public const nint m_LightZeroDist4 = 0x6AC; // float32
            public const nint m_LightColor1 = 0x6B0; // Color
            public const nint m_LightColor2 = 0x6B4; // Color
            public const nint m_LightColor3 = 0x6B8; // Color
            public const nint m_LightColor4 = 0x6BC; // Color
            public const nint m_bLightType1 = 0x6C0; // bool
            public const nint m_bLightType2 = 0x6C1; // bool
            public const nint m_bLightType3 = 0x6C2; // bool
            public const nint m_bLightType4 = 0x6C3; // bool
            public const nint m_bLightDynamic1 = 0x6C4; // bool
            public const nint m_bLightDynamic2 = 0x6C5; // bool
            public const nint m_bLightDynamic3 = 0x6C6; // bool
            public const nint m_bLightDynamic4 = 0x6C7; // bool
            public const nint m_bUseNormal = 0x6C8; // bool
            public const nint m_bUseHLambert = 0x6C9; // bool
            public const nint m_bClampLowerRange = 0x6CE; // bool
            public const nint m_bClampUpperRange = 0x6CF; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_VectorFieldSnapshot {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nAttributeToWrite = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nLocalSpaceCP = 0x1C8; // int32
            public const nint m_flInterpolation = 0x1D0; // CPerParticleFloatInput
            public const nint m_vecScale = 0x330; // CPerParticleVecInput
            public const nint m_flBoundaryDampening = 0x9A8; // float32
            public const nint m_bSetVelocity = 0x9AC; // bool
            public const nint m_bLockToSurface = 0x9AD; // bool
            public const nint m_flGridSpacing = 0x9B0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_CylindricalDistanceToTransform {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // CPerParticleFloatInput
            public const nint m_flInputMax = 0x328; // CPerParticleFloatInput
            public const nint m_flOutputMin = 0x488; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x5E8; // CPerParticleFloatInput
            public const nint m_TransformStart = 0x748; // CParticleTransformInput
            public const nint m_TransformEnd = 0x7B0; // CParticleTransformInput
            public const nint m_nSetMethod = 0x818; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x81C; // bool
            public const nint m_bAdditive = 0x81D; // bool
            public const nint m_bCapsule = 0x81E; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 13
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_PositionPlaceOnGround {
            public const nint m_flOffset = 0x1C8; // CPerParticleFloatInput
            public const nint m_flMaxTraceLength = 0x328; // CPerParticleFloatInput
            public const nint m_CollisionGroupName = 0x488; // char[128]
            public const nint m_nTraceSet = 0x508; // ParticleTraceSet_t
            public const nint m_nTraceMissBehavior = 0x518; // ParticleTraceMissBehavior_t
            public const nint m_bIncludeWater = 0x51C; // bool
            public const nint m_bSetNormal = 0x51D; // bool
            public const nint m_bSetPXYZOnly = 0x51E; // bool
            public const nint m_bTraceAlongNormal = 0x51F; // bool
            public const nint m_bOffsetonColOnly = 0x520; // bool
            public const nint m_flOffsetByRadiusFactor = 0x524; // float32
            public const nint m_nPreserveOffsetCP = 0x528; // int32
            public const nint m_nIgnoreCP = 0x52C; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomScalar {
            public const nint m_flMin = 0x1C8; // float32
            public const nint m_flMax = 0x1CC; // float32
            public const nint m_flExponent = 0x1D0; // float32
            public const nint m_nFieldOutput = 0x1D4; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderPostProcessing {
            public const nint m_flPostProcessStrength = 0x210; // CPerParticleFloatInput
            public const nint m_hPostTexture = 0x370; // CStrongHandle<InfoForResourceTypeCPostProcessingResource>
            public const nint m_nPriority = 0x378; // ParticlePostProcessPriorityGroup_t
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 27
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_WorldTraceConstraint {
            public const nint m_nCP = 0x1C0; // int32
            public const nint m_vecCpOffset = 0x1C4; // Vector
            public const nint m_nCollisionMode = 0x1D0; // ParticleCollisionMode_t
            public const nint m_nCollisionModeMin = 0x1D4; // ParticleCollisionMode_t
            public const nint m_nTraceSet = 0x1D8; // ParticleTraceSet_t
            public const nint m_CollisionGroupName = 0x1DC; // char[128]
            public const nint m_bWorldOnly = 0x25C; // bool
            public const nint m_bBrushOnly = 0x25D; // bool
            public const nint m_bIncludeWater = 0x25E; // bool
            public const nint m_nIgnoreCP = 0x260; // int32
            public const nint m_flCpMovementTolerance = 0x264; // float32
            public const nint m_flRetestRate = 0x268; // float32
            public const nint m_flTraceTolerance = 0x26C; // float32
            public const nint m_flCollisionConfirmationSpeed = 0x270; // float32
            public const nint m_nMaxTracesPerFrame = 0x274; // float32
            public const nint m_flRadiusScale = 0x278; // CPerParticleFloatInput
            public const nint m_flBounceAmount = 0x3D8; // CPerParticleFloatInput
            public const nint m_flSlideAmount = 0x538; // CPerParticleFloatInput
            public const nint m_flRandomDirScale = 0x698; // CPerParticleFloatInput
            public const nint m_bDecayBounce = 0x7F8; // bool
            public const nint m_bKillonContact = 0x7F9; // bool
            public const nint m_flMinSpeed = 0x7FC; // float32
            public const nint m_bSetNormal = 0x800; // bool
            public const nint m_nStickOnCollisionField = 0x804; // ParticleAttributeIndex_t
            public const nint m_flStopSpeed = 0x808; // CPerParticleFloatInput
            public const nint m_nEntityStickDataField = 0x968; // ParticleAttributeIndex_t
            public const nint m_nEntityStickNormalField = 0x96C; // ParticleAttributeIndex_t
        }
        // Parent: CParticleVecInput
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyCustomEditor
        public static class CParticleCollectionVecInput {
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderBlobs {
            public const nint m_cubeWidth = 0x210; // 
            public const nint m_cutoffRadius = 0x370; // 
            public const nint m_renderRadius = 0x4D0; // 
            public const nint m_nVertexCountKb = 0x630; // uint32
            public const nint m_nIndexCountKb = 0x634; // uint32
            public const nint m_nScaleCP = 0x638; // int32
            public const nint m_MaterialVars = 0x640; // CUtlVector<MaterialVariable_t>
            public const nint m_hMaterial = 0x670; // CStrongHandle<InfoForResourceTypeIMaterial2>
        }
        // Parent: CParticleFunctionOperator
        // Field count: 13
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_OscillateScalar {
            public const nint m_RateMin = 0x1C0; // float32
            public const nint m_RateMax = 0x1C4; // float32
            public const nint m_FrequencyMin = 0x1C8; // float32
            public const nint m_FrequencyMax = 0x1CC; // float32
            public const nint m_nField = 0x1D0; // ParticleAttributeIndex_t
            public const nint m_bProportional = 0x1D4; // bool
            public const nint m_bProportionalOp = 0x1D5; // bool
            public const nint m_flStartTime_min = 0x1D8; // float32
            public const nint m_flStartTime_max = 0x1DC; // float32
            public const nint m_flEndTime_min = 0x1E0; // float32
            public const nint m_flEndTime_max = 0x1E4; // float32
            public const nint m_flOscMult = 0x1E8; // float32
            public const nint m_flOscAdd = 0x1EC; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_FadeOut {
            public const nint m_flFadeOutTimeMin = 0x1C0; // float32
            public const nint m_flFadeOutTimeMax = 0x1C4; // float32
            public const nint m_flFadeOutTimeExp = 0x1C8; // float32
            public const nint m_flFadeBias = 0x1CC; // float32
            public const nint m_bProportional = 0x200; // bool
            public const nint m_bEaseInAndOut = 0x201; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomSequence {
            public const nint m_nSequenceMin = 0x1C8; // int32
            public const nint m_nSequenceMax = 0x1CC; // int32
            public const nint m_bShuffle = 0x1D0; // bool
            public const nint m_bLinear = 0x1D1; // bool
            public const nint m_WeightedList = 0x1D8; // CUtlVector<SequenceWeightedList_t>
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RampScalarSplineSimple {
            public const nint m_Rate = 0x1C0; // float32
            public const nint m_flStartTime = 0x1C4; // float32
            public const nint m_flEndTime = 0x1C8; // float32
            public const nint m_nField = 0x1F0; // ParticleAttributeIndex_t
            public const nint m_bEaseOut = 0x1F4; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_DistanceCull {
            public const nint m_nControlPoint = 0x1C8; // int32
            public const nint m_flDistance = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_bCullInside = 0x330; // bool
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_CollideWithParentParticles {
            public const nint m_flParentRadiusScale = 0x1C0; // CPerParticleFloatInput
            public const nint m_flRadiusScale = 0x320; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InitFromVectorFieldSnapshot {
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_nLocalSpaceCP = 0x1CC; // int32
            public const nint m_nWeightUpdateCP = 0x1D0; // int32
            public const nint m_bUseVerticalVelocity = 0x1D4; // bool
            public const nint m_vecScale = 0x1D8; // CPerParticleVecInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetVectorAttributeToVectorExpression {
            public const nint m_nExpression = 0x1C0; // VectorExpressionType_t
            public const nint m_vInput1 = 0x1C8; // CPerParticleVecInput
            public const nint m_vInput2 = 0x840; // CPerParticleVecInput
            public const nint m_nOutputField = 0xEB8; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0xEBC; // ParticleSetMethod_t
            public const nint m_bNormalizedOutput = 0xEC0; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_AddVectorToVector {
            public const nint m_vecScale = 0x1C8; // Vector
            public const nint m_nFieldOutput = 0x1D4; // ParticleAttributeIndex_t
            public const nint m_nFieldInput = 0x1D8; // ParticleAttributeIndex_t
            public const nint m_vOffsetMin = 0x1DC; // Vector
            public const nint m_vOffsetMax = 0x1E8; // Vector
            public const nint m_randomnessParameters = 0x1F4; // CRandomNumberGeneratorParameters
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapInitialVisibilityScalar {
            public const nint m_nFieldOutput = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1D0; // float32
            public const nint m_flInputMax = 0x1D4; // float32
            public const nint m_flOutputMin = 0x1D8; // float32
            public const nint m_flOutputMax = 0x1DC; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapTransformOrientationToYaw {
            public const nint m_TransformInput = 0x1C0; // CParticleTransformInput
            public const nint m_nFieldOutput = 0x228; // ParticleAttributeIndex_t
            public const nint m_flRotOffset = 0x22C; // float32
            public const nint m_flSpinStrength = 0x230; // float32
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderStatusEffect {
            public const nint m_pTextureColorWarp = 0x210; // 
            public const nint m_pTextureDetail2 = 0x218; // 
            public const nint m_pTextureDiffuseWarp = 0x220; // 
            public const nint m_pTextureFresnelColorWarp = 0x228; // 
            public const nint m_pTextureFresnelWarp = 0x230; // 
            public const nint m_pTextureSpecularWarp = 0x238; // 
            public const nint m_pTextureEnvMap = 0x240; // 
        }
        // Parent: CParticleFunctionForce
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RandomForce {
            public const nint m_MinForce = 0x1D0; // Vector
            public const nint m_MaxForce = 0x1DC; // Vector
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapParticleCountOnScalarEndCap {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nInputMin = 0x1C4; // int32
            public const nint m_nInputMax = 0x1C8; // int32
            public const nint m_flOutputMin = 0x1CC; // float32
            public const nint m_flOutputMax = 0x1D0; // float32
            public const nint m_bBackwards = 0x1D4; // bool
            public const nint m_nSetMethod = 0x1D8; // ParticleSetMethod_t
        }
        // Parent: None
        // Field count: 16
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ParticlePreviewState_t {
            public const nint m_previewModel = 0x0; // CUtlString
            public const nint m_nModSpecificData = 0x8; // uint32
            public const nint m_groundType = 0xC; // PetGroundType_t
            public const nint m_sequenceName = 0x10; // CUtlString
            public const nint m_nFireParticleOnSequenceFrame = 0x18; // int32
            public const nint m_hitboxSetName = 0x20; // CUtlString
            public const nint m_materialGroupName = 0x28; // CUtlString
            public const nint m_vecBodyGroups = 0x30; // CUtlVector<ParticlePreviewBodyGroup_t>
            public const nint m_flPlaybackSpeed = 0x48; // float32
            public const nint m_flParticleSimulationRate = 0x4C; // float32
            public const nint m_bShouldDrawHitboxes = 0x50; // bool
            public const nint m_bShouldDrawAttachments = 0x51; // bool
            public const nint m_bShouldDrawAttachmentNames = 0x52; // bool
            public const nint m_bShouldDrawControlPointAxes = 0x53; // bool
            public const nint m_bAnimationNonLooping = 0x54; // bool
            public const nint m_vecPreviewGravity = 0x58; // Vector
        }
        // Parent: CParticleFunctionForce
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_LocalAccelerationForce {
            public const nint m_nCP = 0x1D0; // int32
            public const nint m_nScaleCP = 0x1D4; // int32
            public const nint m_vecAccel = 0x1D8; // CParticleCollectionVecInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ModelCull {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_bBoundBox = 0x1C4; // bool
            public const nint m_bCullOutside = 0x1C5; // bool
            public const nint m_bUseBones = 0x1C6; // bool
            public const nint m_HitboxSetName = 0x1C7; // char[128]
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetFloat {
            public const nint m_InputValue = 0x1C0; // CPerParticleFloatInput
            public const nint m_nOutputField = 0x320; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x324; // ParticleSetMethod_t
            public const nint m_Lerp = 0x328; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 13
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapTransformToVector {
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_vInputMin = 0x1CC; // Vector
            public const nint m_vInputMax = 0x1D8; // Vector
            public const nint m_vOutputMin = 0x1E4; // Vector
            public const nint m_vOutputMax = 0x1F0; // Vector
            public const nint m_TransformInput = 0x200; // CParticleTransformInput
            public const nint m_LocalSpaceTransform = 0x268; // CParticleTransformInput
            public const nint m_flStartTime = 0x2D0; // float32
            public const nint m_flEndTime = 0x2D4; // float32
            public const nint m_nSetMethod = 0x2D8; // ParticleSetMethod_t
            public const nint m_bOffset = 0x2DC; // bool
            public const nint m_bAccelerate = 0x2DD; // bool
            public const nint m_flRemapBias = 0x2E0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SDFLighting {
            public const nint m_vLightingDir = 0x1C0; // Vector
            public const nint m_vTint_0 = 0x1CC; // Vector
            public const nint m_vTint_1 = 0x1D8; // Vector
        }
        // Parent: C_OP_RemapDistanceToLineSegmentBase
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapDistanceToLineSegmentToScalar {
            public const nint m_nFieldOutput = 0x1D8; // ParticleAttributeIndex_t
            public const nint m_flMinOutputValue = 0x1DC; // float32
            public const nint m_flMaxOutputValue = 0x1E0; // float32
        }
        // Parent: CParticleFloatInput
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyCustomEditor
        public static class CParticleRemapFloatInput {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapVectortoCP {
            public const nint m_nOutControlPointNumber = 0x1C0; // int32
            public const nint m_nFieldInput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nParticleNumber = 0x1C8; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 12
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetFromCPSnapshot {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nAttributeToRead = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nAttributeToWrite = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_nLocalSpaceCP = 0x1CC; // int32
            public const nint m_bRandom = 0x1D0; // bool
            public const nint m_bReverse = 0x1D1; // bool
            public const nint m_nRandomSeed = 0x1D4; // int32
            public const nint m_nSnapShotStartPoint = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_nSnapShotIncrement = 0x338; // CParticleCollectionFloatInput
            public const nint m_flInterpolation = 0x498; // CPerParticleFloatInput
            public const nint m_bSubSample = 0x5F8; // bool
            public const nint m_bPrev = 0x5F9; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 15
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DistanceBetweenCPsToCP {
            public const nint m_nStartCP = 0x1C8; // int32
            public const nint m_nEndCP = 0x1CC; // int32
            public const nint m_nOutputCP = 0x1D0; // int32
            public const nint m_nOutputCPField = 0x1D4; // int32
            public const nint m_bSetOnce = 0x1D8; // bool
            public const nint m_flInputMin = 0x1DC; // float32
            public const nint m_flInputMax = 0x1E0; // float32
            public const nint m_flOutputMin = 0x1E4; // float32
            public const nint m_flOutputMax = 0x1E8; // float32
            public const nint m_flMaxTraceLength = 0x1EC; // float32
            public const nint m_flLOSScale = 0x1F0; // float32
            public const nint m_bLOS = 0x1F4; // bool
            public const nint m_CollisionGroupName = 0x1F5; // char[128]
            public const nint m_nTraceSet = 0x278; // ParticleTraceSet_t
            public const nint m_nSetParent = 0x27C; // ParticleParentSetMode_t
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointToHand {
            public const nint m_nCP1 = 0x1C8; // int32
            public const nint m_nHand = 0x1CC; // int32
            public const nint m_vecCP1Pos = 0x1D0; // Vector
            public const nint m_bOrientToHand = 0x1DC; // bool
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ConstrainDistanceToPath {
            public const nint m_fMinDistance = 0x1C0; // float32
            public const nint m_flMaxDistance0 = 0x1C4; // float32
            public const nint m_flMaxDistanceMid = 0x1C8; // float32
            public const nint m_flMaxDistance1 = 0x1CC; // float32
            public const nint m_PathParameters = 0x1D0; // CPathParameters
            public const nint m_flTravelTime = 0x210; // float32
            public const nint m_nFieldScale = 0x214; // ParticleAttributeIndex_t
            public const nint m_nManualTField = 0x218; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DistanceCull {
            public const nint m_nControlPoint = 0x1C0; // int32
            public const nint m_vecPointOffset = 0x1C4; // Vector
            public const nint m_flDistance = 0x1D0; // float32
            public const nint m_bCullInside = 0x1D4; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapSDFDistanceToScalarAttribute {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nVectorFieldInput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flMinDistance = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_flMaxDistance = 0x328; // CParticleCollectionFloatInput
            public const nint m_flValueBelowMin = 0x488; // CParticleCollectionFloatInput
            public const nint m_flValueAtMin = 0x5E8; // CParticleCollectionFloatInput
            public const nint m_flValueAtMax = 0x748; // CParticleCollectionFloatInput
            public const nint m_flValueAboveMax = 0x8A8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateAlongPath {
            public const nint m_fMaxDistance = 0x1C8; // float32
            public const nint m_PathParams = 0x1D0; // CPathParameters
            public const nint m_bUseRandomCPs = 0x210; // bool
            public const nint m_vEndOffset = 0x214; // Vector
            public const nint m_bSaveOffset = 0x220; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointsToModelParticles {
            public const nint m_HitboxSetName = 0x1C0; // char[128]
            public const nint m_AttachmentName = 0x240; // char[128]
            public const nint m_nFirstControlPoint = 0x2C0; // int32
            public const nint m_nNumControlPoints = 0x2C4; // int32
            public const nint m_nFirstSourcePoint = 0x2C8; // int32
            public const nint m_bSkin = 0x2CC; // bool
            public const nint m_bAttachment = 0x2CD; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ColorInterpolateRandom {
            public const nint m_ColorFadeMin = 0x1C0; // Color
            public const nint m_ColorFadeMax = 0x1DC; // Color
            public const nint m_flFadeStartTime = 0x1EC; // float32
            public const nint m_flFadeEndTime = 0x1F0; // float32
            public const nint m_nFieldOutput = 0x1F4; // ParticleAttributeIndex_t
            public const nint m_bEaseInOut = 0x1F8; // bool
        }
        // Parent: C_INIT_RemapNamedModelElementToScalar
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapNamedModelSequenceToScalar {
        }
        // Parent: C_OP_RenderPoints
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderLights {
            public const nint m_flAnimationRate = 0x218; // float32
            public const nint m_nAnimationType = 0x21C; // AnimationType_t
            public const nint m_bAnimateInFPS = 0x220; // bool
            public const nint m_flMinSize = 0x224; // float32
            public const nint m_flMaxSize = 0x228; // float32
            public const nint m_flStartFadeSize = 0x22C; // float32
            public const nint m_flEndFadeSize = 0x230; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DecayClampCount {
            public const nint m_nCount = 0x1C0; // CParticleCollectionFloatInput
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CRandomNumberGeneratorParameters {
            public const nint m_bDistributeEvenly = 0x0; // bool
            public const nint m_nSeed = 0x4; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_ColorLitPerParticle {
            public const nint m_ColorMin = 0x1E0; // Color
            public const nint m_ColorMax = 0x1E4; // Color
            public const nint m_TintMin = 0x1E8; // Color
            public const nint m_TintMax = 0x1EC; // Color
            public const nint m_flTintPerc = 0x1F0; // float32
            public const nint m_nTintBlendMode = 0x1F4; // ParticleColorBlendMode_t
            public const nint m_flLightAmplification = 0x1F8; // float32
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderPoints {
            public const nint m_hMaterial = 0x210; // CStrongHandle<InfoForResourceTypeIMaterial2>
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_SetAttributeToScalarExpression {
            public const nint m_nExpression = 0x1C8; // ScalarExpressionType_t
            public const nint m_flInput1 = 0x1D0; // CPerParticleFloatInput
            public const nint m_flInput2 = 0x330; // CPerParticleFloatInput
            public const nint m_flOutputRemap = 0x490; // CParticleRemapFloatInput
            public const nint m_nOutputField = 0x5F0; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x5F4; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateOnGrid {
            public const nint m_nXCount = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_nYCount = 0x328; // CParticleCollectionFloatInput
            public const nint m_nZCount = 0x488; // CParticleCollectionFloatInput
            public const nint m_nXSpacing = 0x5E8; // CParticleCollectionFloatInput
            public const nint m_nYSpacing = 0x748; // CParticleCollectionFloatInput
            public const nint m_nZSpacing = 0x8A8; // CParticleCollectionFloatInput
            public const nint m_nControlPointNumber = 0xA08; // int32
            public const nint m_bLocalSpace = 0xA0C; // bool
            public const nint m_bCenter = 0xA0D; // bool
            public const nint m_bHollow = 0xA0E; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RampCPLinearRandom {
            public const nint m_nOutControlPointNumber = 0x1C8; // int32
            public const nint m_vecRateMin = 0x1CC; // Vector
            public const nint m_vecRateMax = 0x1D8; // Vector
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_VelocityMatchingForce {
            public const nint m_flDirScale = 0x1C0; // float32
            public const nint m_flSpdScale = 0x1C4; // float32
            public const nint m_flNeighborDistance = 0x1C8; // float32
            public const nint m_flFacingStrength = 0x1CC; // float32
            public const nint m_bUseAABB = 0x1D0; // bool
            public const nint m_nCPBroadcast = 0x1D4; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomAlphaWindowThreshold {
            public const nint m_flMin = 0x1C8; // float32
            public const nint m_flMax = 0x1CC; // float32
            public const nint m_flExponent = 0x1D0; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 14
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateOnModelAtHeight {
            public const nint m_bUseBones = 0x1C8; // bool
            public const nint m_bForceZ = 0x1C9; // bool
            public const nint m_nControlPointNumber = 0x1CC; // int32
            public const nint m_nHeightCP = 0x1D0; // int32
            public const nint m_bUseWaterHeight = 0x1D4; // bool
            public const nint m_flDesiredHeight = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_vecHitBoxScale = 0x338; // CParticleCollectionVecInput
            public const nint m_vecDirectionBias = 0x9B0; // CParticleCollectionVecInput
            public const nint m_nBiasType = 0x1028; // ParticleHitboxBiasType_t
            public const nint m_bLocalCoords = 0x102C; // bool
            public const nint m_bPreferMovingBoxes = 0x102D; // bool
            public const nint m_HitboxSetName = 0x102E; // char[128]
            public const nint m_flHitboxVelocityScale = 0x10B0; // CParticleCollectionFloatInput
            public const nint m_flMaxBoneVelocity = 0x1210; // CParticleCollectionFloatInput
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyCustomEditor
        public static class CParticleVariableRef {
            public const nint m_variableName = 0x0; // CKV3MemberNameWithStorage
            public const nint m_variableType = 0x38; // PulseValueType_t
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RestartAfterDuration {
            public const nint m_flDurationMin = 0x1C0; // float32
            public const nint m_flDurationMax = 0x1C4; // float32
            public const nint m_nCP = 0x1C8; // int32
            public const nint m_nCPField = 0x1CC; // int32
            public const nint m_nChildGroupID = 0x1D0; // int32
            public const nint m_bOnlyChildren = 0x1D4; // bool
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderClothForce {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapVisibilityScalar {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // float32
            public const nint m_flInputMax = 0x1CC; // float32
            public const nint m_flOutputMin = 0x1D0; // float32
            public const nint m_flOutputMax = 0x1D4; // float32
            public const nint m_flRadiusScale = 0x1D8; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 6
        //
        // Metadata:
        // MParticleMinVersion
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateSequentialPathV2 {
            public const nint m_fMaxDistance = 0x1C8; // CPerParticleFloatInput
            public const nint m_flNumToAssign = 0x328; // CParticleCollectionFloatInput
            public const nint m_bLoop = 0x488; // bool
            public const nint m_bCPPairs = 0x489; // bool
            public const nint m_bSaveOffset = 0x48A; // bool
            public const nint m_PathParams = 0x490; // CPathParameters
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VecInputMaterialVariable_t {
            public const nint m_strVariable = 0x0; // CUtlString
            public const nint m_vecInput = 0x8; // CParticleCollectionVecInput
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapInitialDirectionToTransformToVector {
            public const nint m_TransformInput = 0x1C8; // CParticleTransformInput
            public const nint m_nFieldOutput = 0x230; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x234; // float32
            public const nint m_flOffsetRot = 0x238; // float32
            public const nint m_vecOffsetAxis = 0x23C; // Vector
            public const nint m_bNormalize = 0x248; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MParticleMinVersion
        // MGetKV3ClassDefaults
        public static class C_OP_LockToSavedSequentialPathV2 {
            public const nint m_flFadeStart = 0x1C0; // float32
            public const nint m_flFadeEnd = 0x1C4; // float32
            public const nint m_bCPPairs = 0x1C8; // bool
            public const nint m_PathParams = 0x1D0; // CPathParameters
        }
        // Parent: CParticleFunctionOperator
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_NormalLock {
            public const nint m_nControlPointNumber = 0x1C0; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapTransformOrientationToRotations {
            public const nint m_TransformInput = 0x1C8; // CParticleTransformInput
            public const nint m_vecRotation = 0x230; // Vector
            public const nint m_bUseQuat = 0x23C; // bool
            public const nint m_bWriteNormal = 0x23D; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_Cull {
            public const nint m_flCullPerc = 0x1C0; // float32
            public const nint m_flCullStart = 0x1C4; // float32
            public const nint m_flCullEnd = 0x1C8; // float32
            public const nint m_flCullExp = 0x1CC; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomYawFlip {
            public const nint m_flPercent = 0x1C8; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapSDFGradientToVectorAttribute {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class SequenceWeightedList_t {
            public const nint m_nSequence = 0x0; // int32
            public const nint m_flRelativeWeight = 0x4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ReadFromNeighboringParticle {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nIncrement = 0x1C8; // int32
            public const nint m_DistanceCheck = 0x1D0; // CPerParticleFloatInput
            public const nint m_flInterpolation = 0x330; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderText {
            public const nint m_OutlineColor = 0x210; // Color
            public const nint m_DefaultText = 0x218; // CUtlString
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_LerpToInitialPosition {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_flInterpolation = 0x1C8; // CPerParticleFloatInput
            public const nint m_nCacheField = 0x328; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x330; // CParticleCollectionFloatInput
            public const nint m_vecScale = 0x490; // CParticleCollectionVecInput
        }
        // Parent: CGeneralRandomRotation
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomRotation {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_LerpEndCapVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecOutput = 0x1C4; // Vector
            public const nint m_flLerpTime = 0x1D0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_VelocityDecay {
            public const nint m_flMinVelocity = 0x1C0; // float32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetCPOrientationToPointAtCP {
            public const nint m_nInputCP = 0x1C8; // int32
            public const nint m_nOutputCP = 0x1CC; // int32
            public const nint m_flInterpolation = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_b2DOrientation = 0x330; // bool
            public const nint m_bAvoidSingularity = 0x331; // bool
            public const nint m_bPointAway = 0x332; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_LockToPointList {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_pointList = 0x1C8; // CUtlVector<PointDefinition_t>
            public const nint m_bPlaceAlongPath = 0x1E0; // bool
            public const nint m_bClosedLoop = 0x1E1; // bool
            public const nint m_nNumPointsAlongPath = 0x1E4; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 17
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_MovementPlaceOnGround {
            public const nint m_flOffset = 0x1C0; // CPerParticleFloatInput
            public const nint m_flMaxTraceLength = 0x320; // float32
            public const nint m_flTolerance = 0x324; // float32
            public const nint m_flTraceOffset = 0x328; // float32
            public const nint m_flLerpRate = 0x32C; // float32
            public const nint m_CollisionGroupName = 0x330; // char[128]
            public const nint m_nTraceSet = 0x3B0; // ParticleTraceSet_t
            public const nint m_nRefCP1 = 0x3B4; // int32
            public const nint m_nRefCP2 = 0x3B8; // int32
            public const nint m_nLerpCP = 0x3BC; // int32
            public const nint m_nTraceMissBehavior = 0x3C8; // ParticleTraceMissBehavior_t
            public const nint m_bIncludeShotHull = 0x3CC; // bool
            public const nint m_bIncludeWater = 0x3CD; // bool
            public const nint m_bSetNormal = 0x3D0; // bool
            public const nint m_bScaleOffset = 0x3D1; // bool
            public const nint m_nPreserveOffsetCP = 0x3D4; // int32
            public const nint m_nIgnoreCP = 0x3D8; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetCPOrientationToDirection {
            public const nint m_nInputControlPoint = 0x1C0; // int32
            public const nint m_nOutputControlPoint = 0x1C4; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapCrossProductOfTwoVectorsToVector {
            public const nint m_InputVec1 = 0x1C0; // CPerParticleVecInput
            public const nint m_InputVec2 = 0x838; // CPerParticleVecInput
            public const nint m_nFieldOutput = 0xEB0; // ParticleAttributeIndex_t
            public const nint m_bNormalize = 0xEB4; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapTransformOrientationToRotations {
            public const nint m_TransformInput = 0x1C0; // CParticleTransformInput
            public const nint m_vecRotation = 0x228; // Vector
            public const nint m_bUseQuat = 0x234; // bool
            public const nint m_bWriteNormal = 0x235; // bool
        }
        // Parent: CGeneralRandomRotation
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomRotationSpeed {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MParticleMinVersion
        // MGetKV3ClassDefaults
        public static class C_OP_InheritFromParentParticlesV2 {
            public const nint m_flScale = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nIncrement = 0x1C8; // int32
            public const nint m_bRandomDistribution = 0x1CC; // bool
            public const nint m_nMissingParentBehavior = 0x1D0; // MissingParentInheritBehavior_t
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomSecondSequence {
            public const nint m_nSequenceMin = 0x1C8; // int32
            public const nint m_nSequenceMax = 0x1CC; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetFloatCollection {
            public const nint m_InputValue = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_nOutputField = 0x320; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x324; // ParticleSetMethod_t
            public const nint m_Lerp = 0x328; // CParticleCollectionFloatInput
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PointDefinition_t {
            public const nint m_nControlPoint = 0x0; // int32
            public const nint m_bLocalCoords = 0x4; // bool
            public const nint m_vOffset = 0x8; // Vector
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointPositionToRandomActiveCP {
            public const nint m_nCP1 = 0x1C8; // int32
            public const nint m_nHeadLocationMin = 0x1CC; // int32
            public const nint m_nHeadLocationMax = 0x1D0; // int32
            public const nint m_flResetRate = 0x1D8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_Diffusion {
            public const nint m_flRadiusScale = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nVoxelGridResolution = 0x1C8; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_AgeNoise {
            public const nint m_bAbsVal = 0x1C8; // bool
            public const nint m_bAbsValInv = 0x1C9; // bool
            public const nint m_flOffset = 0x1CC; // float32
            public const nint m_flAgeMin = 0x1D0; // float32
            public const nint m_flAgeMax = 0x1D4; // float32
            public const nint m_flNoiseScale = 0x1D8; // float32
            public const nint m_flNoiseScaleLoc = 0x1DC; // float32
            public const nint m_vecOffsetLoc = 0x1E0; // Vector
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapVectorComponentToScalar {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nComponent = 0x1C8; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CGeneralRandomRotation {
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_flDegrees = 0x1CC; // float32
            public const nint m_flDegreesMin = 0x1D0; // float32
            public const nint m_flDegreesMax = 0x1D4; // float32
            public const nint m_flRotationRandExponent = 0x1D8; // float32
            public const nint m_bRandomlyFlipDirection = 0x1DC; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DistanceBetweenVecs {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecPoint1 = 0x1C8; // CPerParticleVecInput
            public const nint m_vecPoint2 = 0x840; // CPerParticleVecInput
            public const nint m_flInputMin = 0xEB8; // CPerParticleFloatInput
            public const nint m_flInputMax = 0x1018; // CPerParticleFloatInput
            public const nint m_flOutputMin = 0x1178; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x12D8; // CPerParticleFloatInput
            public const nint m_nSetMethod = 0x1438; // ParticleSetMethod_t
            public const nint m_bDeltaTime = 0x143C; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DampenToCP {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_flRange = 0x1C4; // float32
            public const nint m_flScale = 0x1C8; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_CalculateVectorAttribute {
            public const nint m_vStartValue = 0x1C0; // Vector
            public const nint m_nFieldInput1 = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_flInputScale1 = 0x1D0; // float32
            public const nint m_nFieldInput2 = 0x1D4; // ParticleAttributeIndex_t
            public const nint m_flInputScale2 = 0x1D8; // float32
            public const nint m_nControlPointInput1 = 0x1DC; // ControlPointReference_t
            public const nint m_flControlPointScale1 = 0x1F0; // float32
            public const nint m_nControlPointInput2 = 0x1F4; // ControlPointReference_t
            public const nint m_flControlPointScale2 = 0x208; // float32
            public const nint m_nFieldOutput = 0x20C; // ParticleAttributeIndex_t
            public const nint m_vFinalOutputScale = 0x210; // Vector
        }
        // Parent: CParticleInput
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyCustomEditor
        // MParticleCustomFieldDefaultValue
        public static class CParticleTransformInput {
            public const nint m_nType = 0x10; // ParticleTransformType_t
            public const nint m_NamedValue = 0x18; // CParticleNamedValueRef
            public const nint m_bFollowNamedValue = 0x58; // bool
            public const nint m_bSupportsDisabled = 0x59; // bool
            public const nint m_bUseOrientation = 0x5A; // bool
            public const nint m_nControlPoint = 0x5C; // int32
            public const nint m_nControlPointRangeMax = 0x60; // int32
            public const nint m_flEndCPGrowthTime = 0x64; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 15
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_LockToBone {
            public const nint m_modelInput = 0x1C0; // CParticleModelInput
            public const nint m_transformInput = 0x220; // CParticleTransformInput
            public const nint m_flLifeTimeFadeStart = 0x288; // float32
            public const nint m_flLifeTimeFadeEnd = 0x28C; // float32
            public const nint m_flJumpThreshold = 0x290; // float32
            public const nint m_flPrevPosScale = 0x294; // float32
            public const nint m_HitboxSetName = 0x298; // char[128]
            public const nint m_bRigid = 0x318; // bool
            public const nint m_bUseBones = 0x319; // bool
            public const nint m_nFieldOutput = 0x31C; // ParticleAttributeIndex_t
            public const nint m_nFieldOutputPrev = 0x320; // ParticleAttributeIndex_t
            public const nint m_nRotationSetType = 0x324; // ParticleRotationLockType_t
            public const nint m_bRigidRotationLock = 0x328; // bool
            public const nint m_vecRotation = 0x330; // CPerParticleVecInput
            public const nint m_flRotLerp = 0x9A8; // CPerParticleFloatInput
        }
        // Parent: C_OP_RemapNamedModelElementOnceTimed
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapNamedModelBodyPartOnceTimed {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_MovementMaintainOffset {
            public const nint m_vecOffset = 0x1C0; // Vector
            public const nint m_nCP = 0x1CC; // int32
            public const nint m_bRadiusScale = 0x1D0; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetVec {
            public const nint m_InputValue = 0x1C0; // CPerParticleVecInput
            public const nint m_nOutputField = 0x838; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x83C; // ParticleSetMethod_t
            public const nint m_Lerp = 0x840; // CPerParticleFloatInput
            public const nint m_bNormalizedOutput = 0x9A0; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateFromParentParticles {
            public const nint m_flVelocityScale = 0x1C8; // float32
            public const nint m_flIncrement = 0x1CC; // float32
            public const nint m_bRandomDistribution = 0x1D0; // bool
            public const nint m_nRandomSeed = 0x1D4; // int32
            public const nint m_bSubFrame = 0x1D8; // bool
        }
        // Parent: None
        // Field count: 0
        public static class IParticleEffect {
        }
        // Parent: C_INIT_RandomNamedModelElement
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomNamedModelBodyPart {
        }
        // Parent: None
        // Field count: 1
        public static class PARTICLE_EHANDLE__ {
            public const nint unused = 0x0; // int32
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 16
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderOmni2Light {
            public const nint m_nLightType = 0x210; // ParticleOmni2LightTypeChoiceList_t
            public const nint m_vColorBlend = 0x218; // CParticleCollectionVecInput
            public const nint m_nColorBlendType = 0x890; // ParticleColorBlendType_t
            public const nint m_nBrightnessUnit = 0x894; // ParticleLightUnitChoiceList_t
            public const nint m_flBrightnessLumens = 0x898; // CPerParticleFloatInput
            public const nint m_flBrightnessCandelas = 0x9F8; // CPerParticleFloatInput
            public const nint m_bCastShadows = 0xB58; // bool
            public const nint m_bFog = 0xB59; // bool
            public const nint m_flFogScale = 0xB60; // CPerParticleFloatInput
            public const nint m_flLuminaireRadius = 0xCC0; // CPerParticleFloatInput
            public const nint m_flSkirt = 0xE20; // CPerParticleFloatInput
            public const nint m_flRange = 0xF80; // CPerParticleFloatInput
            public const nint m_flInnerConeAngle = 0x10E0; // CPerParticleFloatInput
            public const nint m_flOuterConeAngle = 0x1240; // CPerParticleFloatInput
            public const nint m_hLightCookie = 0x13A0; // 
            public const nint m_bSphericalCookie = 0x13A8; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ConnectParentParticleToNearest {
            public const nint m_nFirstControlPoint = 0x1C0; // int32
            public const nint m_nSecondControlPoint = 0x1C4; // int32
            public const nint m_bUseRadius = 0x1C8; // bool
            public const nint m_flRadiusScale = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_flParentRadiusScale = 0x330; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFloatInput
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyCustomEditor
        public static class CPerParticleFloatInput {
        }
        // Parent: C_INIT_RemapParticleCountToNamedModelElementScalar
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapParticleCountToNamedModelBodyPartScalar {
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 19
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InitSkinnedPositionFromCPSnapshot {
            public const nint m_nSnapshotControlPointNumber = 0x1C8; // int32
            public const nint m_nControlPointNumber = 0x1CC; // int32
            public const nint m_bRandom = 0x1D0; // bool
            public const nint m_nRandomSeed = 0x1D4; // int32
            public const nint m_bRigid = 0x1D8; // bool
            public const nint m_bSetNormal = 0x1D9; // bool
            public const nint m_bIgnoreDt = 0x1DA; // bool
            public const nint m_flMinNormalVelocity = 0x1DC; // float32
            public const nint m_flMaxNormalVelocity = 0x1E0; // float32
            public const nint m_nIndexType = 0x1E4; // SnapshotIndexType_t
            public const nint m_flReadIndex = 0x1E8; // CPerParticleFloatInput
            public const nint m_flIncrement = 0x348; // float32
            public const nint m_nFullLoopIncrement = 0x34C; // int32
            public const nint m_nSnapShotStartPoint = 0x350; // int32
            public const nint m_flBoneVelocity = 0x354; // float32
            public const nint m_flBoneVelocityMax = 0x358; // float32
            public const nint m_bCopyColor = 0x35C; // bool
            public const nint m_bCopyAlpha = 0x35D; // bool
            public const nint m_bSetRadius = 0x35E; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_LagCompensation {
            public const nint m_nDesiredVelocityCP = 0x1C0; // int32
            public const nint m_nLatencyCP = 0x1C4; // int32
            public const nint m_nLatencyCPField = 0x1C8; // int32
            public const nint m_nDesiredVelocityCPField = 0x1CC; // int32
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_CollideWithSelf {
            public const nint m_flRadiusScale = 0x1C0; // CPerParticleFloatInput
            public const nint m_flMinimumSpeed = 0x320; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_Noise {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flOutputMin = 0x1C4; // float32
            public const nint m_flOutputMax = 0x1C8; // float32
            public const nint m_fl4NoiseScale = 0x1CC; // float32
            public const nint m_bAdditive = 0x1D0; // bool
            public const nint m_flNoiseAnimationTimeScale = 0x1D4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_FadeAndKillForTracers {
            public const nint m_flStartFadeInTime = 0x1C0; // float32
            public const nint m_flEndFadeInTime = 0x1C4; // float32
            public const nint m_flStartFadeOutTime = 0x1C8; // float32
            public const nint m_flEndFadeOutTime = 0x1CC; // float32
            public const nint m_flStartAlpha = 0x1D0; // float32
            public const nint m_flEndAlpha = 0x1D4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ColorAdjustHSL {
            public const nint m_flHueAdjust = 0x1C0; // CPerParticleFloatInput
            public const nint m_flSaturationAdjust = 0x320; // CPerParticleFloatInput
            public const nint m_flLightnessAdjust = 0x480; // CPerParticleFloatInput
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CParticleMassCalculationParameters {
            public const nint m_nMassMode = 0x0; // ParticleMassMode_t
            public const nint m_flRadius = 0x8; // CPerParticleFloatInput
            public const nint m_flNominalRadius = 0x168; // CPerParticleFloatInput
            public const nint m_flScale = 0x2C8; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SequenceFromModel {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nFieldOutputAnim = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1CC; // float32
            public const nint m_flInputMax = 0x1D0; // float32
            public const nint m_flOutputMin = 0x1D4; // float32
            public const nint m_flOutputMax = 0x1D8; // float32
            public const nint m_nSetMethod = 0x1DC; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionOperator
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_AlphaDecay {
            public const nint m_flMinAlpha = 0x1C0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapDensityGradientToVectorAttribute {
            public const nint m_flRadiusScale = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InitVec {
            public const nint m_InputValue = 0x1C8; // CPerParticleVecInput
            public const nint m_nOutputField = 0x840; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x844; // ParticleSetMethod_t
            public const nint m_bNormalizedOutput = 0x848; // bool
            public const nint m_bWritePreviousPosition = 0x849; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_SetHitboxToModel {
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_nForceInModel = 0x1CC; // int32
            public const nint m_bEvenDistribution = 0x1D0; // bool
            public const nint m_nDesiredHitbox = 0x1D4; // int32
            public const nint m_vecHitBoxScale = 0x1D8; // CParticleCollectionVecInput
            public const nint m_vecDirectionBias = 0x850; // Vector
            public const nint m_bMaintainHitbox = 0x85C; // bool
            public const nint m_bUseBones = 0x85D; // bool
            public const nint m_HitboxSetName = 0x85E; // char[128]
            public const nint m_flShellSize = 0x8E0; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_MovementMoveAlongSkinnedCPSnapshot {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nSnapshotControlPointNumber = 0x1C4; // int32
            public const nint m_bSetNormal = 0x1C8; // bool
            public const nint m_bSetRadius = 0x1C9; // bool
            public const nint m_flInterpolation = 0x1D0; // CPerParticleFloatInput
            public const nint m_flTValue = 0x330; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_LerpScalar {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flOutput = 0x1C8; // CPerParticleFloatInput
            public const nint m_flStartTime = 0x328; // float32
            public const nint m_flEndTime = 0x32C; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 13
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InitialRepulsionVelocity {
            public const nint m_CollisionGroupName = 0x1C8; // char[128]
            public const nint m_nTraceSet = 0x248; // ParticleTraceSet_t
            public const nint m_vecOutputMin = 0x24C; // Vector
            public const nint m_vecOutputMax = 0x258; // Vector
            public const nint m_nControlPointNumber = 0x264; // int32
            public const nint m_bPerParticle = 0x268; // bool
            public const nint m_bTranslate = 0x269; // bool
            public const nint m_bProportional = 0x26A; // bool
            public const nint m_flTraceLength = 0x26C; // float32
            public const nint m_bPerParticleTR = 0x270; // bool
            public const nint m_bInherit = 0x271; // bool
            public const nint m_nChildCP = 0x274; // int32
            public const nint m_nChildGroupID = 0x278; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ClampScalar {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flOutputMin = 0x1C8; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x328; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointToHMD {
            public const nint m_nCP1 = 0x1C8; // int32
            public const nint m_vecCP1Pos = 0x1CC; // Vector
            public const nint m_bOrientToHMD = 0x1D8; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DifferencePreviousParticle {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // float32
            public const nint m_flInputMax = 0x1CC; // float32
            public const nint m_flOutputMin = 0x1D0; // float32
            public const nint m_flOutputMax = 0x1D4; // float32
            public const nint m_nSetMethod = 0x1D8; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x1DC; // bool
            public const nint m_bSetPreviousParticle = 0x1DD; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointFieldFromVectorExpression {
            public const nint m_nExpression = 0x1C8; // VectorFloatExpressionType_t
            public const nint m_vecInput1 = 0x1D0; // CParticleCollectionVecInput
            public const nint m_vecInput2 = 0x848; // CParticleCollectionVecInput
            public const nint m_flOutputRemap = 0xEC0; // CParticleRemapFloatInput
            public const nint m_nOutputCP = 0x1020; // int32
            public const nint m_nOutVectorField = 0x1024; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_PercentageBetweenTransforms {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C4; // float32
            public const nint m_flInputMax = 0x1C8; // float32
            public const nint m_flOutputMin = 0x1CC; // float32
            public const nint m_flOutputMax = 0x1D0; // float32
            public const nint m_TransformStart = 0x1D8; // CParticleTransformInput
            public const nint m_TransformEnd = 0x240; // CParticleTransformInput
            public const nint m_nSetMethod = 0x2A8; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x2AC; // bool
            public const nint m_bRadialCheck = 0x2AD; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_PlaneCull {
            public const nint m_nControlPoint = 0x1C8; // int32
            public const nint m_flDistance = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_bCullInside = 0x330; // bool
        }
        // Parent: C_OP_RemapNamedModelElementEndCap
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapNamedModelSequenceEndCap {
        }
        // Parent: CParticleCollectionFloatInput
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyCustomEditor
        public static class CParticleCollectionRendererFloatInput {
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InitFromCPSnapshot {
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_nAttributeToRead = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_nAttributeToWrite = 0x1D0; // ParticleAttributeIndex_t
            public const nint m_nLocalSpaceCP = 0x1D4; // int32
            public const nint m_bRandom = 0x1D8; // bool
            public const nint m_bReverse = 0x1D9; // bool
            public const nint m_nSnapShotIncrement = 0x1E0; // CParticleCollectionFloatInput
            public const nint m_nManualSnapshotIndex = 0x340; // CPerParticleFloatInput
            public const nint m_nRandomSeed = 0x4A0; // int32
            public const nint m_bLocalSpaceAngles = 0x4A4; // bool
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 22
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderCables {
            public const nint m_flRadiusScale = 0x210; // CParticleCollectionFloatInput
            public const nint m_flAlphaScale = 0x370; // CParticleCollectionFloatInput
            public const nint m_vecColorScale = 0x4D0; // CParticleCollectionVecInput
            public const nint m_nColorBlendType = 0xB48; // ParticleColorBlendType_t
            public const nint m_hMaterial = 0xB50; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_nTextureRepetitionMode = 0xB58; // TextureRepetitionMode_t
            public const nint m_flTextureRepeatsPerSegment = 0xB60; // CParticleCollectionFloatInput
            public const nint m_flTextureRepeatsCircumference = 0xCC0; // CParticleCollectionFloatInput
            public const nint m_flColorMapOffsetV = 0xE20; // CParticleCollectionFloatInput
            public const nint m_flColorMapOffsetU = 0xF80; // CParticleCollectionFloatInput
            public const nint m_flNormalMapOffsetV = 0x10E0; // CParticleCollectionFloatInput
            public const nint m_flNormalMapOffsetU = 0x1240; // CParticleCollectionFloatInput
            public const nint m_bDrawCableCaps = 0x13A0; // bool
            public const nint m_flCapRoundness = 0x13A4; // float32
            public const nint m_flCapOffsetAmount = 0x13A8; // float32
            public const nint m_flTessScale = 0x13AC; // float32
            public const nint m_nMinTesselation = 0x13B0; // int32
            public const nint m_nMaxTesselation = 0x13B4; // int32
            public const nint m_nRoundness = 0x13B8; // int32
            public const nint m_LightingTransform = 0x13C0; // CParticleTransformInput
            public const nint m_MaterialFloatVars = 0x1428; // CUtlVector<FloatInputMaterialVariable_t>
            public const nint m_MaterialVecVars = 0x1458; // CUtlVector<VecInputMaterialVariable_t>
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InheritVelocity {
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_flVelocityScale = 0x1CC; // float32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointToWaterSurface {
            public const nint m_nSourceCP = 0x1C8; // int32
            public const nint m_nDestCP = 0x1CC; // int32
            public const nint m_nFlowCP = 0x1D0; // int32
            public const nint m_nActiveCP = 0x1D4; // int32
            public const nint m_nActiveCPField = 0x1D8; // int32
            public const nint m_flRetestRate = 0x1E0; // CParticleCollectionFloatInput
            public const nint m_bAdaptiveThreshold = 0x340; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_PositionOffset {
            public const nint m_OffsetMin = 0x1C8; // CPerParticleVecInput
            public const nint m_OffsetMax = 0x840; // CPerParticleVecInput
            public const nint m_TransformInput = 0xEB8; // CParticleTransformInput
            public const nint m_bLocalCoords = 0xF20; // bool
            public const nint m_bProportional = 0xF21; // bool
            public const nint m_randomnessParameters = 0xF24; // CRandomNumberGeneratorParameters
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_NormalAlignToCP {
            public const nint m_transformInput = 0x1C8; // CParticleTransformInput
            public const nint m_nControlPointAxis = 0x230; // ParticleControlPointAxis_t
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ShapeMatchingConstraint {
            public const nint m_flShapeRestorationTime = 0x1C0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetChildControlPoints {
            public const nint m_nChildGroupID = 0x1C0; // int32
            public const nint m_nFirstControlPoint = 0x1C4; // int32
            public const nint m_nNumControlPoints = 0x1C8; // int32
            public const nint m_nFirstSourcePoint = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_bReverse = 0x330; // bool
            public const nint m_bSetOrientation = 0x331; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ChladniWave {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // CPerParticleFloatInput
            public const nint m_flInputMax = 0x328; // CPerParticleFloatInput
            public const nint m_flOutputMin = 0x488; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x5E8; // CPerParticleFloatInput
            public const nint m_vecWaveLength = 0x748; // CPerParticleVecInput
            public const nint m_vecHarmonics = 0xDC0; // CPerParticleVecInput
            public const nint m_nSetMethod = 0x1438; // ParticleSetMethod_t
            public const nint m_nLocalSpaceControlPoint = 0x143C; // int32
            public const nint m_b3D = 0x1440; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapDirectionToCPToVector {
            public const nint m_nCP = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x1C8; // float32
            public const nint m_flOffsetRot = 0x1CC; // float32
            public const nint m_vecOffsetAxis = 0x1D0; // Vector
            public const nint m_bNormalize = 0x1DC; // bool
            public const nint m_nFieldStrength = 0x1E0; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DriveCPFromGlobalSoundFloat {
            public const nint m_nOutputControlPoint = 0x1C8; // int32
            public const nint m_nOutputField = 0x1CC; // int32
            public const nint m_flInputMin = 0x1D0; // float32
            public const nint m_flInputMax = 0x1D4; // float32
            public const nint m_flOutputMin = 0x1D8; // float32
            public const nint m_flOutputMax = 0x1DC; // float32
            public const nint m_StackName = 0x1E0; // CUtlString
            public const nint m_OperatorName = 0x1E8; // CUtlString
            public const nint m_FieldName = 0x1F0; // CUtlString
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RtEnvCull {
            public const nint m_vecTestDir = 0x1C0; // Vector
            public const nint m_vecTestNormal = 0x1CC; // Vector
            public const nint m_bCullOnMiss = 0x1D8; // bool
            public const nint m_bStickInsteadOfCull = 0x1D9; // bool
            public const nint m_RtEnvName = 0x1DA; // char[128]
            public const nint m_nRTEnvCP = 0x25C; // int32
            public const nint m_nComponent = 0x260; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 13
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_PinParticleToCP {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_vecOffset = 0x1C8; // CParticleCollectionVecInput
            public const nint m_bOffsetLocal = 0x840; // bool
            public const nint m_nParticleSelection = 0x844; // ParticleSelection_t
            public const nint m_nParticleNumber = 0x848; // CParticleCollectionFloatInput
            public const nint m_nPinBreakType = 0x9A8; // ParticlePinDistance_t
            public const nint m_flBreakDistance = 0x9B0; // CParticleCollectionFloatInput
            public const nint m_flBreakSpeed = 0xB10; // CParticleCollectionFloatInput
            public const nint m_flAge = 0xC70; // CParticleCollectionFloatInput
            public const nint m_nBreakControlPointNumber = 0xDD0; // int32
            public const nint m_nBreakControlPointNumber2 = 0xDD4; // int32
            public const nint m_flBreakValue = 0xDD8; // CParticleCollectionFloatInput
            public const nint m_flInterpolation = 0xF38; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 13
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapCPtoVector {
            public const nint m_nCPInput = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nLocalSpaceCP = 0x1C8; // int32
            public const nint m_vInputMin = 0x1CC; // Vector
            public const nint m_vInputMax = 0x1D8; // Vector
            public const nint m_vOutputMin = 0x1E4; // Vector
            public const nint m_vOutputMax = 0x1F0; // Vector
            public const nint m_flStartTime = 0x1FC; // float32
            public const nint m_flEndTime = 0x200; // float32
            public const nint m_flInterpRate = 0x204; // float32
            public const nint m_nSetMethod = 0x208; // ParticleSetMethod_t
            public const nint m_bOffset = 0x20C; // bool
            public const nint m_bAccelerate = 0x20D; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateParticleImpulse {
            public const nint m_InputRadius = 0x1C8; // CPerParticleFloatInput
            public const nint m_InputMagnitude = 0x328; // CPerParticleFloatInput
            public const nint m_nFalloffFunction = 0x488; // ParticleFalloffFunction_t
            public const nint m_InputFalloffExp = 0x490; // CPerParticleFloatInput
            public const nint m_nImpulseType = 0x5F0; // ParticleImpulseType_t
        }
        // Parent: CParticleFunctionForce
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DensityForce {
            public const nint m_flRadiusScale = 0x1D0; // float32
            public const nint m_flForceScale = 0x1D4; // float32
            public const nint m_flTargetDensity = 0x1D8; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateInEpitrochoid {
            public const nint m_nComponent1 = 0x1C8; // int32
            public const nint m_nComponent2 = 0x1CC; // int32
            public const nint m_TransformInput = 0x1D0; // CParticleTransformInput
            public const nint m_flParticleDensity = 0x238; // CPerParticleFloatInput
            public const nint m_flOffset = 0x398; // CPerParticleFloatInput
            public const nint m_flRadius1 = 0x4F8; // CPerParticleFloatInput
            public const nint m_flRadius2 = 0x658; // CPerParticleFloatInput
            public const nint m_bUseCount = 0x7B8; // bool
            public const nint m_bUseLocalCoords = 0x7B9; // bool
            public const nint m_bOffsetExistingPos = 0x7BA; // bool
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ConstrainDistanceToUserSpecifiedPath {
            public const nint m_fMinDistance = 0x1C0; // float32
            public const nint m_flMaxDistance = 0x1C4; // float32
            public const nint m_flTimeScale = 0x1C8; // float32
            public const nint m_bLoopedPath = 0x1CC; // bool
            public const nint m_pointList = 0x1D0; // CUtlVector<PointDefinitionWithTimeValues_t>
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 12
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointPositions {
            public const nint m_bUseWorldLocation = 0x1C8; // bool
            public const nint m_bOrient = 0x1C9; // bool
            public const nint m_bSetOnce = 0x1CA; // bool
            public const nint m_nCP1 = 0x1CC; // int32
            public const nint m_nCP2 = 0x1D0; // int32
            public const nint m_nCP3 = 0x1D4; // int32
            public const nint m_nCP4 = 0x1D8; // int32
            public const nint m_vecCP1Pos = 0x1DC; // Vector
            public const nint m_vecCP2Pos = 0x1E8; // Vector
            public const nint m_vecCP3Pos = 0x1F4; // Vector
            public const nint m_vecCP4Pos = 0x200; // Vector
            public const nint m_nHeadLocation = 0x20C; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetFloatAttributeToVectorExpression {
            public const nint m_nExpression = 0x1C0; // VectorFloatExpressionType_t
            public const nint m_vInput1 = 0x1C8; // CPerParticleVecInput
            public const nint m_vInput2 = 0x840; // CPerParticleVecInput
            public const nint m_flOutputRemap = 0xEB8; // CParticleRemapFloatInput
            public const nint m_nOutputField = 0x1018; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x101C; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_MovementRotateParticleAroundAxis {
            public const nint m_vecRotAxis = 0x1C0; // CParticleCollectionVecInput
            public const nint m_flRotRate = 0x838; // CParticleCollectionFloatInput
            public const nint m_TransformInput = 0x998; // CParticleTransformInput
            public const nint m_bLocalSpace = 0xA00; // bool
        }
        // Parent: CParticleFunctionForce
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_IntraParticleForce {
            public const nint m_flAttractionMinDistance = 0x1D0; // float32
            public const nint m_flAttractionMaxDistance = 0x1D4; // float32
            public const nint m_flAttractionMaxStrength = 0x1D8; // float32
            public const nint m_flRepulsionMinDistance = 0x1DC; // float32
            public const nint m_flRepulsionMaxDistance = 0x1E0; // float32
            public const nint m_flRepulsionMaxStrength = 0x1E4; // float32
            public const nint m_bUseAABB = 0x1E8; // bool
            public const nint m_bThreadIt = 0x1E9; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InitFloat {
            public const nint m_InputValue = 0x1C8; // CPerParticleFloatInput
            public const nint m_nOutputField = 0x328; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x32C; // ParticleSetMethod_t
            public const nint m_InputStrength = 0x330; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 16
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateOnModel {
            public const nint m_modelInput = 0x1C8; // CParticleModelInput
            public const nint m_transformInput = 0x228; // CParticleTransformInput
            public const nint m_nForceInModel = 0x290; // int32
            public const nint m_bScaleToVolume = 0x294; // bool
            public const nint m_bEvenDistribution = 0x295; // bool
            public const nint m_nDesiredHitbox = 0x298; // CParticleCollectionFloatInput
            public const nint m_nHitboxValueFromControlPointIndex = 0x3F8; // int32
            public const nint m_vecHitBoxScale = 0x400; // CParticleCollectionVecInput
            public const nint m_flBoneVelocity = 0xA78; // float32
            public const nint m_flMaxBoneVelocity = 0xA7C; // float32
            public const nint m_vecDirectionBias = 0xA80; // CParticleCollectionVecInput
            public const nint m_HitboxSetName = 0x10F8; // char[128]
            public const nint m_bLocalCoords = 0x1178; // bool
            public const nint m_bUseBones = 0x1179; // bool
            public const nint m_bUseMesh = 0x117A; // bool
            public const nint m_flShellSize = 0x1180; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_InheritFromPeerSystem {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldInput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nIncrement = 0x1C8; // int32
            public const nint m_nGroupID = 0x1CC; // int32
        }
        // Parent: CParticleFunctionForce
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_PerParticleForce {
            public const nint m_flForceScale = 0x1D0; // CPerParticleFloatInput
            public const nint m_vForce = 0x330; // CPerParticleVecInput
            public const nint m_nCP = 0x9A8; // int32
        }
        // Parent: C_INIT_RandomNamedModelElement
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomNamedModelMeshGroup {
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 18
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderProjected {
            public const nint m_bProjectCharacter = 0x210; // bool
            public const nint m_bProjectWorld = 0x211; // bool
            public const nint m_bProjectWater = 0x212; // bool
            public const nint m_bFlipHorizontal = 0x213; // bool
            public const nint m_bEnableProjectedDepthControls = 0x214; // bool
            public const nint m_flMinProjectionDepth = 0x218; // float32
            public const nint m_flMaxProjectionDepth = 0x21C; // float32
            public const nint m_vecProjectedMaterials = 0x220; // CUtlVector<RenderProjectedMaterial_t>
            public const nint m_flMaterialSelection = 0x238; // CPerParticleFloatInput
            public const nint m_flAnimationTimeScale = 0x398; // float32
            public const nint m_bOrientToNormal = 0x39C; // bool
            public const nint m_MaterialVars = 0x3A0; // CUtlVector<MaterialVariable_t>
            public const nint m_flRadiusScale = 0x3B8; // CParticleCollectionFloatInput
            public const nint m_flAlphaScale = 0x518; // CParticleCollectionFloatInput
            public const nint m_flRollScale = 0x678; // CParticleCollectionFloatInput
            public const nint m_nAlpha2Field = 0x7D8; // ParticleAttributeIndex_t
            public const nint m_vecColorScale = 0x7E0; // CParticleCollectionVecInput
            public const nint m_nColorBlendType = 0xE58; // ParticleColorBlendType_t
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_MaxVelocity {
            public const nint m_flMaxVelocity = 0x1C0; // float32
            public const nint m_flMinVelocity = 0x1C4; // float32
            public const nint m_nOverrideCP = 0x1C8; // int32
            public const nint m_nOverrideCPField = 0x1CC; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_VelocityFromNormal {
            public const nint m_fSpeedMin = 0x1C8; // float32
            public const nint m_fSpeedMax = 0x1CC; // float32
            public const nint m_bIgnoreDt = 0x1D0; // bool
        }
        // Parent: CParticleFunctionEmitter
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_MaintainEmitter {
            public const nint m_nParticlesToMaintain = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_flStartTime = 0x328; // float32
            public const nint m_flEmissionDuration = 0x330; // CParticleCollectionFloatInput
            public const nint m_flEmissionRate = 0x490; // float32
            public const nint m_nSnapshotControlPoint = 0x494; // int32
            public const nint m_bEmitInstantaneously = 0x498; // bool
            public const nint m_bFinalEmitOnStop = 0x499; // bool
            public const nint m_flScale = 0x4A0; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_PositionOffsetToCP {
            public const nint m_nControlPointNumberStart = 0x1C8; // int32
            public const nint m_nControlPointNumberEnd = 0x1CC; // int32
            public const nint m_bLocalCoords = 0x1D0; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapInitialTransformDirectionToRotation {
            public const nint m_TransformInput = 0x1C8; // CParticleTransformInput
            public const nint m_nFieldOutput = 0x230; // ParticleAttributeIndex_t
            public const nint m_flOffsetRot = 0x234; // float32
            public const nint m_nComponent = 0x238; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_FadeAndKill {
            public const nint m_flStartFadeInTime = 0x1C0; // float32
            public const nint m_flEndFadeInTime = 0x1C4; // float32
            public const nint m_flStartFadeOutTime = 0x1C8; // float32
            public const nint m_flEndFadeOutTime = 0x1CC; // float32
            public const nint m_flStartAlpha = 0x1D0; // float32
            public const nint m_flEndAlpha = 0x1D4; // float32
            public const nint m_bForcePreserveParticleOrder = 0x1D8; // bool
        }
        // Parent: None
        // Field count: 1
        public static class PARTICLE_WORLD_HANDLE__ {
            public const nint unused = 0x0; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ColorInterpolate {
            public const nint m_ColorFade = 0x1C0; // Color
            public const nint m_flFadeStartTime = 0x1D0; // float32
            public const nint m_flFadeEndTime = 0x1D4; // float32
            public const nint m_nFieldOutput = 0x1D8; // ParticleAttributeIndex_t
            public const nint m_bEaseInOut = 0x1DC; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RampScalarSpline {
            public const nint m_RateMin = 0x1C0; // float32
            public const nint m_RateMax = 0x1C4; // float32
            public const nint m_flStartTime_min = 0x1C8; // float32
            public const nint m_flStartTime_max = 0x1CC; // float32
            public const nint m_flEndTime_min = 0x1D0; // float32
            public const nint m_flEndTime_max = 0x1D4; // float32
            public const nint m_flBias = 0x1D8; // float32
            public const nint m_nField = 0x200; // ParticleAttributeIndex_t
            public const nint m_bProportionalOp = 0x204; // bool
            public const nint m_bEaseOut = 0x205; // bool
        }
        // Parent: C_OP_RemapNamedModelElementOnceTimed
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapNamedModelSequenceOnceTimed {
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointFromObjectScale {
            public const nint m_nCPInput = 0x1C8; // int32
            public const nint m_nCPOutput = 0x1CC; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_MaintainSequentialPath {
            public const nint m_fMaxDistance = 0x1C0; // float32
            public const nint m_flNumToAssign = 0x1C4; // float32
            public const nint m_flCohesionStrength = 0x1C8; // float32
            public const nint m_flTolerance = 0x1CC; // float32
            public const nint m_bLoop = 0x1D0; // bool
            public const nint m_bUseParticleCount = 0x1D1; // bool
            public const nint m_PathParams = 0x1E0; // CPathParameters
        }
        // Parent: C_OP_RemapNamedModelElementEndCap
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapNamedModelBodyPartEndCap {
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_StopAfterCPDuration {
            public const nint m_flDuration = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_bDestroyImmediately = 0x328; // bool
            public const nint m_bPlayEndCap = 0x329; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CGeneralSpin {
            public const nint m_nSpinRateDegrees = 0x1C0; // int32
            public const nint m_nSpinRateMinDegrees = 0x1C4; // int32
            public const nint m_fSpinRateStopTime = 0x1CC; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MParticleMaxVersion
        // MParticleReplacementOp
        // MGetKV3ClassDefaults
        public static class C_OP_LockToSavedSequentialPath {
            public const nint m_flFadeStart = 0x1C4; // float32
            public const nint m_flFadeEnd = 0x1C8; // float32
            public const nint m_bCPPairs = 0x1CC; // bool
            public const nint m_PathParams = 0x1D0; // CPathParameters
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapNamedModelElementToScalar {
            public const nint m_hModel = 0x1C8; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_names = 0x1D0; // CUtlVector<CUtlString>
            public const nint m_values = 0x1E8; // CUtlVector<float32>
            public const nint m_nFieldInput = 0x200; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x204; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x208; // ParticleSetMethod_t
            public const nint m_bModelFromRenderer = 0x20C; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ClampVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecOutputMin = 0x1C8; // CPerParticleVecInput
            public const nint m_vecOutputMax = 0x840; // CPerParticleVecInput
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderStatusEffectCitadel {
            public const nint m_pTextureColorWarp = 0x210; // 
            public const nint m_pTextureNormal = 0x218; // 
            public const nint m_pTextureMetalness = 0x220; // 
            public const nint m_pTextureRoughness = 0x228; // 
            public const nint m_pTextureSelfIllum = 0x230; // 
            public const nint m_pTextureDetail = 0x238; // 
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapCPtoScalar {
            public const nint m_nCPInput = 0x1C8; // int32
            public const nint m_nFieldOutput = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_nField = 0x1D0; // int32
            public const nint m_flInputMin = 0x1D4; // float32
            public const nint m_flInputMax = 0x1D8; // float32
            public const nint m_flOutputMin = 0x1DC; // float32
            public const nint m_flOutputMax = 0x1E0; // float32
            public const nint m_flStartTime = 0x1E4; // float32
            public const nint m_flEndTime = 0x1E8; // float32
            public const nint m_nSetMethod = 0x1EC; // ParticleSetMethod_t
            public const nint m_flRemapBias = 0x1F0; // float32
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class IParticleSystemDefinition {
        }
        // Parent: CParticleFloatInput
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyCustomEditor
        public static class CParticleCollectionFloatInput {
        }
        // Parent: CParticleFunctionForce
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_WindForce {
            public const nint m_vForce = 0x1D0; // Vector
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetVariable {
            public const nint m_variableReference = 0x1C8; // CParticleVariableRef
            public const nint m_transformInput = 0x208; // CParticleTransformInput
            public const nint m_positionOffset = 0x270; // Vector
            public const nint m_rotationOffset = 0x27C; // QAngle
            public const nint m_vecInput = 0x288; // CParticleCollectionVecInput
            public const nint m_floatInput = 0x900; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 29
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderStandardLight {
            public const nint m_nLightType = 0x210; // ParticleLightTypeChoiceList_t
            public const nint m_vecColorScale = 0x218; // CParticleCollectionVecInput
            public const nint m_nColorBlendType = 0x890; // ParticleColorBlendType_t
            public const nint m_flIntensity = 0x898; // CParticleCollectionFloatInput
            public const nint m_bCastShadows = 0x9F8; // bool
            public const nint m_flTheta = 0xA00; // CParticleCollectionFloatInput
            public const nint m_flPhi = 0xB60; // CParticleCollectionFloatInput
            public const nint m_flRadiusMultiplier = 0xCC0; // CParticleCollectionFloatInput
            public const nint m_nAttenuationStyle = 0xE20; // StandardLightingAttenuationStyle_t
            public const nint m_flFalloffLinearity = 0xE28; // CParticleCollectionFloatInput
            public const nint m_flFiftyPercentFalloff = 0xF88; // CParticleCollectionFloatInput
            public const nint m_flZeroPercentFalloff = 0x10E8; // CParticleCollectionFloatInput
            public const nint m_bRenderDiffuse = 0x1248; // bool
            public const nint m_bRenderSpecular = 0x1249; // bool
            public const nint m_lightCookie = 0x1250; // CUtlString
            public const nint m_nPriority = 0x1258; // int32
            public const nint m_nFogLightingMode = 0x125C; // ParticleLightFogLightingMode_t
            public const nint m_flFogContribution = 0x1260; // 
            public const nint m_nCapsuleLightBehavior = 0x13C0; // ParticleLightBehaviorChoiceList_t
            public const nint m_flCapsuleLength = 0x13C4; // float32
            public const nint m_bReverseOrder = 0x13C8; // bool
            public const nint m_bClosedLoop = 0x13C9; // bool
            public const nint m_nPrevPntSource = 0x13CC; // ParticleAttributeIndex_t
            public const nint m_flMaxLength = 0x13D0; // float32
            public const nint m_flMinLength = 0x13D4; // float32
            public const nint m_bIgnoreDT = 0x13D8; // bool
            public const nint m_flConstrainRadiusToLengthRatio = 0x13DC; // float32
            public const nint m_flLengthScale = 0x13E0; // float32
            public const nint m_flLengthFadeInTime = 0x13E4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 15
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_DistanceToTransform {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // CPerParticleFloatInput
            public const nint m_flInputMax = 0x328; // CPerParticleFloatInput
            public const nint m_flOutputMin = 0x488; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x5E8; // CPerParticleFloatInput
            public const nint m_TransformStart = 0x748; // CParticleTransformInput
            public const nint m_bLOS = 0x7B0; // bool
            public const nint m_CollisionGroupName = 0x7B1; // char[128]
            public const nint m_nTraceSet = 0x834; // ParticleTraceSet_t
            public const nint m_flMaxTraceLength = 0x838; // float32
            public const nint m_flLOSScale = 0x83C; // float32
            public const nint m_nSetMethod = 0x840; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x844; // bool
            public const nint m_bAdditive = 0x845; // bool
            public const nint m_vecComponentScale = 0x848; // CPerParticleVecInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapControlPointOrientationToRotation {
            public const nint m_nCP = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flOffsetRot = 0x1C8; // float32
            public const nint m_nComponent = 0x1CC; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointToCenter {
            public const nint m_nCP1 = 0x1C8; // int32
            public const nint m_vecCP1Pos = 0x1CC; // Vector
            public const nint m_bUseAvgParticlePos = 0x1D8; // bool
            public const nint m_nSetParent = 0x1DC; // ParticleParentSetMode_t
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapAverageScalarValuetoCP {
            public const nint m_nOutControlPointNumber = 0x1C8; // int32
            public const nint m_nOutVectorField = 0x1CC; // int32
            public const nint m_nField = 0x1D0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1D4; // float32
            public const nint m_flInputMax = 0x1D8; // float32
            public const nint m_flOutputMin = 0x1DC; // float32
            public const nint m_flOutputMax = 0x1E0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapDotProductToScalar {
            public const nint m_nInputCP1 = 0x1C0; // int32
            public const nint m_nInputCP2 = 0x1C4; // int32
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1CC; // float32
            public const nint m_flInputMax = 0x1D0; // float32
            public const nint m_flOutputMin = 0x1D4; // float32
            public const nint m_flOutputMax = 0x1D8; // float32
            public const nint m_bUseParticleVelocity = 0x1DC; // bool
            public const nint m_nSetMethod = 0x1E0; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x1E4; // bool
            public const nint m_bUseParticleNormal = 0x1E5; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapCPtoCP {
            public const nint m_nInputControlPoint = 0x1C8; // int32
            public const nint m_nOutputControlPoint = 0x1CC; // int32
            public const nint m_nInputField = 0x1D0; // int32
            public const nint m_nOutputField = 0x1D4; // int32
            public const nint m_flInputMin = 0x1D8; // float32
            public const nint m_flInputMax = 0x1DC; // float32
            public const nint m_flOutputMin = 0x1E0; // float32
            public const nint m_flOutputMax = 0x1E4; // float32
            public const nint m_bDerivative = 0x1E8; // bool
            public const nint m_flInterpRate = 0x1EC; // float32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointRotation {
            public const nint m_vecRotAxis = 0x1C8; // CParticleCollectionVecInput
            public const nint m_flRotRate = 0x840; // CParticleCollectionFloatInput
            public const nint m_nCP = 0x9A0; // int32
            public const nint m_nLocalCP = 0x9A4; // int32
        }
        // Parent: CParticleFunctionForce
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_CurlNoiseForce {
            public const nint m_nNoiseType = 0x1D0; // ParticleDirectionNoiseType_t
            public const nint m_vecNoiseFreq = 0x1D8; // CPerParticleVecInput
            public const nint m_vecNoiseScale = 0x850; // CPerParticleVecInput
            public const nint m_vecOffset = 0xEC8; // CPerParticleVecInput
            public const nint m_vecOffsetRate = 0x1540; // CPerParticleVecInput
            public const nint m_flWorleySeed = 0x1BB8; // CPerParticleFloatInput
            public const nint m_flWorleyJitter = 0x1D18; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_Orient2DRelToCP {
            public const nint m_nCP = 0x1C8; // int32
            public const nint m_nFieldOutput = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_flRotOffset = 0x1D0; // float32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetSimulationRate {
            public const nint m_flSimulationScale = 0x1C8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_FadeIn {
            public const nint m_flFadeInTimeMin = 0x1C0; // float32
            public const nint m_flFadeInTimeMax = 0x1C4; // float32
            public const nint m_flFadeInTimeExp = 0x1C8; // float32
            public const nint m_bProportional = 0x1CC; // bool
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderScreenShake {
            public const nint m_flDurationScale = 0x210; // float32
            public const nint m_flRadiusScale = 0x214; // float32
            public const nint m_flFrequencyScale = 0x218; // float32
            public const nint m_flAmplitudeScale = 0x21C; // float32
            public const nint m_nRadiusField = 0x220; // ParticleAttributeIndex_t
            public const nint m_nDurationField = 0x224; // ParticleAttributeIndex_t
            public const nint m_nFrequencyField = 0x228; // ParticleAttributeIndex_t
            public const nint m_nAmplitudeField = 0x22C; // ParticleAttributeIndex_t
            public const nint m_nFilterCP = 0x230; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapBoundingVolumetoCP {
            public const nint m_nOutControlPointNumber = 0x1C8; // int32
            public const nint m_flInputMin = 0x1CC; // float32
            public const nint m_flInputMax = 0x1D0; // float32
            public const nint m_flOutputMin = 0x1D4; // float32
            public const nint m_flOutputMax = 0x1D8; // float32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_HSVShiftToCP {
            public const nint m_nColorCP = 0x1C8; // int32
            public const nint m_nColorGemEnableCP = 0x1CC; // int32
            public const nint m_nOutputCP = 0x1D0; // int32
            public const nint m_DefaultHSVColor = 0x1D4; // Color
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_GlobalScale {
            public const nint m_flScale = 0x1C8; // float32
            public const nint m_nScaleControlPointNumber = 0x1CC; // int32
            public const nint m_nControlPointNumber = 0x1D0; // int32
            public const nint m_bScaleRadius = 0x1D4; // bool
            public const nint m_bScalePosition = 0x1D5; // bool
            public const nint m_bScaleVelocity = 0x1D6; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RadiusFromCPObject {
            public const nint m_nControlPoint = 0x1C8; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InitialVelocityFromHitbox {
            public const nint m_flVelocityMin = 0x1C8; // float32
            public const nint m_flVelocityMax = 0x1CC; // float32
            public const nint m_nControlPointNumber = 0x1D0; // int32
            public const nint m_HitboxSetName = 0x1D4; // char[128]
            public const nint m_bUseBones = 0x254; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_LerpVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecOutput = 0x1C4; // Vector
            public const nint m_flStartTime = 0x1D0; // float32
            public const nint m_flEndTime = 0x1D4; // float32
            public const nint m_nSetMethod = 0x1D8; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointFieldToWater {
            public const nint m_nSourceCP = 0x1C8; // int32
            public const nint m_nDestCP = 0x1CC; // int32
            public const nint m_nCPField = 0x1D0; // int32
        }
        // Parent: None
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class TextureGroup_t {
            public const nint m_bEnabled = 0x0; // bool
            public const nint m_bReplaceTextureWithGradient = 0x1; // bool
            public const nint m_hTexture = 0x8; // 
            public const nint m_Gradient = 0x10; // CColorGradient
            public const nint m_nTextureType = 0x28; // SpriteCardTextureType_t
            public const nint m_nTextureChannels = 0x2C; // SpriteCardTextureChannel_t
            public const nint m_nTextureBlendMode = 0x30; // ParticleTextureLayerBlendType_t
            public const nint m_flTextureBlend = 0x38; // 
            public const nint m_TextureControls = 0x198; // TextureControls_t
        }
        // Parent: CParticleFunctionForce
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_TimeVaryingForce {
            public const nint m_flStartLerpTime = 0x1D0; // float32
            public const nint m_StartingForce = 0x1D4; // Vector
            public const nint m_flEndLerpTime = 0x1E0; // float32
            public const nint m_EndingForce = 0x1E4; // Vector
        }
        // Parent: CParticleFunctionOperator
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetCPOrientationToGroundNormal {
            public const nint m_flInterpRate = 0x1C0; // float32
            public const nint m_flMaxTraceLength = 0x1C4; // float32
            public const nint m_flTolerance = 0x1C8; // float32
            public const nint m_flTraceOffset = 0x1CC; // float32
            public const nint m_CollisionGroupName = 0x1D0; // char[128]
            public const nint m_nTraceSet = 0x250; // ParticleTraceSet_t
            public const nint m_nInputCP = 0x254; // int32
            public const nint m_nOutputCP = 0x258; // int32
            public const nint m_bIncludeWater = 0x268; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SnapshotSkinToBones {
            public const nint m_bTransformNormals = 0x1C0; // bool
            public const nint m_bTransformRadii = 0x1C1; // bool
            public const nint m_nControlPointNumber = 0x1C4; // int32
            public const nint m_flLifeTimeFadeStart = 0x1C8; // float32
            public const nint m_flLifeTimeFadeEnd = 0x1CC; // float32
            public const nint m_flJumpThreshold = 0x1D0; // float32
            public const nint m_flPrevPosScale = 0x1D4; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 14
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateWithinSphereTransform {
            public const nint m_fRadiusMin = 0x1C8; // CPerParticleFloatInput
            public const nint m_fRadiusMax = 0x328; // CPerParticleFloatInput
            public const nint m_vecDistanceBias = 0x488; // CPerParticleVecInput
            public const nint m_vecDistanceBiasAbs = 0xB00; // Vector
            public const nint m_TransformInput = 0xB10; // CParticleTransformInput
            public const nint m_fSpeedMin = 0xB78; // CPerParticleFloatInput
            public const nint m_fSpeedMax = 0xCD8; // CPerParticleFloatInput
            public const nint m_fSpeedRandExp = 0xE38; // float32
            public const nint m_bLocalCoords = 0xE3C; // bool
            public const nint m_flEndCPGrowthTime = 0xE40; // float32
            public const nint m_LocalCoordinateSystemSpeedMin = 0xE48; // CPerParticleVecInput
            public const nint m_LocalCoordinateSystemSpeedMax = 0x14C0; // CPerParticleVecInput
            public const nint m_nFieldOutput = 0x1B38; // ParticleAttributeIndex_t
            public const nint m_nFieldVelocity = 0x1B3C; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RadiusDecay {
            public const nint m_flMinRadius = 0x1C0; // float32
        }
        // Parent: C_INIT_RemapNamedModelElementToScalar
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapNamedModelBodyPartToScalar {
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 12
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapScalarToVector {
            public const nint m_nFieldInput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1D0; // float32
            public const nint m_flInputMax = 0x1D4; // float32
            public const nint m_vecOutputMin = 0x1D8; // Vector
            public const nint m_vecOutputMax = 0x1E4; // Vector
            public const nint m_flStartTime = 0x1F0; // float32
            public const nint m_flEndTime = 0x1F4; // float32
            public const nint m_nSetMethod = 0x1F8; // ParticleSetMethod_t
            public const nint m_nControlPointNumber = 0x1FC; // int32
            public const nint m_bLocalCoords = 0x200; // bool
            public const nint m_flRemapBias = 0x204; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InitialSequenceFromModel {
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_nFieldOutput = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_nFieldOutputAnim = 0x1D0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1D4; // float32
            public const nint m_flInputMax = 0x1D8; // float32
            public const nint m_flOutputMin = 0x1DC; // float32
            public const nint m_flOutputMax = 0x1E0; // float32
            public const nint m_nSetMethod = 0x1E4; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionEmitter
        // Field count: 15
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_NoiseEmitter {
            public const nint m_flEmissionDuration = 0x1C8; // float32
            public const nint m_flStartTime = 0x1CC; // float32
            public const nint m_flEmissionScale = 0x1D0; // float32
            public const nint m_nScaleControlPoint = 0x1D4; // int32
            public const nint m_nScaleControlPointField = 0x1D8; // int32
            public const nint m_nWorldNoisePoint = 0x1DC; // int32
            public const nint m_bAbsVal = 0x1E0; // bool
            public const nint m_bAbsValInv = 0x1E1; // bool
            public const nint m_flOffset = 0x1E4; // float32
            public const nint m_flOutputMin = 0x1E8; // float32
            public const nint m_flOutputMax = 0x1EC; // float32
            public const nint m_flNoiseScale = 0x1F0; // float32
            public const nint m_flWorldNoiseScale = 0x1F4; // float32
            public const nint m_vecOffsetLoc = 0x1F8; // Vector
            public const nint m_flWorldTimeScale = 0x204; // float32
        }
        // Parent: CParticleFunction
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CParticleFunctionInitializer {
            public const nint m_nAssociatedEmitterIndex = 0x1C0; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SelectivelyEnableChildren {
            public const nint m_nChildGroupID = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_nFirstChild = 0x328; // CParticleCollectionFloatInput
            public const nint m_nNumChildrenToEnable = 0x488; // CParticleCollectionFloatInput
            public const nint m_bPlayEndcapOnStop = 0x5E8; // bool
            public const nint m_bDestroyImmediately = 0x5E9; // bool
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ModelReference_t {
            public const nint m_model = 0x0; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_flRelativeProbabilityOfSpawn = 0x8; // float32
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_PlanarConstraint {
            public const nint m_PointOnPlane = 0x1C0; // Vector
            public const nint m_PlaneNormal = 0x1CC; // Vector
            public const nint m_nControlPointNumber = 0x1D8; // int32
            public const nint m_bGlobalOrigin = 0x1DC; // bool
            public const nint m_bGlobalNormal = 0x1DD; // bool
            public const nint m_flRadiusScale = 0x1E0; // CPerParticleFloatInput
            public const nint m_flMaximumDistanceToCP = 0x340; // CParticleCollectionFloatInput
            public const nint m_bUseOldCode = 0x4A0; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateFromCPs {
            public const nint m_nIncrement = 0x1C8; // int32
            public const nint m_nMinCP = 0x1CC; // int32
            public const nint m_nMaxCP = 0x1D0; // int32
            public const nint m_nDynamicCPCount = 0x1D8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_LockPoints {
            public const nint m_nMinCol = 0x1C0; // int32
            public const nint m_nMaxCol = 0x1C4; // int32
            public const nint m_nMinRow = 0x1C8; // int32
            public const nint m_nMaxRow = 0x1CC; // int32
            public const nint m_nControlPoint = 0x1D0; // int32
            public const nint m_flBlendValue = 0x1D4; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_CreateSpiralSphere {
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_nOverrideCP = 0x1CC; // int32
            public const nint m_nDensity = 0x1D0; // int32
            public const nint m_flInitialRadius = 0x1D4; // float32
            public const nint m_flInitialSpeedMin = 0x1D8; // float32
            public const nint m_flInitialSpeedMax = 0x1DC; // float32
            public const nint m_bUseParticleCount = 0x1E0; // bool
        }
        // Parent: CParticleFunctionForce
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_CPVelocityForce {
            public const nint m_nControlPointNumber = 0x1D0; // int32
            public const nint m_flScale = 0x1D8; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapNamedModelElementEndCap {
            public const nint m_hModel = 0x1C0; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_inNames = 0x1C8; // CUtlVector<CUtlString>
            public const nint m_outNames = 0x1E0; // CUtlVector<CUtlString>
            public const nint m_fallbackNames = 0x1F8; // CUtlVector<CUtlString>
            public const nint m_bModelFromRenderer = 0x210; // bool
            public const nint m_nFieldInput = 0x214; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x218; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_ScaleVelocity {
            public const nint m_vecScale = 0x1C8; // CParticleCollectionVecInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_MoveToHitbox {
            public const nint m_modelInput = 0x1C0; // CParticleModelInput
            public const nint m_transformInput = 0x220; // CParticleTransformInput
            public const nint m_flLifeTimeLerpStart = 0x28C; // float32
            public const nint m_flLifeTimeLerpEnd = 0x290; // float32
            public const nint m_flPrevPosScale = 0x294; // float32
            public const nint m_HitboxSetName = 0x298; // char[128]
            public const nint m_bUseBones = 0x318; // bool
            public const nint m_nLerpType = 0x31C; // HitboxLerpType_t
            public const nint m_flInterpolation = 0x320; // CPerParticleFloatInput
        }
        // Parent: CParticleInput
        // Field count: 47
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MParticleCustomFieldDefaultValue
        public static class CParticleFloatInput {
            public const nint m_nType = 0x10; // ParticleFloatType_t
            public const nint m_nMapType = 0x14; // ParticleFloatMapType_t
            public const nint m_flLiteralValue = 0x18; // float32
            public const nint m_NamedValue = 0x20; // CParticleNamedValueRef
            public const nint m_nControlPoint = 0x60; // int32
            public const nint m_nScalarAttribute = 0x64; // ParticleAttributeIndex_t
            public const nint m_nVectorAttribute = 0x68; // ParticleAttributeIndex_t
            public const nint m_nVectorComponent = 0x6C; // int32
            public const nint m_flRandomMin = 0x70; // float32
            public const nint m_flRandomMax = 0x74; // float32
            public const nint m_bHasRandomSignFlip = 0x78; // bool
            public const nint m_nRandomSeed = 0x7C; // int32
            public const nint m_nRandomMode = 0x80; // ParticleFloatRandomMode_t
            public const nint m_flLOD0 = 0x88; // float32
            public const nint m_flLOD1 = 0x8C; // float32
            public const nint m_flLOD2 = 0x90; // float32
            public const nint m_flLOD3 = 0x94; // float32
            public const nint m_nNoiseInputVectorAttribute = 0x98; // ParticleAttributeIndex_t
            public const nint m_flNoiseOutputMin = 0x9C; // float32
            public const nint m_flNoiseOutputMax = 0xA0; // float32
            public const nint m_flNoiseScale = 0xA4; // float32
            public const nint m_vecNoiseOffsetRate = 0xA8; // Vector
            public const nint m_flNoiseOffset = 0xB4; // float32
            public const nint m_nNoiseOctaves = 0xB8; // int32
            public const nint m_nNoiseTurbulence = 0xBC; // PFNoiseTurbulence_t
            public const nint m_nNoiseType = 0xC0; // PFNoiseType_t
            public const nint m_nNoiseModifier = 0xC4; // PFNoiseModifier_t
            public const nint m_flNoiseTurbulenceScale = 0xC8; // float32
            public const nint m_flNoiseTurbulenceMix = 0xCC; // float32
            public const nint m_flNoiseImgPreviewScale = 0xD0; // float32
            public const nint m_bNoiseImgPreviewLive = 0xD4; // bool
            public const nint m_flNoCameraFallback = 0xE0; // float32
            public const nint m_bUseBoundsCenter = 0xE4; // bool
            public const nint m_nInputMode = 0xE8; // ParticleFloatInputMode_t
            public const nint m_flMultFactor = 0xEC; // float32
            public const nint m_flInput0 = 0xF0; // float32
            public const nint m_flInput1 = 0xF4; // float32
            public const nint m_flOutput0 = 0xF8; // float32
            public const nint m_flOutput1 = 0xFC; // float32
            public const nint m_flNotchedRangeMin = 0x100; // float32
            public const nint m_flNotchedRangeMax = 0x104; // float32
            public const nint m_flNotchedOutputOutside = 0x108; // float32
            public const nint m_flNotchedOutputInside = 0x10C; // float32
            public const nint m_nRoundType = 0x110; // ParticleFloatRoundType_t
            public const nint m_nBiasType = 0x114; // ParticleFloatBiasType_t
            public const nint m_flBiasParameter = 0x118; // float32
            public const nint m_Curve = 0x120; // CPiecewiseCurve
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_PointList {
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_pointList = 0x1D0; // CUtlVector<PointDefinition_t>
            public const nint m_bPlaceAlongPath = 0x1E8; // bool
            public const nint m_bClosedLoop = 0x1E9; // bool
            public const nint m_nNumPointsAlongPath = 0x1EC; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_LerpToOtherAttribute {
            public const nint m_flInterpolation = 0x1C0; // CPerParticleFloatInput
            public const nint m_nFieldInputFrom = 0x320; // ParticleAttributeIndex_t
            public const nint m_nFieldInput = 0x324; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x328; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RandomColor {
            public const nint m_ColorMin = 0x1E4; // Color
            public const nint m_ColorMax = 0x1E8; // Color
            public const nint m_TintMin = 0x1EC; // Color
            public const nint m_TintMax = 0x1F0; // Color
            public const nint m_flTintPerc = 0x1F4; // float32
            public const nint m_flUpdateThreshold = 0x1F8; // float32
            public const nint m_nTintCP = 0x1FC; // int32
            public const nint m_nFieldOutput = 0x200; // ParticleAttributeIndex_t
            public const nint m_nTintBlendMode = 0x204; // ParticleColorBlendMode_t
            public const nint m_flLightAmplification = 0x208; // float32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetGravityToCP {
            public const nint m_nCPInput = 0x1C8; // int32
            public const nint m_nCPOutput = 0x1CC; // int32
            public const nint m_flScale = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_bSetOrientation = 0x330; // bool
            public const nint m_bSetZDown = 0x331; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 12
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapParticleCountToScalar {
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_nInputMin = 0x1CC; // int32
            public const nint m_nInputMax = 0x1D0; // int32
            public const nint m_nScaleControlPoint = 0x1D4; // int32
            public const nint m_nScaleControlPointField = 0x1D8; // int32
            public const nint m_flOutputMin = 0x1DC; // float32
            public const nint m_flOutputMax = 0x1E0; // float32
            public const nint m_nSetMethod = 0x1E4; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x1E8; // bool
            public const nint m_bInvert = 0x1E9; // bool
            public const nint m_bWrap = 0x1EA; // bool
            public const nint m_flRemapBias = 0x1EC; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InheritFromParentParticles {
            public const nint m_flScale = 0x1C8; // float32
            public const nint m_nFieldOutput = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_nIncrement = 0x1D0; // int32
            public const nint m_bRandomDistribution = 0x1D4; // bool
            public const nint m_nRandomSeed = 0x1D8; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RampScalarLinearSimple {
            public const nint m_Rate = 0x1C0; // float32
            public const nint m_flStartTime = 0x1C4; // float32
            public const nint m_flEndTime = 0x1C8; // float32
            public const nint m_nField = 0x1F0; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_ChaoticAttractor {
            public const nint m_flAParm = 0x1C8; // float32
            public const nint m_flBParm = 0x1CC; // float32
            public const nint m_flCParm = 0x1D0; // float32
            public const nint m_flDParm = 0x1D4; // float32
            public const nint m_flScale = 0x1D8; // float32
            public const nint m_flSpeedMin = 0x1DC; // float32
            public const nint m_flSpeedMax = 0x1E0; // float32
            public const nint m_nBaseCP = 0x1E4; // int32
            public const nint m_bUniformSpeed = 0x1E8; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_MovementRigidAttachToCP {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nScaleControlPoint = 0x1C4; // int32
            public const nint m_nScaleCPField = 0x1C8; // int32
            public const nint m_nFieldInput = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1D0; // ParticleAttributeIndex_t
            public const nint m_bOffsetLocal = 0x1D4; // bool
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderFlattenGrass {
            public const nint m_flFlattenStrength = 0x210; // float32
            public const nint m_nStrengthFieldOverride = 0x214; // ParticleAttributeIndex_t
            public const nint m_flRadiusScale = 0x218; // float32
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderLightBeam {
            public const nint m_vColorBlend = 0x210; // CParticleCollectionVecInput
            public const nint m_nColorBlendType = 0x888; // ParticleColorBlendType_t
            public const nint m_flBrightnessLumensPerMeter = 0x890; // CParticleCollectionFloatInput
            public const nint m_bCastShadows = 0x9F0; // bool
            public const nint m_flSkirt = 0x9F8; // CParticleCollectionFloatInput
            public const nint m_flRange = 0xB58; // CParticleCollectionFloatInput
            public const nint m_flThickness = 0xCB8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_EnableChildrenFromParentParticleCount {
            public const nint m_nChildGroupID = 0x1C8; // int32
            public const nint m_nFirstChild = 0x1CC; // int32
            public const nint m_nNumChildrenToEnable = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_bDisableChildren = 0x330; // bool
            public const nint m_bPlayEndcapOnStop = 0x331; // bool
            public const nint m_bDestroyImmediately = 0x332; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 15
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_DistanceToCPInit {
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1D0; // CPerParticleFloatInput
            public const nint m_flInputMax = 0x330; // CPerParticleFloatInput
            public const nint m_flOutputMin = 0x490; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x5F0; // CPerParticleFloatInput
            public const nint m_nStartCP = 0x750; // int32
            public const nint m_bLOS = 0x754; // bool
            public const nint m_CollisionGroupName = 0x755; // char[128]
            public const nint m_nTraceSet = 0x7D8; // ParticleTraceSet_t
            public const nint m_flMaxTraceLength = 0x7E0; // CPerParticleFloatInput
            public const nint m_flLOSScale = 0x940; // float32
            public const nint m_nSetMethod = 0x944; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x948; // bool
            public const nint m_vecDistanceScale = 0x94C; // Vector
            public const nint m_flRemapBias = 0x958; // float32
        }
        // Parent: None
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CReplicationParameters {
            public const nint m_nReplicationMode = 0x0; // ParticleReplicationMode_t
            public const nint m_bScaleChildParticleRadii = 0x4; // bool
            public const nint m_flMinRandomRadiusScale = 0x8; // CParticleCollectionFloatInput
            public const nint m_flMaxRandomRadiusScale = 0x168; // CParticleCollectionFloatInput
            public const nint m_vMinRandomDisplacement = 0x2C8; // CParticleCollectionVecInput
            public const nint m_vMaxRandomDisplacement = 0x940; // CParticleCollectionVecInput
            public const nint m_flModellingScale = 0xFB8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_EndCapDecay {
        }
        // Parent: CParticleFunctionForce
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ForceBasedOnDistanceToPlane {
            public const nint m_flMinDist = 0x1D0; // float32
            public const nint m_vecForceAtMinDist = 0x1D4; // Vector
            public const nint m_flMaxDist = 0x1E0; // float32
            public const nint m_vecForceAtMaxDist = 0x1E4; // Vector
            public const nint m_vecPlaneNormal = 0x1F0; // Vector
            public const nint m_nControlPointNumber = 0x1FC; // int32
            public const nint m_flExponent = 0x200; // float32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapDensityToVector {
            public const nint m_flRadiusScale = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flDensityMin = 0x1C8; // float32
            public const nint m_flDensityMax = 0x1CC; // float32
            public const nint m_vecOutputMin = 0x1D0; // Vector
            public const nint m_vecOutputMax = 0x1DC; // Vector
            public const nint m_bUseParentDensity = 0x1E8; // bool
            public const nint m_nVoxelGridResolution = 0x1EC; // int32
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ParticleControlPointConfiguration_t {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_drivers = 0x8; // CUtlVector<ParticleControlPointDriver_t>
            public const nint m_previewState = 0x20; // ParticlePreviewState_t
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_SetRigidAttachment {
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_nFieldInput = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1D0; // ParticleAttributeIndex_t
            public const nint m_bLocalSpace = 0x1D4; // bool
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class MaterialVariable_t {
            public const nint m_strVariable = 0x0; // CUtlString
            public const nint m_nVariableField = 0x8; // ParticleAttributeIndex_t
            public const nint m_flScale = 0xC; // float32
        }
        // Parent: CParticleFunction
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CParticleFunctionConstraint {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapSpeed {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C4; // float32
            public const nint m_flInputMax = 0x1C8; // float32
            public const nint m_flOutputMin = 0x1CC; // float32
            public const nint m_flOutputMax = 0x1D0; // float32
            public const nint m_nSetMethod = 0x1D4; // ParticleSetMethod_t
            public const nint m_bIgnoreDelta = 0x1D8; // bool
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 54
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderModels {
            public const nint m_bOnlyRenderInEffectsBloomPass = 0x210; // bool
            public const nint m_bOnlyRenderInEffectsWaterPass = 0x211; // bool
            public const nint m_bUseMixedResolutionRendering = 0x212; // bool
            public const nint m_bOnlyRenderInEffecsGameOverlay = 0x213; // bool
            public const nint m_ModelList = 0x218; // CUtlVector<ModelReference_t>
            public const nint m_nBodyGroupField = 0x230; // ParticleAttributeIndex_t
            public const nint m_nSubModelField = 0x234; // ParticleAttributeIndex_t
            public const nint m_bIgnoreNormal = 0x238; // bool
            public const nint m_bOrientZ = 0x239; // bool
            public const nint m_bCenterOffset = 0x23A; // bool
            public const nint m_vecLocalOffset = 0x240; // CPerParticleVecInput
            public const nint m_vecLocalRotation = 0x8B8; // CPerParticleVecInput
            public const nint m_bIgnoreRadius = 0xF30; // bool
            public const nint m_nModelScaleCP = 0xF34; // int32
            public const nint m_vecComponentScale = 0xF38; // CPerParticleVecInput
            public const nint m_bLocalScale = 0x15B0; // bool
            public const nint m_nSizeCullBloat = 0x15B4; // int32
            public const nint m_bAnimated = 0x15B8; // bool
            public const nint m_flAnimationRate = 0x15C0; // CPerParticleFloatInput
            public const nint m_bScaleAnimationRate = 0x1720; // bool
            public const nint m_bForceLoopingAnimation = 0x1721; // bool
            public const nint m_bResetAnimOnStop = 0x1722; // bool
            public const nint m_bManualAnimFrame = 0x1723; // bool
            public const nint m_nAnimationScaleField = 0x1724; // ParticleAttributeIndex_t
            public const nint m_nAnimationField = 0x1728; // ParticleAttributeIndex_t
            public const nint m_nManualFrameField = 0x172C; // ParticleAttributeIndex_t
            public const nint m_ActivityName = 0x1730; // char[256]
            public const nint m_SequenceName = 0x1830; // char[256]
            public const nint m_bEnableClothSimulation = 0x1930; // bool
            public const nint m_ClothEffectName = 0x1931; // char[64]
            public const nint m_hOverrideMaterial = 0x1978; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_bOverrideTranslucentMaterials = 0x1980; // bool
            public const nint m_nSkin = 0x1988; // CPerParticleFloatInput
            public const nint m_MaterialVars = 0x1AE8; // CUtlVector<MaterialVariable_t>
            public const nint m_flManualModelSelection = 0x1B00; // CPerParticleFloatInput
            public const nint m_modelInput = 0x1C60; // CParticleModelInput
            public const nint m_nLOD = 0x1CC0; // int32
            public const nint m_EconSlotName = 0x1CC4; // char[256]
            public const nint m_bOriginalModel = 0x1DC4; // bool
            public const nint m_bSuppressTint = 0x1DC5; // bool
            public const nint m_nSubModelFieldType = 0x1DC8; // RenderModelSubModelFieldType_t
            public const nint m_bDisableShadows = 0x1DCC; // bool
            public const nint m_bDisableDepthPrepass = 0x1DCD; // bool
            public const nint m_bAcceptsDecals = 0x1DCE; // bool
            public const nint m_bForceDrawInterlevedWithSiblings = 0x1DCF; // bool
            public const nint m_bDoNotDrawInParticlePass = 0x1DD0; // bool
            public const nint m_bAllowApproximateTransforms = 0x1DD1; // bool
            public const nint m_szRenderAttribute = 0x1DD2; // char[260]
            public const nint m_flRadiusScale = 0x1ED8; // CParticleCollectionFloatInput
            public const nint m_flAlphaScale = 0x2038; // CParticleCollectionFloatInput
            public const nint m_flRollScale = 0x2198; // CParticleCollectionFloatInput
            public const nint m_nAlpha2Field = 0x22F8; // ParticleAttributeIndex_t
            public const nint m_vecColorScale = 0x2300; // CParticleCollectionVecInput
            public const nint m_nColorBlendType = 0x2978; // ParticleColorBlendType_t
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderClientPhysicsImpulse {
            public const nint m_flRadius = 0x210; // CPerParticleFloatInput
            public const nint m_flMagnitude = 0x370; // CPerParticleFloatInput
            public const nint m_nSimIdFilter = 0x4D0; // int32
        }
        // Parent: CParticleFunction
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CParticleFunctionEmitter {
            public const nint m_nEmitterIndex = 0x1C0; // int32
        }
        // Parent: C_INIT_RemapNamedModelElementToScalar
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapNamedModelMeshGroupToScalar {
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointOrientationToCPVelocity {
            public const nint m_nCPInput = 0x1C8; // int32
            public const nint m_nCPOutput = 0x1CC; // int32
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RopeSpringConstraint {
            public const nint m_flRestLength = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_flMinDistance = 0x320; // CParticleCollectionFloatInput
            public const nint m_flMaxDistance = 0x480; // CParticleCollectionFloatInput
            public const nint m_flAdjustmentScale = 0x5E0; // float32
            public const nint m_flInitialRestingLength = 0x5E8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_PositionWarpScalar {
            public const nint m_vecWarpMin = 0x1C8; // Vector
            public const nint m_vecWarpMax = 0x1D4; // Vector
            public const nint m_InputValue = 0x1E0; // CPerParticleFloatInput
            public const nint m_flPrevPosScale = 0x340; // float32
            public const nint m_nScaleControlPointNumber = 0x344; // int32
            public const nint m_nControlPointNumber = 0x348; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ForceControlPointStub {
            public const nint m_ControlPoint = 0x1C8; // int32
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_VectorNoise {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecOutputMin = 0x1C4; // Vector
            public const nint m_vecOutputMax = 0x1D0; // Vector
            public const nint m_fl4NoiseScale = 0x1DC; // float32
            public const nint m_bAdditive = 0x1E0; // bool
            public const nint m_bOffset = 0x1E1; // bool
            public const nint m_flNoiseAnimationTimeScale = 0x1E4; // float32
        }
        // Parent: None
        // Field count: 0
        public static class IParticleCollection {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapParticleCountToScalar {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nInputMin = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_nInputMax = 0x328; // CParticleCollectionFloatInput
            public const nint m_flOutputMin = 0x488; // CParticleCollectionFloatInput
            public const nint m_flOutputMax = 0x5E8; // CParticleCollectionFloatInput
            public const nint m_bActiveRange = 0x748; // bool
            public const nint m_nSetMethod = 0x74C; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_QuantizeFloat {
            public const nint m_InputValue = 0x1C8; // CPerParticleFloatInput
            public const nint m_nOutputField = 0x328; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RemapModelVolumetoCP {
            public const nint m_nBBoxType = 0x1C8; // 
            public const nint m_nInControlPointNumber = 0x1CC; // int32
            public const nint m_nOutControlPointNumber = 0x1D0; // int32
            public const nint m_nOutControlPointMaxNumber = 0x1D4; // int32
            public const nint m_nField = 0x1D8; // int32
            public const nint m_flInputMin = 0x1DC; // float32
            public const nint m_flInputMax = 0x1E0; // float32
            public const nint m_flOutputMin = 0x1E4; // float32
            public const nint m_flOutputMax = 0x1E8; // float32
            public const nint m_bBBoxOnly = 0x1EC; // bool
            public const nint m_bCubeRoot = 0x1ED; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetToCP {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_vecOffset = 0x1C4; // Vector
            public const nint m_bOffsetLocal = 0x1D0; // bool
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ParticleControlPointDriver_t {
            public const nint m_iControlPoint = 0x0; // int32
            public const nint m_iAttachType = 0x4; // 
            public const nint m_attachmentName = 0x8; // CUtlString
            public const nint m_vecOffset = 0x10; // Vector
            public const nint m_angOffset = 0x1C; // QAngle
            public const nint m_entityName = 0x28; // CUtlString
        }
        // Parent: CParticleFunctionForce
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ParentVortices {
            public const nint m_flForceScale = 0x1D0; // float32
            public const nint m_vecTwistAxis = 0x1D4; // Vector
            public const nint m_bFlipBasedOnYaw = 0x1E0; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetControlPointToCPVelocity {
            public const nint m_nCPInput = 0x1C8; // int32
            public const nint m_nCPOutputVel = 0x1CC; // int32
            public const nint m_bNormalize = 0x1D0; // bool
            public const nint m_nCPOutputMag = 0x1D4; // int32
            public const nint m_nCPField = 0x1D8; // int32
            public const nint m_vecComparisonVelocity = 0x1E0; // CParticleCollectionVecInput
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ClientPhysics {
            public const nint m_strPhysicsType = 0x210; // CUtlString
            public const nint m_bStartAsleep = 0x218; // bool
            public const nint m_flPlayerWakeRadius = 0x220; // CParticleCollectionFloatInput
            public const nint m_flVehicleWakeRadius = 0x380; // CParticleCollectionFloatInput
            public const nint m_bUseHighQualitySimulation = 0x4E0; // bool
            public const nint m_nMaxParticleCount = 0x4E4; // int32
            public const nint m_bRespectExclusionVolumes = 0x4E8; // bool
            public const nint m_bKillParticles = 0x4E9; // bool
            public const nint m_bDeleteSim = 0x4EA; // bool
            public const nint m_nControlPoint = 0x4EC; // int32
            public const nint m_nColorBlendType = 0x4F0; // ParticleColorBlendType_t
        }
        // Parent: CGeneralSpin
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SpinYaw {
        }
        // Parent: PointDefinition_t
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PointDefinitionWithTimeValues_t {
            public const nint m_flTimeDuration = 0x14; // float32
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RenderProjectedMaterial_t {
            public const nint m_hMaterial = 0x0; // CStrongHandle<InfoForResourceTypeIMaterial2>
        }
        // Parent: CParticleFunctionForce
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_ExternalWindForce {
            public const nint m_vecSamplePosition = 0x1D0; // CPerParticleVecInput
            public const nint m_vecScale = 0x848; // CPerParticleVecInput
            public const nint m_bSampleWind = 0xEC0; // bool
            public const nint m_bSampleWater = 0xEC1; // bool
            public const nint m_bDampenNearWaterPlane = 0xEC2; // bool
            public const nint m_bSampleGravity = 0xEC3; // bool
            public const nint m_vecGravityForce = 0xEC8; // CPerParticleVecInput
            public const nint m_bUseBasicMovementGravity = 0x1540; // bool
            public const nint m_flLocalGravityScale = 0x1548; // CPerParticleFloatInput
            public const nint m_flLocalBuoyancyScale = 0x16A8; // CPerParticleFloatInput
            public const nint m_vecBuoyancyForce = 0x1808; // CPerParticleVecInput
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_ModelCull {
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_bBoundBox = 0x1CC; // bool
            public const nint m_bCullOutside = 0x1CD; // bool
            public const nint m_bUseBones = 0x1CE; // bool
            public const nint m_HitboxSetName = 0x1CF; // char[128]
        }
        // Parent: CBaseRendererSource2
        // Field count: 28
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderSprites {
            public const nint m_nSequenceOverride = 0x2AA8; // 
            public const nint m_nOrientationType = 0x2C08; // ParticleOrientationChoiceList_t
            public const nint m_nOrientationControlPoint = 0x2C0C; // int32
            public const nint m_bUseYawWithNormalAligned = 0x2C10; // bool
            public const nint m_flMinSize = 0x2C18; // 
            public const nint m_flMaxSize = 0x2D78; // 
            public const nint m_flAlphaAdjustWithSizeAdjust = 0x2ED8; // 
            public const nint m_flStartFadeSize = 0x3038; // 
            public const nint m_flEndFadeSize = 0x3198; // 
            public const nint m_flStartFadeDot = 0x32F8; // float32
            public const nint m_flEndFadeDot = 0x32FC; // float32
            public const nint m_bDistanceAlpha = 0x3300; // bool
            public const nint m_bSoftEdges = 0x3301; // bool
            public const nint m_flEdgeSoftnessStart = 0x3304; // float32
            public const nint m_flEdgeSoftnessEnd = 0x3308; // float32
            public const nint m_bOutline = 0x330C; // bool
            public const nint m_OutlineColor = 0x330D; // Color
            public const nint m_nOutlineAlpha = 0x3314; // int32
            public const nint m_flOutlineStart0 = 0x3318; // float32
            public const nint m_flOutlineStart1 = 0x331C; // float32
            public const nint m_flOutlineEnd0 = 0x3320; // float32
            public const nint m_flOutlineEnd1 = 0x3324; // float32
            public const nint m_nLightingMode = 0x3328; // ParticleLightingQuality_t
            public const nint m_flLightingTessellation = 0x3330; // 
            public const nint m_flLightingDirectionality = 0x3490; // 
            public const nint m_bParticleShadows = 0x35F0; // bool
            public const nint m_flShadowDensity = 0x35F4; // float32
            public const nint m_replicationParameters = 0x35F8; // CReplicationParameters
        }
        // Parent: CParticleFunctionOperator
        // Field count: 12
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_PercentageBetweenTransformLerpCPs {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C4; // float32
            public const nint m_flInputMax = 0x1C8; // float32
            public const nint m_TransformStart = 0x1D0; // CParticleTransformInput
            public const nint m_TransformEnd = 0x238; // CParticleTransformInput
            public const nint m_nOutputStartCP = 0x2A0; // int32
            public const nint m_nOutputStartField = 0x2A4; // int32
            public const nint m_nOutputEndCP = 0x2A8; // int32
            public const nint m_nOutputEndField = 0x2AC; // int32
            public const nint m_nSetMethod = 0x2B0; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x2B4; // bool
            public const nint m_bRadialCheck = 0x2B5; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetPerChildControlPoint {
            public const nint m_nChildGroupID = 0x1C0; // int32
            public const nint m_nFirstControlPoint = 0x1C4; // int32
            public const nint m_nNumControlPoints = 0x1C8; // int32
            public const nint m_nParticleIncrement = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_nFirstSourcePoint = 0x330; // CParticleCollectionFloatInput
            public const nint m_bSetOrientation = 0x490; // bool
            public const nint m_nOrientationField = 0x494; // ParticleAttributeIndex_t
            public const nint m_bNumBasedOnParticleCount = 0x498; // bool
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderTreeShake {
            public const nint m_flPeakStrength = 0x210; // float32
            public const nint m_nPeakStrengthFieldOverride = 0x214; // ParticleAttributeIndex_t
            public const nint m_flRadius = 0x218; // float32
            public const nint m_nRadiusFieldOverride = 0x21C; // ParticleAttributeIndex_t
            public const nint m_flShakeDuration = 0x220; // float32
            public const nint m_flTransitionTime = 0x224; // float32
            public const nint m_flTwistAmount = 0x228; // float32
            public const nint m_flRadialAmount = 0x22C; // float32
            public const nint m_flControlPointOrientationAmount = 0x230; // float32
            public const nint m_nControlPointForLinearDirection = 0x234; // int32
        }
        // Parent: CParticleFunctionConstraint
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_WorldCollideConstraint {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_SetAttributeToScalarExpression {
            public const nint m_nExpression = 0x1C0; // ScalarExpressionType_t
            public const nint m_flInput1 = 0x1C8; // CPerParticleFloatInput
            public const nint m_flInput2 = 0x328; // CPerParticleFloatInput
            public const nint m_flOutputRemap = 0x488; // CParticleRemapFloatInput
            public const nint m_nOutputField = 0x5E8; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x5EC; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionOperator
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_CycleScalar {
            public const nint m_nDestField = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flStartValue = 0x1C4; // float32
            public const nint m_flEndValue = 0x1C8; // float32
            public const nint m_flCycleTime = 0x1CC; // float32
            public const nint m_bDoNotRepeatCycle = 0x1D0; // bool
            public const nint m_bSynchronizeParticles = 0x1D1; // bool
            public const nint m_nCPScale = 0x1D4; // int32
            public const nint m_nCPFieldMin = 0x1D8; // int32
            public const nint m_nCPFieldMax = 0x1DC; // int32
            public const nint m_nSetMethod = 0x1E0; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionRenderer
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RenderMaterialProxy {
            public const nint m_nMaterialControlPoint = 0x210; // int32
            public const nint m_nProxyType = 0x214; // 
            public const nint m_MaterialVars = 0x218; // CUtlVector<MaterialVariable_t>
            public const nint m_hOverrideMaterial = 0x230; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_flMaterialOverrideEnabled = 0x238; // CParticleCollectionFloatInput
            public const nint m_vecColorScale = 0x398; // CParticleCollectionVecInput
            public const nint m_flAlpha = 0xA10; // CPerParticleFloatInput
            public const nint m_nColorBlendType = 0xB70; // ParticleColorBlendType_t
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FloatInputMaterialVariable_t {
            public const nint m_strVariable = 0x0; // CUtlString
            public const nint m_flInput = 0x8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleCollectionVecInput
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyCustomEditor
        public static class CParticleCollectionRendererVecInput {
        }
        // Parent: CParticleFunctionOperator
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RampScalarLinear {
            public const nint m_RateMin = 0x1C0; // float32
            public const nint m_RateMax = 0x1C4; // float32
            public const nint m_flStartTime_min = 0x1C8; // float32
            public const nint m_flStartTime_max = 0x1CC; // float32
            public const nint m_flEndTime_min = 0x1D0; // float32
            public const nint m_flEndTime_max = 0x1D4; // float32
            public const nint m_nField = 0x200; // ParticleAttributeIndex_t
            public const nint m_bProportionalOp = 0x204; // bool
        }
        // Parent: CParticleFunctionOperator
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_RotateVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecRotAxisMin = 0x1C4; // Vector
            public const nint m_vecRotAxisMax = 0x1D0; // Vector
            public const nint m_flRotRateMin = 0x1DC; // float32
            public const nint m_flRotRateMax = 0x1E0; // float32
            public const nint m_bNormalize = 0x1E4; // bool
            public const nint m_flScale = 0x1E8; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_InitVecCollection {
            public const nint m_InputValue = 0x1C8; // CParticleCollectionVecInput
            public const nint m_nOutputField = 0x840; // ParticleAttributeIndex_t
        }
        // Parent: C_INIT_RemapParticleCountToNamedModelElementScalar
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_RemapParticleCountToNamedModelMeshGroupScalar {
        }
        // Parent: CParticleFunctionInitializer
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_INIT_SequenceFromCP {
            public const nint m_bKillUnused = 0x1C8; // bool
            public const nint m_bRadiusScale = 0x1C9; // bool
            public const nint m_nCP = 0x1CC; // int32
            public const nint m_vecOffset = 0x1D0; // Vector
        }
        // Parent: CParticleFunctionOperator
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_CPOffsetToPercentageBetweenCPs {
            public const nint m_flInputMin = 0x1C0; // float32
            public const nint m_flInputMax = 0x1C4; // float32
            public const nint m_flInputBias = 0x1C8; // float32
            public const nint m_nStartCP = 0x1CC; // int32
            public const nint m_nEndCP = 0x1D0; // int32
            public const nint m_nOffsetCP = 0x1D4; // int32
            public const nint m_nOuputCP = 0x1D8; // int32
            public const nint m_nInputCP = 0x1DC; // int32
            public const nint m_bRadialCheck = 0x1E0; // bool
            public const nint m_bScaleOffset = 0x1E1; // bool
            public const nint m_vecOffset = 0x1E4; // Vector
        }
        // Parent: CParticleFunctionOperator
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class C_OP_LerpEndCapScalar {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flOutput = 0x1C4; // float32
            public const nint m_flLerpTime = 0x1C8; // float32
        }
        // Parent: None
        // Field count: 0
        public static class CParticleProperty {
        }
    }
}




// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: pulse_system.dll
    // Class count: 112
    // Enum count: 9
    public static class PulseSystemDll {
        // Alignment: 4
        // Member count: 6
        public enum EPulseGraphExecutionHistoryFlag : uint {
            NO_FLAGS = 0x0,
            CURSOR_ADD_TAG = 0x1,
            CURSOR_REMOVE_TAG = 0x2,
            CURSOR_RETIRED = 0x4,
            REQUIREMENT_PASS = 0x8,
            REQUIREMENT_FAIL = 0x10
        }
        // Alignment: 4
        // Member count: 3
        public enum PulseTestEnumShape_t : uint {
            CIRCLE = 0x64,
            SQUARE = 0xC8,
            TRIANGLE = 0x12C
        }
        // Alignment: 4
        // Member count: 2
        public enum PulseMethodCallMode_t : uint {
            SYNC_WAIT_FOR_COMPLETION = 0x0,
            ASYNC_FIRE_AND_FORGET = 0x1
        }
        // Alignment: 4
        // Member count: 4
        public enum PulseCursorExecResult_t : uint {
            Succeeded = 0x0,
            Canceled = 0x1,
            Failed = 0x2,
            OngoingNotify = 0x3
        }
        // Alignment: 4
        // Member count: 21
        public enum PulseValueType_t : uint {
            PVAL_INVALID = unchecked((uint)-1),
            PVAL_BOOL = 0x0,
            PVAL_INT = 0x1,
            PVAL_FLOAT = 0x2,
            PVAL_STRING = 0x3,
            PVAL_VEC3 = 0x4,
            PVAL_TRANSFORM = 0x5,
            PVAL_COLOR_RGB = 0x6,
            PVAL_EHANDLE = 0x7,
            PVAL_RESOURCE = 0x8,
            PVAL_SNDEVT_GUID = 0x9,
            PVAL_SNDEVT_NAME = 0xA,
            PVAL_ENTITY_NAME = 0xB,
            PVAL_OPAQUE_HANDLE = 0xC,
            PVAL_TYPESAFE_INT = 0xD,
            PVAL_CURSOR_FLOW = 0xE,
            PVAL_ANY = 0xF,
            PVAL_SCHEMA_ENUM = 0x10,
            PVAL_PANORAMA_PANEL_HANDLE = 0x11,
            PVAL_TEST_HANDLE = 0x12,
            PVAL_COUNT = 0x13
        }
        // Alignment: 2
        // Member count: 75
        public enum PulseInstructionCode_t : ushort {
            INVALID = 0x0,
            IMMEDIATE_HALT = 0x1,
            RETURN_VOID = 0x2,
            RETURN_VALUE = 0x3,
            NOP = 0x4,
            JUMP = 0x5,
            JUMP_COND = 0x6,
            CHUNK_LEAP = 0x7,
            CHUNK_LEAP_COND = 0x8,
            PULSE_CALL_SYNC = 0x9,
            PULSE_CALL_ASYNC_FIRE = 0xA,
            CELL_INVOKE = 0xB,
            LIBRARY_INVOKE = 0xC,
            SET_VAR = 0xD,
            GET_VAR = 0xE,
            GET_CONST = 0xF,
            GET_DOMAIN_VALUE = 0x10,
            COPY = 0x11,
            NOT = 0x12,
            NEGATE = 0x13,
            ADD = 0x14,
            SUB = 0x15,
            MUL = 0x16,
            DIV = 0x17,
            MOD = 0x18,
            LT = 0x19,
            LTE = 0x1A,
            EQ = 0x1B,
            NE = 0x1C,
            AND = 0x1D,
            OR = 0x1E,
            CONVERT_VALUE = 0x1F,
            REINTERPRET_INSTANCE = 0x20,
            GET_BLACKBOARD_REFERENCE = 0x21,
            SET_BLACKBOARD_REFERENCE = 0x22,
            REQUIREMENT_RESULT = 0x23,
            LAST_SERIALIZED_CODE = 0x24,
            NEGATE_INT = 0x25,
            NEGATE_FLOAT = 0x26,
            ADD_INT = 0x27,
            ADD_FLOAT = 0x28,
            ADD_STRING = 0x29,
            SUB_INT = 0x2A,
            SUB_FLOAT = 0x2B,
            MUL_INT = 0x2C,
            MUL_FLOAT = 0x2D,
            DIV_INT = 0x2E,
            DIV_FLOAT = 0x2F,
            MOD_INT = 0x30,
            MOD_FLOAT = 0x31,
            LT_INT = 0x32,
            LT_FLOAT = 0x33,
            LTE_INT = 0x34,
            LTE_FLOAT = 0x35,
            EQ_BOOL = 0x36,
            EQ_INT = 0x37,
            EQ_FLOAT = 0x38,
            EQ_STRING = 0x39,
            EQ_ENTITY_NAME = 0x3A,
            EQ_SCHEMA_ENUM = 0x3B,
            EQ_EHANDLE = 0x3C,
            EQ_PANEL_HANDLE = 0x3D,
            EQ_OPAQUE_HANDLE = 0x3E,
            EQ_TEST_HANDLE = 0x3F,
            NE_BOOL = 0x40,
            NE_INT = 0x41,
            NE_FLOAT = 0x42,
            NE_STRING = 0x43,
            NE_ENTITY_NAME = 0x44,
            NE_SCHEMA_ENUM = 0x45,
            NE_EHANDLE = 0x46,
            NE_PANEL_HANDLE = 0x47,
            NE_OPAQUE_HANDLE = 0x48,
            NE_TEST_HANDLE = 0x49,
            GET_CONST_INLINE_STORAGE = 0x4A
        }
        // Alignment: 4
        // Member count: 5
        public enum PulseTestEnumColor_t : uint {
            BLACK = 0x0,
            WHITE = 0x1,
            RED = 0x2,
            GREEN = 0x3,
            BLUE = 0x4
        }
        // Alignment: 4
        // Member count: 4
        public enum PulseCursorCancelPriority_t : uint {
            None = 0x0,
            CancelOnSucceeded = 0x1,
            SoftCancel = 0x2,
            HardCancel = 0x3
        }
        // Alignment: 4
        // Member count: 4
        public enum PulseDomainValueType_t : uint {
            INVALID = unchecked((uint)-1),
            ENTITY_NAME = 0x0,
            PANEL_ID = 0x1,
            COUNT = 0x2
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Step_PublicOutput {
            public const nint m_OutputIndex = 0x48; // PulseRuntimeOutputIndex_t
        }
        // Parent: CPulseCell_BaseValue
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        public static class CPulseCell_Val_TestDomainFindEntityByName {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseLibraryBindings
        // MPropertyDescription
        public static class CPulseTestFuncs_LibraryA {
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        public static class CPulseCell_Step_TestDomainDestroyFakeEntity {
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Test_MultiOutflow_WithParams {
            public const nint m_Out1 = 0x48; // SignatureOutflow_Continue
            public const nint m_Out2 = 0x78; // SignatureOutflow_Continue
        }
        // Parent: None
        // Field count: 1
        public static class PulseRuntimeVarIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Field count: 1
        public static class PulseRuntimeEntrypointIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Field count: 1
        public static class PulseRuntimeDomainValueIndex_t {
            public const nint m_Value = 0x0; // int16
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulse_Chunk {
            public const nint m_Instructions = 0x0; // CUtlLeanVector<PGDInstruction_t>
            public const nint m_Registers = 0x10; // CUtlLeanVector<CPulse_RegisterInfo>
            public const nint m_InstructionEditorIDs = 0x20; // CUtlLeanVector<PulseDocNodeID_t>
        }
        // Parent: None
        // Field count: 1
        public static class PulseRuntimeInvokeIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_Outflow_CycleOrdered__InstanceState_t {
            public const nint m_nNextIndex = 0x0; // int32
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_WaitForCursorsWithTagBase {
            public const nint m_nCursorsAllowedToWait = 0x48; // int32
            public const nint m_WaitComplete = 0x50; // CPulse_ResumePoint
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseLibraryBindings
        // MPropertyDescription
        public static class CPulseTestScriptLib {
        }
        // Parent: None
        // Field count: 1
        public static class PulseRuntimeRegisterIndex_t {
            public const nint m_Value = 0x0; // int16
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_Timeline__TimelineEvent_t {
            public const nint m_flTimeFromPrevious = 0x0; // float32
            public const nint m_bPauseForPreviousEvents = 0x4; // bool
            public const nint m_bCallModeSync = 0x5; // bool
            public const nint m_EventOutflow = 0x8; // CPulse_OutflowConnection
        }
        // Parent: None
        // Field count: 4
        public static class CPulse_OutflowConnection {
            public const nint m_SourceOutflowName = 0x0; // CUtlSymbolLarge
            public const nint m_nDestChunk = 0x8; // PulseRuntimeChunkIndex_t
            public const nint m_nInstruction = 0xC; // int32
            public const nint m_OutflowRegisterMap = 0x10; // PulseRegisterMap_t
        }
        // Parent: None
        // Field count: 1
        public static class PulseCursorID_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseInstanceDomainInfo
        public static class CBasePulseGraphInstance {
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_Base {
            public const nint m_nEditorNodeID = 0x8; // PulseDocNodeID_t
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_Test_MultiOutflow_WithParams_Yielding__CursorState_t {
            public const nint nTestStep = 0x0; // int32
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PulseGraphExecutionHistoryCursorDesc_t {
            public const nint vecAncestorCursorIDs = 0x0; // CUtlVector<PulseCursorID_t>
            public const nint nSpawnNodeID = 0x18; // PulseDocNodeID_t
            public const nint nRetiredAtNodeID = 0x1C; // PulseDocNodeID_t
            public const nint flLastReferenced = 0x20; // float32
            public const nint nLastValidEntryIdx = 0x24; // int32
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Inflow_Yield {
            public const nint m_UnyieldResume = 0x48; // CPulse_ResumePoint
        }
        // Parent: CPulseCell_Inflow_BaseEntrypoint
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Inflow_GraphHook {
            public const nint m_HookName = 0x70; // CUtlSymbolLarge
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        // MPropertyDescription
        // MPulseEditorHeaderIcon
        public static class CPulseCell_Inflow_Wait {
            public const nint m_WakeResume = 0x48; // CPulse_ResumePoint
        }
        // Parent: CPulseExecCursor
        // Field count: 2
        //
        // Metadata:
        // MPulseLibraryBindings
        public static class CTestDomainDerived_Cursor {
            public const nint m_nCursorValueA = 0xA8; // int32
            public const nint m_nCursorValueB = 0xAC; // int32
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PulseRegisterMap_t {
            public const nint m_Inparams = 0x0; // KeyValues3
            public const nint m_Outparams = 0x10; // KeyValues3
        }
        // Parent: CPulseCell_WaitForCursorsWithTagBase
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        // MPropertyDescription
        // MPulseEditorHeaderIcon
        public static class CPulseCell_CursorQueue {
            public const nint m_nCursorsAllowedToRunParallel = 0x80; // int32
        }
        // Parent: CPulseCell_Base
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_BaseRequirement {
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PulseNodeDynamicOutflows_t {
            public const nint m_Outflows = 0x0; // CUtlVector<PulseNodeDynamicOutflows_t::DynamicOutflow_t>
        }
        // Parent: CPulseCell_BaseValue
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CPulseCell_Value_TestValue50 {
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Test_MultiInflow_WithDefault {
        }
        // Parent: None
        // Field count: 0
        public static class IGapHost_ExecLog {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MGapTypeQueriesForScopeSingleton
        public static class CPulseTestGapTypeQueryRegistration {
        }
        // Parent: CPulseCell_Base
        // Field count: 1
        public static class CPulseCell_Unknown {
            public const nint m_UnknownKeys = 0x48; // KeyValues3
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Outflow_StringSwitch {
            public const nint m_DefaultCaseOutflow = 0x48; // CPulse_OutflowConnection
            public const nint m_CaseOutflows = 0x78; // CUtlVector<CPulse_OutflowConnection>
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Test_NoInflow {
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_FireCursors {
            public const nint m_Outflows = 0x48; // CUtlVector<CPulse_OutflowConnection>
            public const nint m_bWaitForChildOutflows = 0x60; // bool
            public const nint m_OnFinished = 0x68; // CPulse_ResumePoint
            public const nint m_OnCanceled = 0x98; // CPulse_ResumePoint
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_Outflow_CycleShuffled__InstanceState_t {
            public const nint m_Shuffle = 0x0; // CUtlVectorFixedGrowable<uint8,8>
            public const nint m_nNextShuffle = 0x20; // int32
        }
        // Parent: CPulseCell_Base
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_BaseValue {
        }
        // Parent: CPulse_OutflowConnection
        // Field count: 0
        public static class CPulse_ResumePoint {
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Outflow_CycleRandom {
            public const nint m_Outputs = 0x48; // CUtlVector<CPulse_OutflowConnection>
        }
        // Parent: CPulseCell_Inflow_BaseEntrypoint
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Inflow_EventHandler {
            public const nint m_EventName = 0x70; // CUtlSymbolLarge
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_BaseLerp__CursorState_t {
            public const nint m_StartTime = 0x0; // GameTime_t
            public const nint m_EndTime = 0x4; // GameTime_t
        }
        // Parent: IGapHost_ExecLog
        // Field count: 0
        public static class IGapHost_Cursor {
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulse_PublicOutput {
            public const nint m_Name = 0x0; // CUtlSymbolLarge
            public const nint m_Description = 0x8; // CUtlString
            public const nint m_ParamType = 0x10; // CPulseValueFullType
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseLibraryBindings
        // MPropertyDescription
        public static class CPulseCursorFuncs {
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Timeline {
            public const nint m_TimelineEvents = 0x48; // CUtlVector<CPulseCell_Timeline::TimelineEvent_t>
            public const nint m_bWaitForChildOutflows = 0x60; // bool
            public const nint m_OnFinished = 0x68; // CPulse_ResumePoint
            public const nint m_OnCanceled = 0x98; // CPulse_ResumePoint
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulse_OutputConnection {
            public const nint m_SourceOutput = 0x0; // CUtlSymbolLarge
            public const nint m_TargetEntity = 0x8; // CUtlSymbolLarge
            public const nint m_TargetInput = 0x10; // CUtlSymbolLarge
            public const nint m_Param = 0x18; // CUtlSymbolLarge
        }
        // Parent: CPulseCell_BaseRequirement
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        // MPropertyDescription
        // MPulseRequirementPass
        // MPulseRequirementSummaryExpr
        public static class CPulseCell_LimitCount {
            public const nint m_nLimitCount = 0x48; // int32
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PulseGraphExecutionHistoryNodeDesc_t {
            public const nint strCellDesc = 0x0; // CBufferString
            public const nint strBindingName = 0x10; // CUtlSymbolLarge
        }
        // Parent: CPulse_ResumePoint
        // Field count: 0
        public static class SignatureOutflow_Resume {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class FakeEntity_tAPI {
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Step_CallExternalMethod {
            public const nint m_MethodName = 0x48; // CUtlSymbolLarge
            public const nint m_GameBlackboard = 0x50; // CUtlSymbolLarge
            public const nint m_ExpectedArgs = 0x58; // CUtlLeanVector<CPulseRuntimeMethodArg>
            public const nint m_nAsyncCallMode = 0x68; // 
            public const nint m_OnFinished = 0x70; // CPulse_ResumePoint
        }
        // Parent: CBasePulseGraphInstance
        // Field count: 0
        //
        // Metadata:
        // MPulseInstanceDomainInfo
        // MPulseDomainHookInfo
        // MPulseLibraryBindings
        public static class CPulseGraphInstance_TurtleGraphics {
        }
        // Parent: CPulseCell_Base
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_BaseFlow {
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PulseGraphExecutionHistoryEntry_t {
            public const nint nCursorID = 0x0; // PulseCursorID_t
            public const nint nEditorID = 0x4; // PulseDocNodeID_t
            public const nint flExecTime = 0x8; // float32
            public const nint unFlags = 0xC; // uint32
            public const nint tagName = 0x10; // CUtlSymbolLarge
        }
        // Parent: None
        // Field count: 1
        public static class PulseCursorYieldToken_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseGraphExecutionHistory {
            public const nint m_nInstanceID = 0x0; // PulseGraphInstanceID_t
            public const nint m_strFileName = 0x8; // CUtlString
            public const nint m_vecHistory = 0x10; // CUtlVector<PulseGraphExecutionHistoryEntry_t*>
            public const nint m_mapCellDesc = 0x28; // CUtlOrderedMap<PulseDocNodeID_t,PulseGraphExecutionHistoryNodeDesc_t*>
            public const nint m_mapCursorDesc = 0x50; // CUtlOrderedMap<PulseCursorID_t,PulseGraphExecutionHistoryCursorDesc_t*>
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_TestWaitWithCursorState {
            public const nint m_WakeResume = 0x48; // CPulse_ResumePoint
            public const nint m_WakeCancel = 0x78; // CPulse_ResumePoint
            public const nint m_WakeFail = 0xA8; // CPulse_ResumePoint
        }
        // Parent: CPulseCell_Inflow_BaseEntrypoint
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Inflow_ObservableVariableListener {
            public const nint m_BlackboardReference = 0x70; // CPulse_BlackboardReference
            public const nint m_bSelfReference = 0x168; // bool
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_BaseYieldingInflow {
        }
        // Parent: None
        // Field count: 12
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PGDInstruction_t {
            public const nint m_nCode = 0x0; // 
            public const nint m_nVar = 0x4; // PulseRuntimeVarIndex_t
            public const nint m_nReg0 = 0x8; // PulseRuntimeRegisterIndex_t
            public const nint m_nReg1 = 0xA; // PulseRuntimeRegisterIndex_t
            public const nint m_nReg2 = 0xC; // PulseRuntimeRegisterIndex_t
            public const nint m_nInvokeBindingIndex = 0x10; // PulseRuntimeInvokeIndex_t
            public const nint m_nChunk = 0x14; // PulseRuntimeChunkIndex_t
            public const nint m_nDestInstruction = 0x18; // int32
            public const nint m_nCallInfoIndex = 0x1C; // PulseRuntimeCallInfoIndex_t
            public const nint m_nConstIdx = 0x20; // PulseRuntimeConstantIndex_t
            public const nint m_nDomainValueIdx = 0x22; // PulseRuntimeDomainValueIndex_t
            public const nint m_nBlackboardReferenceIdx = 0x24; // PulseRuntimeBlackboardReferenceIndex_t
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulse_InvokeBinding {
            public const nint m_RegisterMap = 0x0; // PulseRegisterMap_t
            public const nint m_FuncName = 0x20; // CUtlSymbolLarge
            public const nint m_nCellIndex = 0x28; // PulseRuntimeCellIndex_t
            public const nint m_nSrcChunk = 0x2C; // PulseRuntimeChunkIndex_t
            public const nint m_nSrcInstruction = 0x30; // int32
        }
        // Parent: None
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulse_Variable {
            public const nint m_Name = 0x0; // CUtlSymbolLarge
            public const nint m_Description = 0x8; // CUtlString
            public const nint m_Type = 0x10; // CPulseValueFullType
            public const nint m_DefaultValue = 0x20; // KeyValues3
            public const nint m_bIsPublic = 0x32; // bool
            public const nint m_bIsObservable = 0x33; // bool
            public const nint m_nEditorNodeID = 0x34; // PulseDocNodeID_t
        }
        // Parent: CPulseCell_Inflow_BaseEntrypoint
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Inflow_Method {
            public const nint m_MethodName = 0x70; // CUtlSymbolLarge
            public const nint m_Description = 0x78; // CUtlString
            public const nint m_bIsPublic = 0x80; // bool
            public const nint m_ReturnType = 0x88; // CPulseValueFullType
            public const nint m_Args = 0x98; // CUtlLeanVector<CPulseRuntimeMethodArg>
        }
        // Parent: CBasePulseGraphInstance
        // Field count: 6
        //
        // Metadata:
        // MPulseInstanceDomainInfo
        // MPulseDomainHookInfo
        // MPulseLibraryBindings
        // MPulseDomainOptInFeatureTag
        public static class CPulseGraphInstance_TestDomain {
            public const nint m_bIsRunningUnitTests = 0xF8; // bool
            public const nint m_bExplicitTimeStepping = 0xF9; // bool
            public const nint m_bExpectingToDestroyWithYieldedCursors = 0xFA; // bool
            public const nint m_nNextValidateIndex = 0xFC; // int32
            public const nint m_Tracepoints = 0x100; // CUtlVector<CUtlString>
            public const nint m_bTestYesOrNoPath = 0x118; // bool
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class FakeEntityDerivedB_tAPI {
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PulseNodeDynamicOutflows_t__DynamicOutflow_t {
            public const nint m_OutflowID = 0x0; // CGlobalSymbol
            public const nint m_Connection = 0x8; // CPulse_OutflowConnection
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Outflow_CycleShuffled {
            public const nint m_Outputs = 0x48; // CUtlVector<CPulse_OutflowConnection>
        }
        // Parent: None
        // Field count: 1
        public static class PulseRuntimeOutputIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Field count: 1
        public static class CPulseCell_WaitForCursorsWithTagBase__CursorState_t {
            public const nint m_TagName = 0x0; // CUtlSymbolLarge
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_TestWaitWithCursorState__CursorState_t {
            public const nint flWaitValue = 0x0; // float32
            public const nint bFailOnCancel = 0x4; // bool
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulse_DomainValue {
            public const nint m_nType = 0x0; // PulseDomainValueType_t
            public const nint m_Value = 0x8; // CGlobalSymbol
            public const nint m_ExpectedRuntimeType = 0x10; // CGlobalSymbol
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        public static class CPulseCell_Step_TestDomainCreateFakeEntity {
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        // MPulseEditorHeaderText
        public static class CPulseCell_Step_TestDomainEntFire {
            public const nint m_Input = 0x48; // CUtlString
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseLibraryBindings
        // MPropertyDescription
        public static class CPulseMathlib {
        }
        // Parent: None
        // Field count: 1
        public static class PulseRuntimeBlackboardReferenceIndex_t {
            public const nint m_Value = 0x0; // int16
        }
        // Parent: IGapHost_Cursor
        // Field count: 0
        public static class IGapHost_YieldingCursor {
        }
        // Parent: CPulse_OutflowConnection
        // Field count: 0
        public static class SignatureOutflow_Continue {
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Test_MultiOutflow_WithParams_Yielding {
            public const nint m_Out1 = 0x48; // SignatureOutflow_Continue
            public const nint m_AsyncChild1 = 0x78; // SignatureOutflow_Continue
            public const nint m_AsyncChild2 = 0xA8; // SignatureOutflow_Continue
            public const nint m_YieldResume1 = 0xD8; // SignatureOutflow_Resume
            public const nint m_YieldResume2 = 0x108; // SignatureOutflow_Resume
        }
        // Parent: CPulseGraphInstance_TestDomain
        // Field count: 1
        //
        // Metadata:
        // MPulseInstanceDomainInfo
        // MPulseDomainHookInfo
        // MPulseLibraryBindings
        public static class CPulseGraphInstance_TestDomain_Derived {
            public const nint m_nInstanceValueX = 0x120; // int32
        }
        // Parent: CPulseCell_Inflow_BaseEntrypoint
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Inflow_EntOutputHandler {
            public const nint m_SourceEntity = 0x70; // CUtlSymbolLarge
            public const nint m_SourceOutput = 0x78; // CUtlSymbolLarge
            public const nint m_TargetInput = 0x80; // CUtlSymbolLarge
            public const nint m_ExpectedParamType = 0x88; // CPulseValueFullType
        }
        // Parent: None
        // Field count: 1
        public static class PulseRuntimeConstantIndex_t {
            public const nint m_Value = 0x0; // int16
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MPulseProvideFeatureTag
        // MPulseLibraryBindings
        public static class FakeEntityDerivedA_tAPI {
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        public static class CPulseCell_Step_TestDomainTracepoint {
        }
        // Parent: None
        // Field count: 1
        public static class PulseDocNodeID_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulse_BlackboardReference {
            public const nint m_hBlackboardResource = 0x0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIPulseGraphDef>>
            public const nint m_BlackboardResource = 0xE0; // CUtlSymbolLarge
            public const nint m_nNodeID = 0xE8; // PulseDocNodeID_t
            public const nint m_NodeName = 0xF0; // CGlobalSymbol
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_LimitCount__InstanceState_t {
            public const nint m_nCurrentCount = 0x0; // int32
        }
        // Parent: CPulseCell_BaseValue
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        public static class CPulseCell_Val_TestDomainGetEntityName {
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulse_CallInfo {
            public const nint m_PortName = 0x0; // CUtlSymbolLarge
            public const nint m_nEditorNodeID = 0x8; // PulseDocNodeID_t
            public const nint m_RegisterMap = 0x10; // PulseRegisterMap_t
            public const nint m_CallMethodID = 0x30; // PulseDocNodeID_t
            public const nint m_nSrcChunk = 0x34; // PulseRuntimeChunkIndex_t
            public const nint m_nSrcInstruction = 0x38; // int32
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulse_RegisterInfo {
            public const nint m_nReg = 0x0; // PulseRuntimeRegisterIndex_t
            public const nint m_Type = 0x8; // CPulseValueFullType
            public const nint m_OriginName = 0x18; // CKV3MemberNameWithStorage
            public const nint m_nWrittenByInstruction = 0x50; // int32
            public const nint m_nLastReadByInstruction = 0x54; // int32
        }
        // Parent: CPulseCell_BaseValue
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        // MPropertyDescription
        // MPulseEditorHeaderIcon
        public static class CPulseCell_Value_RandomFloat {
        }
        // Parent: None
        // Field count: 1
        public static class PulseRuntimeCellIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: IGapHost_YieldingCursor
        // Field count: 0
        public static class CPulseExecCursor {
        }
        // Parent: None
        // Field count: 1
        public static class PulseGraphInstanceID_t {
            public const nint m_Value = 0x0; // uint32
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Outflow_IntSwitch {
            public const nint m_DefaultCaseOutflow = 0x48; // CPulse_OutflowConnection
            public const nint m_CaseOutflows = 0x78; // CUtlVector<CPulse_OutflowConnection>
        }
        // Parent: None
        // Field count: 14
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseGraphDef {
            public const nint m_DomainIdentifier = 0x8; // CUtlSymbolLarge
            public const nint m_ParentMapName = 0x10; // CUtlSymbolLarge
            public const nint m_ParentXmlName = 0x18; // CUtlSymbolLarge
            public const nint m_vecGameBlackboards = 0x20; // CUtlVector<CUtlSymbolLarge>
            public const nint m_Chunks = 0x38; // CUtlVector<CPulse_Chunk*>
            public const nint m_Cells = 0x50; // CUtlVector<CPulseCell_Base*>
            public const nint m_Vars = 0x68; // CUtlVector<CPulse_Variable>
            public const nint m_PublicOutputs = 0x80; // CUtlVector<CPulse_PublicOutput>
            public const nint m_InvokeBindings = 0x98; // CUtlVector<CPulse_InvokeBinding*>
            public const nint m_CallInfos = 0xB0; // CUtlVector<CPulse_CallInfo*>
            public const nint m_Constants = 0xC8; // CUtlVector<CPulse_Constant>
            public const nint m_DomainValues = 0xE0; // CUtlVector<CPulse_DomainValue>
            public const nint m_BlackboardReferences = 0xF8; // CUtlVector<CPulse_BlackboardReference>
            public const nint m_OutputConnections = 0x110; // CUtlVector<CPulse_OutputConnection*>
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Test_MultiInflow_NoDefault {
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulse_Constant {
            public const nint m_Type = 0x0; // CPulseValueFullType
            public const nint m_Value = 0x10; // KeyValues3
        }
        // Parent: CPulseCell_WaitForCursorsWithTagBase
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        // MPropertyDescription
        // MPulseEditorHeaderIcon
        public static class CPulseCell_WaitForCursorsWithTag {
            public const nint m_bTagSelfWhenComplete = 0x80; // bool
            public const nint m_nDesiredKillPriority = 0x84; // PulseCursorCancelPriority_t
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_Inflow_BaseEntrypoint {
            public const nint m_EntryChunk = 0x48; // PulseRuntimeChunkIndex_t
            public const nint m_RegisterMap = 0x50; // PulseRegisterMap_t
        }
        // Parent: None
        // Field count: 1
        public static class PulseRuntimeCallInfoIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseCell_BaseLerp {
            public const nint m_WakeResume = 0x48; // CPulse_ResumePoint
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CPulseCell_Outflow_TestExplicitYesNo {
            public const nint m_Yes = 0x48; // CPulse_OutflowConnection
            public const nint m_No = 0x78; // CPulse_OutflowConnection
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CPulseCell_Outflow_TestRandomYesNo {
            public const nint m_Yes = 0x48; // CPulse_OutflowConnection
            public const nint m_No = 0x78; // CPulse_OutflowConnection
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Step_DebugLog {
        }
        // Parent: None
        // Field count: 1
        public static class PulseRuntimeChunkIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: CPulseCell_BaseFlow
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        public static class CPulseCell_Outflow_CycleOrdered {
            public const nint m_Outputs = 0x48; // CUtlVector<CPulse_OutflowConnection>
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CPulseRuntimeMethodArg {
            public const nint m_Name = 0x0; // CKV3MemberNameWithStorage
            public const nint m_Description = 0x38; // CUtlString
            public const nint m_Type = 0x40; // CPulseValueFullType
        }
        // Parent: None
        // Field count: 1
        public static class PulseRuntimeStateOffset_t {
            public const nint m_Value = 0x0; // uint16
        }
        // Parent: CPulseCell_BaseValue
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MCellForDomain
        // MPulseCellMethodBindings
        // MPulseCellOutflowHookInfo
        // MPropertyFriendlyName
        // MPropertyDescription
        // MPulseEditorHeaderIcon
        public static class CPulseCell_Value_RandomInt {
        }
        // Parent: CPulseExecCursor
        // Field count: 4
        //
        // Metadata:
        // MPulseLibraryBindings
        public static class CPulseTurtleGraphicsCursor {
            public const nint m_Color = 0xA8; // Color
            public const nint m_vPos = 0xAC; // Vector2D
            public const nint m_flHeadingDeg = 0xB4; // float32
            public const nint m_bPenUp = 0xB8; // bool
        }
    }
}





// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: rendersystemdx11.dll
    // Class count: 3
    // Enum count: 5
    public static class Rendersystemdx11Dll {
        // Alignment: 4
        // Member count: 13
        public enum RenderPrimitiveType_t : uint {
            RENDER_PRIM_POINTS = 0x0,
            RENDER_PRIM_LINES = 0x1,
            RENDER_PRIM_LINES_WITH_ADJACENCY = 0x2,
            RENDER_PRIM_LINE_STRIP = 0x3,
            RENDER_PRIM_LINE_STRIP_WITH_ADJACENCY = 0x4,
            RENDER_PRIM_TRIANGLES = 0x5,
            RENDER_PRIM_TRIANGLES_WITH_ADJACENCY = 0x6,
            RENDER_PRIM_TRIANGLE_STRIP = 0x7,
            RENDER_PRIM_TRIANGLE_STRIP_WITH_ADJACENCY = 0x8,
            RENDER_PRIM_INSTANCED_QUADS = 0x9,
            RENDER_PRIM_HETEROGENOUS = 0xA,
            RENDER_PRIM_COMPUTE_SHADER = 0xB,
            RENDER_PRIM_TYPE_COUNT = 0xC
        }
        // Alignment: 4
        // Member count: 13
        public enum RenderBufferFlags_t : uint {
            RENDER_BUFFER_USAGE_VERTEX_BUFFER = 0x1,
            RENDER_BUFFER_USAGE_INDEX_BUFFER = 0x2,
            RENDER_BUFFER_USAGE_SHADER_RESOURCE = 0x4,
            RENDER_BUFFER_USAGE_UNORDERED_ACCESS = 0x8,
            RENDER_BUFFER_BYTEADDRESS_BUFFER = 0x10,
            RENDER_BUFFER_STRUCTURED_BUFFER = 0x20,
            RENDER_BUFFER_APPEND_CONSUME_BUFFER = 0x40,
            RENDER_BUFFER_UAV_COUNTER = 0x80,
            RENDER_BUFFER_UAV_DRAW_INDIRECT_ARGS = 0x100,
            RENDER_BUFFER_ACCELERATION_STRUCTURE = 0x200,
            RENDER_BUFFER_SHADER_BINDING_TABLE = 0x400,
            RENDER_BUFFER_PER_FRAME_WRITE_ONCE = 0x800,
            RENDER_BUFFER_POOL_ALLOCATED = 0x1000
        }
        // Alignment: 1
        // Member count: 8
        public enum RenderMultisampleType_t : byte {
            RENDER_MULTISAMPLE_INVALID = unchecked((byte)-1),
            RENDER_MULTISAMPLE_NONE = 0x0,
            RENDER_MULTISAMPLE_2X = 0x1,
            RENDER_MULTISAMPLE_4X = 0x2,
            RENDER_MULTISAMPLE_6X = 0x3,
            RENDER_MULTISAMPLE_8X = 0x4,
            RENDER_MULTISAMPLE_16X = 0x5,
            RENDER_MULTISAMPLE_TYPE_COUNT = 0x6
        }
        // Alignment: 4
        // Member count: 4
        public enum InputLayoutVariation_t : uint {
            INPUT_LAYOUT_VARIATION_DEFAULT = 0x0,
            INPUT_LAYOUT_VARIATION_STREAM1_INSTANCEID = 0x1,
            INPUT_LAYOUT_VARIATION_STREAM1_INSTANCEID_MORPH_VERT_ID = 0x2,
            INPUT_LAYOUT_VARIATION_MAX = 0x3
        }
        // Alignment: 4
        // Member count: 3
        public enum RenderSlotType_t : uint {
            RENDER_SLOT_INVALID = unchecked((uint)-1),
            RENDER_SLOT_PER_VERTEX = 0x0,
            RENDER_SLOT_PER_INSTANCE = 0x1
        }
        // Parent: None
        // Field count: 4
        public static class VsInputSignatureElement_t {
            public const nint m_pName = 0x0; // char[64]
            public const nint m_pSemantic = 0x40; // char[64]
            public const nint m_pD3DSemanticName = 0x80; // char[64]
            public const nint m_nD3DSemanticIndex = 0xC0; // int32
        }
        // Parent: None
        // Field count: 1
        public static class VsInputSignature_t {
            public const nint m_elems = 0x0; // CUtlVector<VsInputSignatureElement_t>
        }
        // Parent: None
        // Field count: 7
        public static class RenderInputLayoutField_t {
            public const nint m_pSemanticName = 0x0; // uint8[32]
            public const nint m_nSemanticIndex = 0x20; // int32
            public const nint m_Format = 0x24; // uint32
            public const nint m_nOffset = 0x28; // int32
            public const nint m_nSlot = 0x2C; // int32
            public const nint m_nSlotType = 0x30; // RenderSlotType_t
            public const nint m_nInstanceStepRate = 0x34; // int32
        }
    }
}



// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: resourcesystem.dll
    // Class count: 59
    // Enum count: 2
    public static class ResourcesystemDll {
        // Alignment: 1
        // Member count: 9
        public enum FuseVariableType_t : byte {
            INVALID = 0x0,
            BOOL = 0x1,
            INT8 = 0x2,
            INT16 = 0x3,
            INT32 = 0x4,
            UINT8 = 0x5,
            UINT16 = 0x6,
            UINT32 = 0x7,
            FLOAT32 = 0x8
        }
        // Alignment: 1
        // Member count: 2
        public enum FuseVariableAccess_t : byte {
            WRITABLE = 0x0,
            READ_ONLY = 0x1
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCNmIKRig {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCResponseRulesList {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCDotaItemDefinitionResource {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCMorphSetData {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCChoreoSceneFileData {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCVSoundStackScriptList {
        }
        // Parent: None
        // Field count: 2
        public static class PackedAABB_t {
            public const nint m_nPackedMin = 0x0; // uint32
            public const nint m_nPackedMax = 0x4; // uint32
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCVPhysXSurfacePropertiesList {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeManifestTestResource_t {
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ConstantInfo_t {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_nameToken = 0x8; // CUtlStringToken
            public const nint m_flValue = 0xC; // float32
        }
        // Parent: None
        // Field count: 1
        public static class FuseFunctionIndex_t {
            public const nint m_Value = 0x0; // uint16
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCGcExportableExternalData {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeIAnimGraphModelBinding {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCJavaScriptResource {
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CFuseSymbolTable {
            public const nint m_constants = 0x0; // CUtlVector<ConstantInfo_t>
            public const nint m_variables = 0x18; // CUtlVector<VariableInfo_t>
            public const nint m_functions = 0x30; // CUtlVector<FunctionInfo_t>
            public const nint m_constantMap = 0x48; // CUtlHashtable<CUtlStringToken,int32>
            public const nint m_variableMap = 0x68; // CUtlHashtable<CUtlStringToken,int32>
            public const nint m_functionMap = 0x88; // CUtlHashtable<CUtlStringToken,int32>
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCRenderMesh {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCVoxelVisibility {
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class TestResource_t {
            public const nint m_name = 0x0; // CUtlString
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCPhysAggregateData {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCNmClip {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeWorld_t {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeProceduralTestResource_t {
        }
        // Parent: None
        // Field count: 2
        public static class AABB_t {
            public const nint m_vMinBounds = 0x0; // Vector
            public const nint m_vMaxBounds = 0xC; // Vector
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCPostProcessingResource {
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VariableInfo_t {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_nameToken = 0x8; // CUtlStringToken
            public const nint m_nIndex = 0xC; // FuseVariableIndex_t
            public const nint m_nNumComponents = 0xE; // uint8
            public const nint m_eVarType = 0xF; // FuseVariableType_t
            public const nint m_eAccess = 0x10; // FuseVariableAccess_t
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeIParticleSnapshot {
        }
        // Parent: None
        // Field count: 4
        public static class FourQuaternions {
            public const nint x = 0x0; // fltx4
            public const nint y = 0x10; // fltx4
            public const nint z = 0x20; // fltx4
            public const nint w = 0x30; // fltx4
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCPanoramaLayout {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCTypeScriptResource {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCNmSkeleton {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeTestResource_t {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCAnimationGroup {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCVSoundEventScriptList {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCVoiceContainerBase {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCPanoramaStyle {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCWorldNode {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCNmGraphVariation {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCCSGOEconItem {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCNmGraphDefinition {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCSmartProp {
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CFuseProgram {
            public const nint m_programBuffer = 0x0; // CUtlVector<uint8>
            public const nint m_variablesRead = 0x18; // CUtlVector<FuseVariableIndex_t>
            public const nint m_variablesWritten = 0x30; // CUtlVector<FuseVariableIndex_t>
            public const nint m_nMaxTempVarsUsed = 0x48; // int32
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCCompositeMaterialKit {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCVMixListResource {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCAnimData {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeIMaterial2 {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeIVectorGraphic {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCPanoramaDynamicImages {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeIPulseGraphDef {
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FunctionInfo_t {
            public const nint m_name = 0x8; // CUtlString
            public const nint m_nameToken = 0x10; // CUtlStringToken
            public const nint m_nParamCount = 0x14; // int32
            public const nint m_nIndex = 0x18; // FuseFunctionIndex_t
            public const nint m_bIsPure = 0x1A; // bool
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCVDataResource {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCModel {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCDOTANovelsList {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCTextureBase {
        }
        // Parent: None
        // Field count: 1
        public static class FuseVariableIndex_t {
            public const nint m_Value = 0x0; // uint16
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeIParticleSystemDefinition {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCSequenceGroupData {
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ManifestTestResource_t {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_child = 0x8; // CStrongHandle<InfoForResourceTypeManifestTestResource_t>
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCEntityLump {
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCDOTAPatchNotesList {
        }
    }
}


// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: scenesystem.dll
    // Class count: 9
    // Enum count: 1
    public static class ScenesystemDll {
        // Alignment: 1
        // Member count: 4
        public enum DisableShadows_t : byte {
            kDisableShadows_None = 0x0,
            kDisableShadows_All = 0x1,
            kDisableShadows_Baked = 0x2,
            kDisableShadows_Realtime = 0x3
        }
        // Parent: None
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSSDSMsg_ViewTarget {
            public const nint m_Name = 0x0; // CUtlString
            public const nint m_TextureId = 0x8; // uint64
            public const nint m_nWidth = 0x10; // int32
            public const nint m_nHeight = 0x14; // int32
            public const nint m_nRequestedWidth = 0x18; // int32
            public const nint m_nRequestedHeight = 0x1C; // int32
            public const nint m_nNumMipLevels = 0x20; // int32
            public const nint m_nDepth = 0x24; // int32
            public const nint m_nMultisampleNumSamples = 0x28; // int32
            public const nint m_nFormat = 0x2C; // int32
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class SceneViewId_t {
            public const nint m_nViewId = 0x0; // uint64
            public const nint m_nFrameCount = 0x8; // uint64
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSSDSEndFrameViewInfo {
            public const nint m_nViewId = 0x0; // uint64
            public const nint m_ViewName = 0x8; // CUtlString
        }
        // Parent: CSSDSMsg_LayerBase
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSSDSMsg_PostLayer {
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSSDSMsg_LayerBase {
            public const nint m_viewId = 0x0; // SceneViewId_t
            public const nint m_ViewName = 0x10; // CUtlString
            public const nint m_nLayerIndex = 0x18; // int32
            public const nint m_nLayerId = 0x20; // uint64
            public const nint m_LayerName = 0x28; // CUtlString
            public const nint m_displayText = 0x30; // CUtlString
        }
        // Parent: CSSDSMsg_LayerBase
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSSDSMsg_PreLayer {
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSSDSMsg_ViewTargetList {
            public const nint m_viewId = 0x0; // SceneViewId_t
            public const nint m_ViewName = 0x10; // CUtlString
            public const nint m_Targets = 0x18; // CUtlVector<CSSDSMsg_ViewTarget>
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSSDSMsg_ViewRender {
            public const nint m_viewId = 0x0; // SceneViewId_t
            public const nint m_ViewName = 0x10; // CUtlString
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSSDSMsg_EndFrame {
            public const nint m_Views = 0x0; // CUtlVector<CSSDSEndFrameViewInfo>
        }
    }
}



// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: schemasystem.dll
    // Class count: 7
    // Enum count: 2
    public static class SchemasystemDll {
        // Alignment: 1
        // Member count: 81
        public enum fieldtype_t : byte {
            FIELD_VOID = 0x0,
            FIELD_FLOAT32 = 0x1,
            FIELD_STRING = 0x2,
            FIELD_VECTOR = 0x3,
            FIELD_QUATERNION = 0x4,
            FIELD_INT32 = 0x5,
            FIELD_BOOLEAN = 0x6,
            FIELD_INT16 = 0x7,
            FIELD_CHARACTER = 0x8,
            FIELD_COLOR32 = 0x9,
            FIELD_EMBEDDED = 0xA,
            FIELD_CUSTOM = 0xB,
            FIELD_CLASSPTR = 0xC,
            FIELD_EHANDLE = 0xD,
            FIELD_POSITION_VECTOR = 0xE,
            FIELD_TIME = 0xF,
            FIELD_TICK = 0x10,
            FIELD_SOUNDNAME = 0x11,
            FIELD_INPUT = 0x12,
            FIELD_FUNCTION = 0x13,
            FIELD_VMATRIX = 0x14,
            FIELD_VMATRIX_WORLDSPACE = 0x15,
            FIELD_MATRIX3X4_WORLDSPACE = 0x16,
            FIELD_INTERVAL = 0x17,
            FIELD_UNUSED = 0x18,
            FIELD_VECTOR2D = 0x19,
            FIELD_INT64 = 0x1A,
            FIELD_VECTOR4D = 0x1B,
            FIELD_RESOURCE = 0x1C,
            FIELD_TYPEUNKNOWN = 0x1D,
            FIELD_CSTRING = 0x1E,
            FIELD_HSCRIPT = 0x1F,
            FIELD_VARIANT = 0x20,
            FIELD_UINT64 = 0x21,
            FIELD_FLOAT64 = 0x22,
            FIELD_POSITIVEINTEGER_OR_NULL = 0x23,
            FIELD_HSCRIPT_NEW_INSTANCE = 0x24,
            FIELD_UINT32 = 0x25,
            FIELD_UTLSTRINGTOKEN = 0x26,
            FIELD_QANGLE = 0x27,
            FIELD_NETWORK_ORIGIN_CELL_QUANTIZED_VECTOR = 0x28,
            FIELD_HMATERIAL = 0x29,
            FIELD_HMODEL = 0x2A,
            FIELD_NETWORK_QUANTIZED_VECTOR = 0x2B,
            FIELD_NETWORK_QUANTIZED_FLOAT = 0x2C,
            FIELD_DIRECTION_VECTOR_WORLDSPACE = 0x2D,
            FIELD_QANGLE_WORLDSPACE = 0x2E,
            FIELD_QUATERNION_WORLDSPACE = 0x2F,
            FIELD_HSCRIPT_LIGHTBINDING = 0x30,
            FIELD_V8_VALUE = 0x31,
            FIELD_V8_OBJECT = 0x32,
            FIELD_V8_ARRAY = 0x33,
            FIELD_V8_CALLBACK_INFO = 0x34,
            FIELD_UTLSTRING = 0x35,
            FIELD_NETWORK_ORIGIN_CELL_QUANTIZED_POSITION_VECTOR = 0x36,
            FIELD_HRENDERTEXTURE = 0x37,
            FIELD_HPARTICLESYSTEMDEFINITION = 0x38,
            FIELD_UINT8 = 0x39,
            FIELD_UINT16 = 0x3A,
            FIELD_CTRANSFORM = 0x3B,
            FIELD_CTRANSFORM_WORLDSPACE = 0x3C,
            FIELD_HPOSTPROCESSING = 0x3D,
            FIELD_MATRIX3X4 = 0x3E,
            FIELD_SHIM = 0x3F,
            FIELD_CMOTIONTRANSFORM = 0x40,
            FIELD_CMOTIONTRANSFORM_WORLDSPACE = 0x41,
            FIELD_ATTACHMENT_HANDLE = 0x42,
            FIELD_AMMO_INDEX = 0x43,
            FIELD_CONDITION_ID = 0x44,
            FIELD_AI_SCHEDULE_BITS = 0x45,
            FIELD_MODIFIER_HANDLE = 0x46,
            FIELD_ROTATION_VECTOR = 0x47,
            FIELD_ROTATION_VECTOR_WORLDSPACE = 0x48,
            FIELD_HVDATA = 0x49,
            FIELD_SCALE32 = 0x4A,
            FIELD_STRING_AND_TOKEN = 0x4B,
            FIELD_ENGINE_TIME = 0x4C,
            FIELD_ENGINE_TICK = 0x4D,
            FIELD_WORLD_GROUP_ID = 0x4E,
            FIELD_GLOBALSYMBOL = 0x4F,
            FIELD_TYPECOUNT = 0x50
        }
        // Alignment: 4
        // Member count: 3
        public enum ThreeState_t : uint {
            TRS_FALSE = 0x0,
            TRS_TRUE = 0x1,
            TRS_NONE = 0x2
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeCResourceManifestInternal {
        }
        // Parent: None
        // Field count: 22
        public static class CSchemaSystemInternalRegistration {
            public const nint m_Vector2D = 0x0; // Vector2D
            public const nint m_Vector = 0x8; // Vector
            public const nint m_VectorAligned = 0x20; // VectorAligned
            public const nint m_Quaternion = 0x30; // Quaternion
            public const nint m_QAngle = 0x40; // QAngle
            public const nint m_RotationVector = 0x4C; // RotationVector
            public const nint m_RadianEuler = 0x58; // RadianEuler
            public const nint m_DegreeEuler = 0x64; // DegreeEuler
            public const nint m_QuaternionStorage = 0x70; // QuaternionStorage
            public const nint m_matrix3x4_t = 0x80; // matrix3x4_t
            public const nint m_matrix3x4a_t = 0xB0; // matrix3x4a_t
            public const nint m_Color = 0xE0; // Color
            public const nint m_Vector4D = 0xE4; // Vector4D
            public const nint m_CTransform = 0x100; // CTransform
            public const nint m_pKeyValues = 0x120; // KeyValues*
            public const nint m_CUtlBinaryBlock = 0x128; // CUtlBinaryBlock
            public const nint m_CUtlString = 0x140; // CUtlString
            public const nint m_CUtlSymbol = 0x148; // CUtlSymbol
            public const nint m_stringToken = 0x14C; // CUtlStringToken
            public const nint m_stringTokenWithStorage = 0x150; // CUtlStringTokenWithStorage
            public const nint m_ResourceTypes = 0x168; // CResourceArray<CResourcePointer<CResourceString>>
            public const nint m_KV3 = 0x170; // KeyValues3
        }
        // Parent: CExampleSchemaVData_PolymorphicBase
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CExampleSchemaVData_PolymorphicDerivedA {
            public const nint m_nDerivedA = 0x10; // int32
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CExampleSchemaVData_PolymorphicBase {
            public const nint m_nBase = 0x8; // int32
        }
        // Parent: CExampleSchemaVData_PolymorphicBase
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CExampleSchemaVData_PolymorphicDerivedB {
            public const nint m_nDerivedB = 0x10; // int32
        }
        // Parent: None
        // Field count: 1
        public static class ResourceId_t {
            public const nint m_Value = 0x0; // uint64
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CExampleSchemaVData_Monomorphic {
            public const nint m_nExample1 = 0x0; // int32
            public const nint m_nExample2 = 0x4; // int32
        }
    }
}






// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: soundsystem.dll
    // Class count: 74
    // Enum count: 18
    public static class SoundsystemDll {
        // Alignment: 4
        // Member count: 2
        public enum EMode_t : uint {
            Peak = 0x0,
            RMS = 0x1
        }
        // Alignment: 1
        // Member count: 5
        public enum EWaveform : byte {
            Sine = 0x0,
            Square = 0x1,
            Saw = 0x2,
            Triangle = 0x3,
            Noise = 0x4
        }
        // Alignment: 4
        // Member count: 5
        public enum VMixLFOShape_t : uint {
            LFO_SHAPE_SINE = 0x0,
            LFO_SHAPE_SQUARE = 0x1,
            LFO_SHAPE_TRI = 0x2,
            LFO_SHAPE_SAW = 0x3,
            LFO_SHAPE_NOISE = 0x4
        }
        // Alignment: 2
        // Member count: 10
        public enum VMixFilterType_t : ushort {
            FILTER_UNKNOWN = unchecked((ushort)-1),
            FILTER_LOWPASS = 0x0,
            FILTER_HIGHPASS = 0x1,
            FILTER_BANDPASS = 0x2,
            FILTER_NOTCH = 0x3,
            FILTER_PEAKING_EQ = 0x4,
            FILTER_LOW_SHELF = 0x5,
            FILTER_HIGH_SHELF = 0x6,
            FILTER_ALLPASS = 0x7,
            FILTER_PASSTHROUGH = 0x8
        }
        // Alignment: 4
        // Member count: 3
        public enum SosActionStopType_t : uint {
            SOS_STOPTYPE_NONE = 0x0,
            SOS_STOPTYPE_TIME = 0x1,
            SOS_STOPTYPE_OPVAR = 0x2
        }
        // Alignment: 4
        // Member count: 6
        public enum SosEditItemType_t : uint {
            SOS_EDIT_ITEM_TYPE_SOUNDEVENTS = 0x0,
            SOS_EDIT_ITEM_TYPE_SOUNDEVENT = 0x1,
            SOS_EDIT_ITEM_TYPE_LIBRARYSTACKS = 0x2,
            SOS_EDIT_ITEM_TYPE_STACK = 0x3,
            SOS_EDIT_ITEM_TYPE_OPERATOR = 0x4,
            SOS_EDIT_ITEM_TYPE_FIELD = 0x5
        }
        // Alignment: 4
        // Member count: 2
        public enum SosActionSortType_t : uint {
            SOS_SORTTYPE_HIGHEST = 0x0,
            SOS_SORTTYPE_LOWEST = 0x1
        }
        // Alignment: 4
        // Member count: 5
        public enum PlayBackMode_t : uint {
            Random = 0x0,
            RandomNoRepeats = 0x1,
            RandomAvoidLast = 0x2,
            Sequential = 0x3,
            RandomWeights = 0x4
        }
        // Alignment: 2
        // Member count: 30
        public enum VMixProcessorType_t : ushort {
            VPROCESSOR_UNKNOWN = 0x0,
            VPROCESSOR_RT_PITCH = 0x1,
            VPROCESSOR_STEAMAUDIO_HRTF = 0x2,
            VPROCESSOR_DYNAMICS = 0x3,
            VPROCESSOR_PRESETDSP = 0x4,
            VPROCESSOR_DELAY = 0x5,
            VPROCESSOR_MOD_DELAY = 0x6,
            VPROCESSOR_DIFFUSOR = 0x7,
            VPROCESSOR_BOXVERB = 0x8,
            VPROCESSOR_FREEVERB = 0x9,
            VPROCESSOR_PLATEVERB = 0xA,
            VPROCESSOR_FULLWAVE_INTEGRATOR = 0xB,
            VPROCESSOR_FILTER = 0xC,
            VPROCESSOR_STEAMAUDIO_PATHING = 0xD,
            VPROCESSOR_EQ8 = 0xE,
            VPROCESSOR_ENVELOPE = 0xF,
            VPROCESSOR_VOCODER = 0x10,
            VPROCESSOR_CONVOLUTION = 0x11,
            VPROCESSOR_DYNAMICS_3BAND = 0x12,
            VPROCESSOR_DYNAMICS_COMPRESSOR = 0x13,
            VPROCESSOR_SHAPER = 0x14,
            VPROCESSOR_PANNER = 0x15,
            VPROCESSOR_UTILITY = 0x16,
            VPROCESSOR_AUTOFILTER = 0x17,
            VPROCESSOR_OSC = 0x18,
            VPROCESSOR_STEREODELAY = 0x19,
            VPROCESSOR_EFFECT_CHAIN = 0x1A,
            VPROCESSOR_SUBGRAPH_SWITCH = 0x1B,
            VPROCESSOR_STEAMAUDIO_DIRECT = 0x1C,
            VPROCESSOR_STEAMAUDIO_HYBRIDREVERB = 0x1D
        }
        // Alignment: 4
        // Member count: 30
        public enum soundlevel_t : uint {
            SNDLVL_NONE = 0x0,
            SNDLVL_20dB = 0x14,
            SNDLVL_25dB = 0x19,
            SNDLVL_30dB = 0x1E,
            SNDLVL_35dB = 0x23,
            SNDLVL_40dB = 0x28,
            SNDLVL_45dB = 0x2D,
            SNDLVL_50dB = 0x32,
            SNDLVL_55dB = 0x37,
            SNDLVL_IDLE = 0x3C,
            SNDLVL_60dB = 0x3C,
            SNDLVL_65dB = 0x41,
            SNDLVL_STATIC = 0x42,
            SNDLVL_70dB = 0x46,
            SNDLVL_NORM = 0x4B,
            SNDLVL_75dB = 0x4B,
            SNDLVL_80dB = 0x50,
            SNDLVL_TALKING = 0x50,
            SNDLVL_85dB = 0x55,
            SNDLVL_90dB = 0x5A,
            SNDLVL_95dB = 0x5F,
            SNDLVL_100dB = 0x64,
            SNDLVL_105dB = 0x69,
            SNDLVL_110dB = 0x6E,
            SNDLVL_120dB = 0x78,
            SNDLVL_130dB = 0x82,
            SNDLVL_GUNFIRE = 0x8C,
            SNDLVL_140dB = 0x8C,
            SNDLVL_150dB = 0x96,
            SNDLVL_180dB = 0xB4
        }
        // Alignment: 4
        // Member count: 2
        public enum VMixPannerType_t : uint {
            PANNER_TYPE_LINEAR = 0x0,
            PANNER_TYPE_EQUAL_POWER = 0x1
        }
        // Alignment: 4
        // Member count: 6
        public enum VMixChannelOperation_t : uint {
            VMIX_CHAN_STEREO = 0x0,
            VMIX_CHAN_LEFT = 0x1,
            VMIX_CHAN_RIGHT = 0x2,
            VMIX_CHAN_SWAP = 0x3,
            VMIX_CHAN_MONO = 0x4,
            VMIX_CHAN_MID_SIDE = 0x5
        }
        // Alignment: 1
        // Member count: 13
        public enum EMidiNote : byte {
            C = 0x0,
            C_Sharp = 0x1,
            D = 0x2,
            D_Sharp = 0x3,
            E = 0x4,
            F = 0x5,
            F_Sharp = 0x6,
            G = 0x7,
            G_Sharp = 0x8,
            A = 0x9,
            A_Sharp = 0xA,
            B = 0xB,
            Count = 0xC
        }
        // Alignment: 1
        // Member count: 4
        public enum CVSoundFormat_t : byte {
            PCM16 = 0x0,
            PCM8 = 0x1,
            MP3 = 0x2,
            ADPCM = 0x3
        }
        // Alignment: 1
        // Member count: 9
        public enum VMixFilterSlope_t : byte {
            FILTER_SLOPE_1POLE_6dB = 0x0,
            FILTER_SLOPE_1POLE_12dB = 0x1,
            FILTER_SLOPE_1POLE_18dB = 0x2,
            FILTER_SLOPE_1POLE_24dB = 0x3,
            FILTER_SLOPE_12dB = 0x4,
            FILTER_SLOPE_24dB = 0x5,
            FILTER_SLOPE_36dB = 0x6,
            FILTER_SLOPE_48dB = 0x7,
            FILTER_SLOPE_MAX = 0x7
        }
        // Alignment: 4
        // Member count: 10
        public enum ActionType_t : uint {
            SOS_ACTION_NONE = 0x0,
            SOS_ACTION_LIMITER = 0x1,
            SOS_ACTION_TIME_LIMIT = 0x2,
            SOS_ACTION_TIME_BLOCK_LIMITER = 0x3,
            SOS_ACTION_SET_SOUNDEVENT_PARAM = 0x4,
            SOS_ACTION_SOUNDEVENT_CLUSTER = 0x5,
            SOS_ACTION_SOUNDEVENT_PRIORITY = 0x6,
            SOS_ACTION_COUNT_ENVELOPE = 0x7,
            SOS_ACTION_SOUNDEVENT_COUNT = 0x8,
            SOS_ACTION_SOUNDEVENT_MIN_MAX_VALUES = 0x9
        }
        // Alignment: 4
        // Member count: 3
        public enum VMixSubgraphSwitchInterpolationType_t : uint {
            SUBGRAPH_INTERPOLATION_TEMPORAL_CROSSFADE = 0x0,
            SUBGRAPH_INTERPOLATION_TEMPORAL_FADE_OUT = 0x1,
            SUBGRAPH_INTERPOLATION_KEEP_LAST_SUBGRAPH_RUNNING = 0x2
        }
        // Alignment: 4
        // Member count: 2
        public enum SosGroupType_t : uint {
            SOS_GROUPTYPE_DYNAMIC = 0x0,
            SOS_GROUPTYPE_STATIC = 0x1
        }
        // Parent: CVoiceContainerBase
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerBlender {
            public const nint m_firstSound = 0xC0; // CSoundContainerReference
            public const nint m_secondSound = 0xD8; // CSoundContainerReference
            public const nint m_flBlendFactor = 0xF0; // float32
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixFreeverbDesc_t {
            public const nint m_flRoomSize = 0x0; // float32
            public const nint m_flDamp = 0x4; // float32
            public const nint m_flWidth = 0x8; // float32
            public const nint m_flLateReflections = 0xC; // float32
        }
        // Parent: None
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CVoiceContainerStaticAdditiveSynth__CHarmonic {
            public const nint m_nWaveform = 0x0; // EWaveform
            public const nint m_nFundamental = 0x1; // EMidiNote
            public const nint m_nOctave = 0x4; // int32
            public const nint m_flCents = 0x8; // float32
            public const nint m_flPhase = 0xC; // float32
            public const nint m_curve = 0x10; // CPiecewiseCurve
            public const nint m_volumeScaling = 0x50; // CVoiceContainerStaticAdditiveSynth::CGainScalePerInstance
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CVoiceContainerStaticAdditiveSynth__CTone {
            public const nint m_harmonics = 0x0; // CUtlVector<CVoiceContainerStaticAdditiveSynth::CHarmonic>
            public const nint m_curve = 0x18; // CPiecewiseCurve
            public const nint m_bSyncInstances = 0x58; // bool
        }
        // Parent: CVoiceContainerBase
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerRandomSampler {
            public const nint m_flAmplitude = 0xC0; // float32
            public const nint m_flAmplitudeJitter = 0xC4; // float32
            public const nint m_flTimeJitter = 0xC8; // float32
            public const nint m_flMaxLength = 0xCC; // float32
            public const nint m_nNumDelayVariations = 0xD0; // int32
            public const nint m_grainResources = 0xD8; // CUtlVector<CStrongHandle<InfoForResourceTypeCVoiceContainerBase>>
        }
        // Parent: CVoiceContainerBase
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerDefault {
        }
        // Parent: None
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CVSound {
            public const nint m_nRate = 0x0; // int32
            public const nint m_nFormat = 0x4; // CVSoundFormat_t
            public const nint m_nChannels = 0x8; // uint32
            public const nint m_nLoopStart = 0xC; // int32
            public const nint m_nSampleCount = 0x10; // uint32
            public const nint m_flDuration = 0x14; // float32
            public const nint m_Sentences = 0x18; // CUtlVector<CAudioSentence>
            public const nint m_nStreamingSize = 0x30; // uint32
            public const nint m_nSeekTable = 0x38; // CUtlVector<int32>
            public const nint m_nLoopEnd = 0x50; // int32
            public const nint m_encodedHeader = 0x58; // CUtlBinaryBlock
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MVDataNodeType
        public static class CDSPPresetMixgroupModifierTable {
            public const nint m_table = 0x0; // CUtlVector<CDspPresetModifierList>
        }
        // Parent: CSosGroupActionSchema
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSosGroupActionSoundeventClusterSchema {
            public const nint m_nMinNearby = 0x18; // int32
            public const nint m_flClusterEpsilon = 0x1C; // float32
            public const nint m_shouldPlayOpvar = 0x20; // CUtlString
            public const nint m_shouldPlayClusterChild = 0x28; // CUtlString
            public const nint m_clusterSizeOpvar = 0x30; // CUtlString
            public const nint m_groupBoundingBoxMinsOpvar = 0x38; // CUtlString
            public const nint m_groupBoundingBoxMaxsOpvar = 0x40; // CUtlString
        }
        // Parent: CSosGroupActionSchema
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSosGroupActionSetSoundeventParameterSchema {
            public const nint m_nMaxCount = 0x18; // int32
            public const nint m_flMinValue = 0x1C; // float32
            public const nint m_flMaxValue = 0x20; // float32
            public const nint m_opvarName = 0x28; // CUtlString
            public const nint m_nSortType = 0x30; // SosActionSortType_t
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CSoundContainerReference {
            public const nint m_bUseReference = 0x0; // bool
            public const nint m_sound = 0x8; // CStrongHandle<InfoForResourceTypeCVoiceContainerBase>
            public const nint m_pSound = 0x10; // CVoiceContainerBase*
        }
        // Parent: CVoiceContainerBase
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerNull {
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixSubgraphSwitchDesc_t {
            public const nint m_interpolationMode = 0x0; // VMixSubgraphSwitchInterpolationType_t
            public const nint m_bOnlyTailsOnFadeOut = 0x4; // bool
            public const nint m_flInterpolationTime = 0x8; // float32
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MVDataNodeType
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerAnalysisBase {
            public const nint m_bRegenerateCurveOnCompile = 0x8; // bool
            public const nint m_curve = 0x10; // CPiecewiseCurve
        }
        // Parent: CSosGroupActionSchema
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSosGroupActionSoundeventMinMaxValuesSchema {
            public const nint m_strQueryPublicFieldName = 0x18; // CUtlString
            public const nint m_strDelayPublicFieldName = 0x20; // CUtlString
            public const nint m_bExcludeStoppedSounds = 0x28; // bool
            public const nint m_bExcludeDelayedSounds = 0x29; // bool
            public const nint m_bExcludeSoundsBelowThreshold = 0x2A; // bool
            public const nint m_flExcludeSoundsMinThresholdValue = 0x2C; // float32
            public const nint m_bExcludSoundsAboveThreshold = 0x30; // bool
            public const nint m_flExcludeSoundsMaxThresholdValue = 0x34; // float32
            public const nint m_strMinValueName = 0x38; // CUtlString
            public const nint m_strMaxValueName = 0x40; // CUtlString
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixPannerDesc_t {
            public const nint m_type = 0x0; // VMixPannerType_t
            public const nint m_flStrength = 0x4; // float32
        }
        // Parent: CSosGroupActionSchema
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSosGroupActionSoundeventPrioritySchema {
            public const nint m_priorityValue = 0x18; // CUtlString
            public const nint m_priorityVolumeScalar = 0x20; // CUtlString
            public const nint m_priorityContributeButDontRead = 0x28; // CUtlString
            public const nint m_bPriorityReadButDontContribute = 0x30; // CUtlString
        }
        // Parent: CVoiceContainerBase
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerRealtimeFMSineWave {
            public const nint m_flCarrierFrequency = 0xC0; // float32
            public const nint m_flModulatorFrequency = 0xC4; // float32
            public const nint m_flModulatorAmount = 0xC8; // float32
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class SelectedEditItemInfo_t {
            public const nint m_EditItems = 0x0; // CUtlVector<SosEditItemInfo_t>
        }
        // Parent: None
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixModDelayDesc_t {
            public const nint m_feedbackFilter = 0x0; // VMixFilterDesc_t
            public const nint m_bPhaseInvert = 0x10; // bool
            public const nint m_flGlideTime = 0x14; // float32
            public const nint m_flDelay = 0x18; // float32
            public const nint m_flOutputGain = 0x1C; // float32
            public const nint m_flFeedbackGain = 0x20; // float32
            public const nint m_flModRate = 0x24; // float32
            public const nint m_flModDepth = 0x28; // float32
            public const nint m_bApplyAntialiasing = 0x2C; // bool
        }
        // Parent: None
        // Field count: 17
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixBoxverbDesc_t {
            public const nint m_flSizeMax = 0x0; // float32
            public const nint m_flSizeMin = 0x4; // float32
            public const nint m_flComplexity = 0x8; // float32
            public const nint m_flDiffusion = 0xC; // float32
            public const nint m_flModDepth = 0x10; // float32
            public const nint m_flModRate = 0x14; // float32
            public const nint m_bParallel = 0x18; // bool
            public const nint m_filterType = 0x1C; // VMixFilterDesc_t
            public const nint m_flWidth = 0x2C; // float32
            public const nint m_flHeight = 0x30; // float32
            public const nint m_flDepth = 0x34; // float32
            public const nint m_flFeedbackScale = 0x38; // float32
            public const nint m_flFeedbackWidth = 0x3C; // float32
            public const nint m_flFeedbackHeight = 0x40; // float32
            public const nint m_flFeedbackDepth = 0x44; // float32
            public const nint m_flOutputGain = 0x48; // float32
            public const nint m_flTaps = 0x4C; // float32
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyElementNameFn
        public static class CSosGroupActionSchema {
            public const nint m_name = 0x8; // CUtlString
            public const nint m_actionType = 0x10; // ActionType_t
            public const nint m_actionInstanceType = 0x14; // ActionType_t
        }
        // Parent: None
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyElementNameFn
        public static class CSosSoundEventGroupSchema {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_nType = 0x8; // SosGroupType_t
            public const nint m_bIsBlocking = 0xC; // bool
            public const nint m_nBlockMaxCount = 0x10; // int32
            public const nint m_bInvertMatch = 0x14; // bool
            public const nint m_matchPattern = 0x18; // CSosGroupMatchPattern
            public const nint m_branchPattern = 0x48; // CSosGroupBranchPattern
            public const nint m_flLifeSpanTime = 0x58; // float32
            public const nint m_vActions = 0xC0; // CSosGroupActionSchema*[4]
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSosGroupBranchPattern {
            public const nint m_bMatchEventName = 0x8; // bool
            public const nint m_bMatchEventSubString = 0x9; // bool
            public const nint m_bMatchEntIndex = 0xA; // bool
            public const nint m_bMatchOpvar = 0xB; // bool
            public const nint m_bMatchString = 0xC; // bool
        }
        // Parent: None
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixDynamics3BandDesc_t {
            public const nint m_fldbGainOutput = 0x0; // float32
            public const nint m_flRMSTimeMS = 0x4; // float32
            public const nint m_fldbKneeWidth = 0x8; // float32
            public const nint m_flDepth = 0xC; // float32
            public const nint m_flWetMix = 0x10; // float32
            public const nint m_flTimeScale = 0x14; // float32
            public const nint m_flLowCutoffFreq = 0x18; // float32
            public const nint m_flHighCutoffFreq = 0x1C; // float32
            public const nint m_bPeakMode = 0x20; // bool
            public const nint m_bandDesc = 0x24; // VMixDynamicsBand_t[3]
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CDSPMixgroupModifier {
            public const nint m_mixgroup = 0x0; // CUtlString
            public const nint m_flModifier = 0x8; // float32
            public const nint m_flModifierMin = 0xC; // float32
            public const nint m_flSourceModifier = 0x10; // float32
            public const nint m_flSourceModifierMin = 0x14; // float32
            public const nint m_flListenerReverbModifierWhenSourceReverbIsActive = 0x18; // float32
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CAudioMorphData {
            public const nint m_times = 0x0; // CUtlVector<float32>
            public const nint m_nameHashCodes = 0x18; // CUtlVector<uint32>
            public const nint m_nameStrings = 0x30; // CUtlVector<CUtlString>
            public const nint m_samples = 0x48; // CUtlVector<CUtlVector<float32>>
            public const nint m_flEaseIn = 0x60; // float32
            public const nint m_flEaseOut = 0x64; // float32
        }
        // Parent: CVoiceContainerBase
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerStaticAdditiveSynth {
            public const nint m_tones = 0xC0; // CUtlVector<CVoiceContainerStaticAdditiveSynth::CTone>
        }
        // Parent: CVoiceContainerBase
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerShapedNoise {
            public const nint m_bUseCurveForFrequency = 0xC0; // bool
            public const nint m_flFrequency = 0xC4; // float32
            public const nint m_frequencySweep = 0xC8; // CPiecewiseCurve
            public const nint m_bUseCurveForResonance = 0x108; // bool
            public const nint m_flResonance = 0x10C; // float32
            public const nint m_resonanceSweep = 0x110; // CPiecewiseCurve
            public const nint m_bUseCurveForAmplitude = 0x150; // bool
            public const nint m_flGainInDecibels = 0x154; // float32
            public const nint m_gainSweep = 0x158; // CPiecewiseCurve
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CDspPresetModifierList {
            public const nint m_dspName = 0x0; // CUtlString
            public const nint m_modifiers = 0x8; // CUtlVector<CDSPMixgroupModifier>
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MVDataNodeType
        // MVDataFileExtension
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerBase {
            public const nint m_vSound = 0x38; // CVSound
            public const nint m_pEnvelopeAnalyzer = 0xB8; // CVoiceContainerAnalysisBase*
        }
        // Parent: CVoiceContainerBase
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        public static class CVoiceContainerGranulator {
            public const nint m_flGrainLength = 0xC0; // float32
            public const nint m_flGrainCrossfadeAmount = 0xC4; // float32
            public const nint m_flStartJitter = 0xC8; // float32
            public const nint m_flPlaybackJitter = 0xCC; // float32
            public const nint m_sourceAudio = 0xD0; // CStrongHandle<InfoForResourceTypeCVoiceContainerBase>
        }
        // Parent: None
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixDelayDesc_t {
            public const nint m_feedbackFilter = 0x0; // VMixFilterDesc_t
            public const nint m_bEnableFilter = 0x10; // bool
            public const nint m_flDelay = 0x14; // float32
            public const nint m_flDirectGain = 0x18; // float32
            public const nint m_flDelayGain = 0x1C; // float32
            public const nint m_flFeedbackGain = 0x20; // float32
            public const nint m_flWidth = 0x24; // float32
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixEQ8Desc_t {
            public const nint m_stages = 0x0; // VMixFilterDesc_t[8]
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CAudioPhonemeTag {
            public const nint m_flStartTime = 0x0; // float32
            public const nint m_flEndTime = 0x4; // float32
            public const nint m_nPhonemeCode = 0x8; // int32
        }
        // Parent: CSosGroupActionSchema
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSosGroupActionSoundeventCountSchema {
            public const nint m_bExcludeStoppedSounds = 0x18; // bool
            public const nint m_strCountKeyName = 0x20; // CUtlString
        }
        // Parent: CVoiceContainerAnalysisBase
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerEnvelopeAnalyzer {
            public const nint m_mode = 0x50; // EMode_t
            public const nint m_nSamples = 0x54; // int32
            public const nint m_flThreshold = 0x58; // float32
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSoundEventMetaData {
            public const nint m_soundEventVMix = 0x0; // CStrongHandle<InfoForResourceTypeCVMixListResource>
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixPitchShiftDesc_t {
            public const nint m_nGrainSampleCount = 0x0; // int32
            public const nint m_flPitchShift = 0x4; // float32
            public const nint m_nQuality = 0x8; // int32
            public const nint m_nProcType = 0xC; // int32
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CAudioEmphasisSample {
            public const nint m_flTime = 0x0; // float32
            public const nint m_flValue = 0x4; // float32
        }
        // Parent: CVoiceContainerBase
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerSet {
            public const nint m_soundsToPlay = 0xC0; // CUtlVector<CVoiceContainerSetElement>
        }
        // Parent: None
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixConvolutionDesc_t {
            public const nint m_fldbGain = 0x0; // float32
            public const nint m_flPreDelayMS = 0x4; // float32
            public const nint m_flWetMix = 0x8; // float32
            public const nint m_fldbLow = 0xC; // float32
            public const nint m_fldbMid = 0x10; // float32
            public const nint m_fldbHigh = 0x14; // float32
            public const nint m_flLowCutoffFreq = 0x18; // float32
            public const nint m_flHighCutoffFreq = 0x1C; // float32
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CVoiceContainerSetElement {
            public const nint m_sound = 0x0; // CSoundContainerReference
            public const nint m_flVolumeDB = 0x18; // float32
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSoundInfoHeader {
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSosSoundEventGroupListSchema {
            public const nint m_groupList = 0x0; // CUtlVector<CSosSoundEventGroupSchema>
        }
        // Parent: CSosGroupBranchPattern
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSosGroupMatchPattern {
            public const nint m_matchSoundEventName = 0x10; // CUtlString
            public const nint m_matchSoundEventSubString = 0x18; // CUtlString
            public const nint m_flEntIndex = 0x20; // float32
            public const nint m_flOpvar = 0x24; // float32
            public const nint m_opvarString = 0x28; // CUtlString
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class SosEditItemInfo_t {
            public const nint itemType = 0x0; // SosEditItemType_t
            public const nint itemName = 0x8; // CUtlString
            public const nint itemTypeName = 0x10; // CUtlString
            public const nint itemKVString = 0x20; // CUtlString
            public const nint itemPos = 0x28; // Vector2D
        }
        // Parent: None
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixPlateverbDesc_t {
            public const nint m_flPrefilter = 0x0; // float32
            public const nint m_flInputDiffusion1 = 0x4; // float32
            public const nint m_flInputDiffusion2 = 0x8; // float32
            public const nint m_flDecay = 0xC; // float32
            public const nint m_flDamp = 0x10; // float32
            public const nint m_flFeedbackDiffusion1 = 0x14; // float32
            public const nint m_flFeedbackDiffusion2 = 0x18; // float32
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CSoundContainerReferenceArray {
            public const nint m_bUseReference = 0x0; // bool
            public const nint m_sounds = 0x8; // CUtlVector<CStrongHandle<InfoForResourceTypeCVoiceContainerBase>>
            public const nint m_pSounds = 0x20; // CUtlVector<CVoiceContainerBase*>
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixDiffusorDesc_t {
            public const nint m_flSize = 0x0; // float32
            public const nint m_flComplexity = 0x4; // float32
            public const nint m_flFeedback = 0x8; // float32
            public const nint m_flOutputGain = 0xC; // float32
        }
        // Parent: None
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixDynamicsCompressorDesc_t {
            public const nint m_fldbOutputGain = 0x0; // float32
            public const nint m_fldbCompressionThreshold = 0x4; // float32
            public const nint m_fldbKneeWidth = 0x8; // float32
            public const nint m_flCompressionRatio = 0xC; // float32
            public const nint m_flAttackTimeMS = 0x10; // float32
            public const nint m_flReleaseTimeMS = 0x14; // float32
            public const nint m_flRMSTimeMS = 0x18; // float32
            public const nint m_flWetMix = 0x1C; // float32
            public const nint m_bPeakMode = 0x20; // bool
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixShaperDesc_t {
            public const nint m_nShape = 0x0; // int32
            public const nint m_fldbDrive = 0x4; // float32
            public const nint m_fldbOutputGain = 0x8; // float32
            public const nint m_flWetMix = 0xC; // float32
            public const nint m_nOversampleFactor = 0x10; // int32
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixEnvelopeDesc_t {
            public const nint m_flAttackTimeMS = 0x0; // float32
            public const nint m_flHoldTimeMS = 0x4; // float32
            public const nint m_flReleaseTimeMS = 0x8; // float32
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CAudioSentence {
            public const nint m_bShouldVoiceDuck = 0x0; // bool
            public const nint m_RunTimePhonemes = 0x8; // CUtlVector<CAudioPhonemeTag>
            public const nint m_EmphasisSamples = 0x20; // CUtlVector<CAudioEmphasisSample>
            public const nint m_morphData = 0x38; // CAudioMorphData
        }
        // Parent: CSosGroupActionSchema
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSosGroupActionLimitSchema {
            public const nint m_nMaxCount = 0x18; // int32
            public const nint m_nStopType = 0x1C; // SosActionStopType_t
            public const nint m_nSortType = 0x20; // SosActionSortType_t
        }
        // Parent: CVoiceContainerDecayingSineWave
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerAmpedDecayingSineWave {
            public const nint m_flGainAmount = 0xC8; // float32
        }
        // Parent: CVoiceContainerBase
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerEnvelope {
            public const nint m_sound = 0xC0; // CStrongHandle<InfoForResourceTypeCVoiceContainerBase>
            public const nint m_analysisContainer = 0xC8; // CVoiceContainerAnalysisBase*
        }
        // Parent: None
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixAutoFilterDesc_t {
            public const nint m_flEnvelopeAmount = 0x0; // float32
            public const nint m_flAttackTimeMS = 0x4; // float32
            public const nint m_flReleaseTimeMS = 0x8; // float32
            public const nint m_filter = 0xC; // VMixFilterDesc_t
            public const nint m_flLFOAmount = 0x1C; // float32
            public const nint m_flLFORate = 0x20; // float32
            public const nint m_flPhase = 0x24; // float32
            public const nint m_nLFOShape = 0x28; // VMixLFOShape_t
        }
        // Parent: None
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixDynamicsBand_t {
            public const nint m_fldbGainInput = 0x0; // float32
            public const nint m_fldbGainOutput = 0x4; // float32
            public const nint m_fldbThresholdBelow = 0x8; // float32
            public const nint m_fldbThresholdAbove = 0xC; // float32
            public const nint m_flRatioBelow = 0x10; // float32
            public const nint m_flRatioAbove = 0x14; // float32
            public const nint m_flAttackTimeMS = 0x18; // float32
            public const nint m_flReleaseTimeMS = 0x1C; // float32
            public const nint m_bEnable = 0x20; // bool
            public const nint m_bSolo = 0x21; // bool
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixEffectChainDesc_t {
            public const nint m_flCrossfadeTime = 0x0; // float32
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CVoiceContainerStaticAdditiveSynth__CGainScalePerInstance {
            public const nint m_flMinVolume = 0x0; // float32
            public const nint m_nInstancesAtMinVolume = 0x4; // int32
            public const nint m_flMaxVolume = 0x8; // float32
            public const nint m_nInstancesAtMaxVolume = 0xC; // int32
        }
        // Parent: CVoiceContainerBase
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerSelector {
            public const nint m_mode = 0xC0; // PlayBackMode_t
            public const nint m_soundsToPlay = 0xC8; // CSoundContainerReferenceArray
            public const nint m_fProbabilityWeights = 0x100; // CUtlVector<float32>
        }
        // Parent: CSosGroupActionSchema
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSosGroupActionTimeBlockLimitSchema {
            public const nint m_nMaxCount = 0x18; // int32
            public const nint m_flMaxDuration = 0x1C; // float32
        }
        // Parent: CVoiceContainerBase
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CTestBlendContainer {
            public const nint m_firstSound = 0xC0; // CStrongHandle<InfoForResourceTypeCVoiceContainerBase>
            public const nint m_secondSound = 0xC8; // CStrongHandle<InfoForResourceTypeCVoiceContainerBase>
        }
        // Parent: CSosGroupActionSchema
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSosGroupActionMemberCountEnvelopeSchema {
            public const nint m_nBaseCount = 0x18; // int32
            public const nint m_nTargetCount = 0x1C; // int32
            public const nint m_flBaseValue = 0x20; // float32
            public const nint m_flTargetValue = 0x24; // float32
            public const nint m_flAttack = 0x28; // float32
            public const nint m_flDecay = 0x2C; // float32
            public const nint m_resultVarName = 0x30; // CUtlString
            public const nint m_bSaveToGroup = 0x38; // bool
        }
        // Parent: CVoiceContainerBase
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerSwitch {
            public const nint m_soundsToPlay = 0xC0; // CUtlVector<CSoundContainerReference>
        }
        // Parent: CSosGroupActionSchema
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CSosGroupActionTimeLimitSchema {
            public const nint m_flMaxDuration = 0x18; // float32
        }
        // Parent: None
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixVocoderDesc_t {
            public const nint m_nBandCount = 0x0; // int32
            public const nint m_flBandwidth = 0x4; // float32
            public const nint m_fldBModGain = 0x8; // float32
            public const nint m_flFreqRangeStart = 0xC; // float32
            public const nint m_flFreqRangeEnd = 0x10; // float32
            public const nint m_fldBUnvoicedGain = 0x14; // float32
            public const nint m_flAttackTimeMS = 0x18; // float32
            public const nint m_flReleaseTimeMS = 0x1C; // float32
            public const nint m_nDebugBand = 0x20; // int32
            public const nint m_bPeakMode = 0x24; // bool
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixUtilityDesc_t {
            public const nint m_nOp = 0x0; // VMixChannelOperation_t
            public const nint m_flInputPan = 0x4; // float32
            public const nint m_flOutputBalance = 0x8; // float32
            public const nint m_fldbOutputGain = 0xC; // float32
            public const nint m_bBassMono = 0x10; // bool
            public const nint m_flBassFreq = 0x14; // float32
        }
        // Parent: CVoiceContainerBase
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerLoopTrigger {
            public const nint m_sound = 0xC0; // CSoundContainerReference
            public const nint m_flRetriggerTimeMin = 0xD8; // float32
            public const nint m_flRetriggerTimeMax = 0xDC; // float32
            public const nint m_flFadeTime = 0xE0; // float32
            public const nint m_bCrossFade = 0xE4; // bool
        }
        // Parent: CVoiceContainerBase
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        // MPropertyFriendlyName
        // MPropertyDescription
        public static class CVoiceContainerDecayingSineWave {
            public const nint m_flFrequency = 0xC0; // float32
            public const nint m_flDecayTime = 0xC4; // float32
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixFilterDesc_t {
            public const nint m_nFilterType = 0x0; // VMixFilterType_t
            public const nint m_nFilterSlope = 0x2; // VMixFilterSlope_t
            public const nint m_bEnabled = 0x3; // bool
            public const nint m_fldbGain = 0x4; // float32
            public const nint m_flCutoffFreq = 0x8; // float32
            public const nint m_flQ = 0xC; // float32
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixOscDesc_t {
            public const nint oscType = 0x0; // VMixLFOShape_t
            public const nint m_freq = 0x4; // float32
            public const nint m_flPhase = 0x8; // float32
        }
        // Parent: None
        // Field count: 12
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VMixDynamicsDesc_t {
            public const nint m_fldbGain = 0x0; // float32
            public const nint m_fldbNoiseGateThreshold = 0x4; // float32
            public const nint m_fldbCompressionThreshold = 0x8; // float32
            public const nint m_fldbLimiterThreshold = 0xC; // float32
            public const nint m_fldbKneeWidth = 0x10; // float32
            public const nint m_flRatio = 0x14; // float32
            public const nint m_flLimiterRatio = 0x18; // float32
            public const nint m_flAttackTimeMS = 0x1C; // float32
            public const nint m_flReleaseTimeMS = 0x20; // float32
            public const nint m_flRMSTimeMS = 0x24; // float32
            public const nint m_flWetMix = 0x28; // float32
            public const nint m_bPeakMode = 0x2C; // bool
        }
    }
}

// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: vphysics2.dll
    // Class count: 94
    // Enum count: 2
    public static class Vphysics2Dll {
        // Alignment: 4
        // Member count: 3
        public enum JointMotion_t : uint {
            JOINT_MOTION_FREE = 0x0,
            JOINT_MOTION_LOCKED = 0x1,
            JOINT_MOTION_COUNT = 0x2
        }
        // Alignment: 4
        // Member count: 4
        public enum JointAxis_t : uint {
            JOINT_AXIS_X = 0x0,
            JOINT_AXIS_Y = 0x1,
            JOINT_AXIS_Z = 0x2,
            JOINT_AXIS_COUNT = 0x3
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnSoftbodySpring_t {
            public const nint m_nParticle = 0x0; // uint16[2]
            public const nint m_flLength = 0x4; // float32
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnSoftbodyParticle_t {
            public const nint m_flMassInv = 0x0; // float32
        }
        // Parent: RnShapeDesc_t
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnHullDesc_t {
            public const nint m_Hull = 0x18; // RnHull_t
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnSoftbodyCapsule_t {
            public const nint m_vCenter = 0x0; // Vector[2]
            public const nint m_flRadius = 0x18; // float32
            public const nint m_nParticle = 0x1C; // uint16[2]
        }
        // Parent: RnShapeDesc_t
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnCapsuleDesc_t {
            public const nint m_Capsule = 0x18; // RnCapsule_t
        }
        // Parent: RnShapeDesc_t
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnSphereDesc_t {
            public const nint m_Sphere = 0x18; // SphereBase_t<float32>
        }
        // Parent: RnShapeDesc_t
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnMeshDesc_t {
            public const nint m_Mesh = 0x18; // RnMesh_t
        }
        // Parent: None
        // Field count: 106
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PhysFeModelDesc_t {
            public const nint m_CtrlHash = 0x0; // CUtlVector<uint32>
            public const nint m_CtrlName = 0x18; // CUtlVector<CUtlString>
            public const nint m_nStaticNodeFlags = 0x30; // uint32
            public const nint m_nDynamicNodeFlags = 0x34; // uint32
            public const nint m_flLocalForce = 0x38; // float32
            public const nint m_flLocalRotation = 0x3C; // float32
            public const nint m_nNodeCount = 0x40; // uint16
            public const nint m_nStaticNodes = 0x42; // uint16
            public const nint m_nRotLockStaticNodes = 0x44; // uint16
            public const nint m_nFirstPositionDrivenNode = 0x46; // uint16
            public const nint m_nSimdTriCount1 = 0x48; // uint16
            public const nint m_nSimdTriCount2 = 0x4A; // uint16
            public const nint m_nSimdQuadCount1 = 0x4C; // uint16
            public const nint m_nSimdQuadCount2 = 0x4E; // uint16
            public const nint m_nQuadCount1 = 0x50; // uint16
            public const nint m_nQuadCount2 = 0x52; // uint16
            public const nint m_nTreeDepth = 0x54; // uint16
            public const nint m_nNodeBaseJiggleboneDependsCount = 0x56; // uint16
            public const nint m_nRopeCount = 0x58; // uint16
            public const nint m_Ropes = 0x60; // CUtlVector<uint16>
            public const nint m_NodeBases = 0x78; // CUtlVector<FeNodeBase_t>
            public const nint m_SimdNodeBases = 0x90; // CUtlVector<FeSimdNodeBase_t>
            public const nint m_Quads = 0xA8; // CUtlVector<FeQuad_t>
            public const nint m_SimdQuads = 0xC0; // CUtlVector<FeSimdQuad_t>
            public const nint m_SimdTris = 0xD8; // CUtlVector<FeSimdTri_t>
            public const nint m_SimdRods = 0xF0; // CUtlVector<FeSimdRodConstraint_t>
            public const nint m_SimdRodsAnim = 0x108; // CUtlVector<FeSimdRodConstraintAnim_t>
            public const nint m_InitPose = 0x120; // CUtlVector<CTransform>
            public const nint m_Rods = 0x138; // CUtlVector<FeRodConstraint_t>
            public const nint m_Twists = 0x150; // CUtlVector<FeTwistConstraint_t>
            public const nint m_HingeLimits = 0x168; // CUtlVector<FeHingeLimit_t>
            public const nint m_AntiTunnelProbes = 0x180; // CUtlVector<FeAntiTunnelProbe_t>
            public const nint m_AntiTunnelTargetNodes = 0x198; // CUtlVector<uint16>
            public const nint m_AxialEdges = 0x1B0; // CUtlVector<FeAxialEdgeBend_t>
            public const nint m_NodeInvMasses = 0x1C8; // CUtlVector<float32>
            public const nint m_CtrlOffsets = 0x1E0; // CUtlVector<FeCtrlOffset_t>
            public const nint m_CtrlOsOffsets = 0x1F8; // CUtlVector<FeCtrlOsOffset_t>
            public const nint m_FollowNodes = 0x210; // CUtlVector<FeFollowNode_t>
            public const nint m_CollisionPlanes = 0x228; // CUtlVector<FeCollisionPlane_t>
            public const nint m_NodeIntegrator = 0x240; // CUtlVector<FeNodeIntegrator_t>
            public const nint m_SpringIntegrator = 0x258; // CUtlVector<FeSpringIntegrator_t>
            public const nint m_SimdSpringIntegrator = 0x270; // CUtlVector<FeSimdSpringIntegrator_t>
            public const nint m_WorldCollisionParams = 0x288; // CUtlVector<FeWorldCollisionParams_t>
            public const nint m_LegacyStretchForce = 0x2A0; // CUtlVector<float32>
            public const nint m_NodeCollisionRadii = 0x2B8; // CUtlVector<float32>
            public const nint m_DynNodeFriction = 0x2D0; // CUtlVector<float32>
            public const nint m_LocalRotation = 0x2E8; // CUtlVector<float32>
            public const nint m_LocalForce = 0x300; // CUtlVector<float32>
            public const nint m_TaperedCapsuleStretches = 0x318; // CUtlVector<FeTaperedCapsuleStretch_t>
            public const nint m_TaperedCapsuleRigids = 0x330; // CUtlVector<FeTaperedCapsuleRigid_t>
            public const nint m_SphereRigids = 0x348; // CUtlVector<FeSphereRigid_t>
            public const nint m_WorldCollisionNodes = 0x360; // CUtlVector<uint16>
            public const nint m_TreeParents = 0x378; // CUtlVector<uint16>
            public const nint m_TreeCollisionMasks = 0x390; // CUtlVector<uint16>
            public const nint m_TreeChildren = 0x3A8; // CUtlVector<FeTreeChildren_t>
            public const nint m_FreeNodes = 0x3C0; // CUtlVector<uint16>
            public const nint m_FitMatrices = 0x3D8; // CUtlVector<FeFitMatrix_t>
            public const nint m_FitWeights = 0x3F0; // CUtlVector<FeFitWeight_t>
            public const nint m_ReverseOffsets = 0x408; // CUtlVector<FeNodeReverseOffset_t>
            public const nint m_AnimStrayRadii = 0x420; // CUtlVector<FeAnimStrayRadius_t>
            public const nint m_SimdAnimStrayRadii = 0x438; // CUtlVector<FeSimdAnimStrayRadius_t>
            public const nint m_KelagerBends = 0x450; // CUtlVector<FeKelagerBend2_t>
            public const nint m_CtrlSoftOffsets = 0x468; // CUtlVector<FeCtrlSoftOffset_t>
            public const nint m_JiggleBones = 0x480; // CUtlVector<CFeIndexedJiggleBone>
            public const nint m_SourceElems = 0x498; // CUtlVector<uint16>
            public const nint m_GoalDampedSpringIntegrators = 0x4B0; // CUtlVector<uint32>
            public const nint m_Tris = 0x4C8; // CUtlVector<FeTri_t>
            public const nint m_nTriCount1 = 0x4E0; // uint16
            public const nint m_nTriCount2 = 0x4E2; // uint16
            public const nint m_nReservedUint8 = 0x4E4; // uint8
            public const nint m_nExtraPressureIterations = 0x4E5; // uint8
            public const nint m_nExtraGoalIterations = 0x4E6; // uint8
            public const nint m_nExtraIterations = 0x4E7; // uint8
            public const nint m_SDFRigids = 0x4E8; // CUtlVector<FeSDFRigid_t>
            public const nint m_BoxRigids = 0x500; // 
            public const nint m_DynNodeVertexSet = 0x518; // 
            public const nint m_VertexSetNames = 0x530; // CUtlVector<uint32>
            public const nint m_RigidColliderPriorities = 0x548; // CUtlVector<FeRigidColliderIndices_t>
            public const nint m_MorphLayers = 0x560; // CUtlVector<FeMorphLayerDepr_t>
            public const nint m_MorphSetData = 0x578; // 
            public const nint m_VertexMaps = 0x590; // CUtlVector<FeVertexMapDesc_t>
            public const nint m_VertexMapValues = 0x5A8; // 
            public const nint m_Effects = 0x5C0; // CUtlVector<FeEffectDesc_t>
            public const nint m_LockToParent = 0x5D8; // CUtlVector<FeCtrlOffset_t>
            public const nint m_LockToGoal = 0x5F0; // CUtlVector<uint16>
            public const nint m_SkelParents = 0x608; // CUtlVector<int16>
            public const nint m_DynNodeWindBases = 0x620; // CUtlVector<FeNodeWindBase_t>
            public const nint m_flInternalPressure = 0x638; // float32
            public const nint m_flDefaultTimeDilation = 0x63C; // float32
            public const nint m_flWindage = 0x640; // float32
            public const nint m_flWindDrag = 0x644; // float32
            public const nint m_flDefaultSurfaceStretch = 0x648; // float32
            public const nint m_flDefaultThreadStretch = 0x64C; // float32
            public const nint m_flDefaultGravityScale = 0x650; // float32
            public const nint m_flDefaultVelAirDrag = 0x654; // float32
            public const nint m_flDefaultExpAirDrag = 0x658; // float32
            public const nint m_flDefaultVelQuadAirDrag = 0x65C; // float32
            public const nint m_flDefaultExpQuadAirDrag = 0x660; // float32
            public const nint m_flRodVelocitySmoothRate = 0x664; // float32
            public const nint m_flQuadVelocitySmoothRate = 0x668; // float32
            public const nint m_flAddWorldCollisionRadius = 0x66C; // float32
            public const nint m_flDefaultVolumetricSolveAmount = 0x670; // float32
            public const nint m_flMotionSmoothCDT = 0x674; // float32
            public const nint m_flLocalDrag1 = 0x678; // float32
            public const nint m_nRodVelocitySmoothIterations = 0x67C; // uint16
            public const nint m_nQuadVelocitySmoothIterations = 0x67E; // uint16
        }
        // Parent: RnBodyDesc_t
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class vphysics_save_cphysicsbody_t {
            public const nint m_nOldPointer = 0xD0; // uint64
        }
        // Parent: FeBoxRigid_t
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeBuildBoxRigid_t {
            public const nint m_nPriority = 0x40; // int32
            public const nint m_nVertexMapHash = 0x44; // uint32
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CFeIndexedJiggleBone {
            public const nint m_nNode = 0x0; // uint32
            public const nint m_nJiggleParent = 0x4; // uint32
            public const nint m_jiggleBone = 0x8; // CFeJiggleBone
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeBandBendLimit_t {
            public const nint flDistMin = 0x0; // float32
            public const nint flDistMax = 0x4; // float32
            public const nint nNode = 0x8; // uint16[6]
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeTaperedCapsuleStretch_t {
            public const nint nNode = 0x0; // uint16[2]
            public const nint nCollisionMask = 0x4; // uint16
            public const nint nDummy = 0x6; // uint16
            public const nint flRadius = 0x8; // 
        }
        // Parent: None
        // Field count: 4
        public static class constraint_axislimit_t {
            public const nint flMinRotation = 0x0; // float32
            public const nint flMaxRotation = 0x4; // float32
            public const nint flMotorTargetAngSpeed = 0x8; // float32
            public const nint flMotorMaxTorque = 0xC; // float32
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeSimdRodConstraintAnim_t {
            public const nint nNode = 0x0; // uint16[4][2]
            public const nint f4Weight0 = 0x10; // fltx4
            public const nint f4RelaxationFactor = 0x20; // fltx4
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeSimdRodConstraint_t {
            public const nint nNode = 0x0; // uint16[4][2]
            public const nint f4MaxDist = 0x10; // fltx4
            public const nint f4MinDist = 0x20; // fltx4
            public const nint f4Weight0 = 0x30; // fltx4
            public const nint f4RelaxationFactor = 0x40; // fltx4
        }
        // Parent: None
        // Field count: 4
        public static class constraint_hingeparams_t {
            public const nint worldPosition = 0x0; // Vector
            public const nint worldAxisDirection = 0xC; // Vector
            public const nint hingeAxis = 0x18; // constraint_axislimit_t
            public const nint constraint = 0x28; // constraint_breakableparams_t
        }
        // Parent: FeSphereRigid_t
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeBuildSphereRigid_t {
            public const nint m_nPriority = 0x20; // int32
            public const nint m_nVertexMapHash = 0x24; // uint32
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeSimdAnimStrayRadius_t {
            public const nint nNode = 0x0; // uint16[4][2]
            public const nint flMaxDist = 0x10; // fltx4
            public const nint flRelaxationFactor = 0x20; // fltx4
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnTriangle_t {
            public const nint m_nIndex = 0x0; // int32[3]
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeProxyVertexMap_t {
            public const nint m_Name = 0x0; // CUtlString
            public const nint m_flWeight = 0x8; // float32
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeNodeIntegrator_t {
            public const nint flPointDamping = 0x0; // float32
            public const nint flAnimationForceAttraction = 0x4; // float32
            public const nint flAnimationVertexAttraction = 0x8; // float32
            public const nint flGravity = 0xC; // float32
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnCapsule_t {
            public const nint m_vCenter = 0x0; // Vector[2]
            public const nint m_flRadius = 0x18; // float32
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CFeNamedJiggleBone {
            public const nint m_strParentBone = 0x0; // CUtlString
            public const nint m_transform = 0x10; // CTransform
            public const nint m_nJiggleParent = 0x30; // uint32
            public const nint m_jiggleBone = 0x34; // CFeJiggleBone
        }
        // Parent: None
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeAntiTunnelProbeBuild_t {
            public const nint flWeight = 0x0; // float32
            public const nint flActivationDistance = 0x4; // float32
            public const nint flBias = 0x8; // float32
            public const nint flCurvature = 0xC; // float32
            public const nint nFlags = 0x10; // uint32
            public const nint nProbeNode = 0x14; // uint16
            public const nint targetNodes = 0x18; // CUtlVector<uint16>
        }
        // Parent: None
        // Field count: 35
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnBodyDesc_t {
            public const nint m_sDebugName = 0x0; // CUtlString
            public const nint m_vPosition = 0x8; // Vector
            public const nint m_qOrientation = 0x14; // QuaternionStorage
            public const nint m_vLinearVelocity = 0x24; // Vector
            public const nint m_vAngularVelocity = 0x30; // Vector
            public const nint m_vLocalMassCenter = 0x3C; // Vector
            public const nint m_LocalInertiaInv = 0x48; // Vector[3]
            public const nint m_flMassInv = 0x6C; // float32
            public const nint m_flGameMass = 0x70; // float32
            public const nint m_flInertiaScaleInv = 0x74; // float32
            public const nint m_flLinearDamping = 0x78; // float32
            public const nint m_flAngularDamping = 0x7C; // float32
            public const nint m_flLinearDrag = 0x80; // float32
            public const nint m_flAngularDrag = 0x84; // float32
            public const nint m_flLinearBuoyancyDrag = 0x88; // float32
            public const nint m_flAngularBuoyancyDrag = 0x8C; // float32
            public const nint m_vLastAwakeForceAccum = 0x90; // Vector
            public const nint m_vLastAwakeTorqueAccum = 0x9C; // Vector
            public const nint m_flBuoyancyFactor = 0xA8; // float32
            public const nint m_flGravityScale = 0xAC; // float32
            public const nint m_flTimeScale = 0xB0; // float32
            public const nint m_nBodyType = 0xB4; // int32
            public const nint m_nGameIndex = 0xB8; // uint32
            public const nint m_nGameFlags = 0xBC; // uint32
            public const nint m_nMinVelocityIterations = 0xC0; // int8
            public const nint m_nMinPositionIterations = 0xC1; // int8
            public const nint m_nMassPriority = 0xC2; // int8
            public const nint m_bEnabled = 0xC3; // bool
            public const nint m_bSleeping = 0xC4; // bool
            public const nint m_bIsContinuousEnabled = 0xC5; // bool
            public const nint m_bDragEnabled = 0xC6; // bool
            public const nint m_bBuoyancyDragEnabled = 0xC7; // bool
            public const nint m_bGravityDisabled = 0xC8; // bool
            public const nint m_bSpeculativeEnabled = 0xC9; // bool
            public const nint m_bHasShadowController = 0xCA; // bool
        }
        // Parent: None
        // Field count: 12
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class OldFeEdge_t {
            public const nint m_flK = 0x0; // float32[3]
            public const nint invA = 0xC; // float32
            public const nint t = 0x10; // float32
            public const nint flThetaRelaxed = 0x14; // float32
            public const nint flThetaFactor = 0x18; // float32
            public const nint c01 = 0x1C; // float32
            public const nint c02 = 0x20; // float32
            public const nint c03 = 0x24; // float32
            public const nint c04 = 0x28; // float32
            public const nint flAxialModelDist = 0x2C; // float32
            public const nint flAxialModelWeights = 0x30; // float32[4]
            public const nint m_nNode = 0x40; // uint16[4]
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeFollowNode_t {
            public const nint nParentNode = 0x0; // uint16
            public const nint nChildNode = 0x2; // uint16
            public const nint flWeight = 0x4; // float32
        }
        // Parent: None
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnMesh_t {
            public const nint m_vMin = 0x0; // Vector
            public const nint m_vMax = 0xC; // Vector
            public const nint m_Nodes = 0x18; // CUtlVector<RnNode_t>
            public const nint m_Vertices = 0x30; // CUtlVectorSIMDPaddedVector
            public const nint m_Triangles = 0x48; // CUtlVector<RnTriangle_t>
            public const nint m_Wings = 0x60; // CUtlVector<RnWing_t>
            public const nint m_Materials = 0x78; // 
            public const nint m_vOrthographicAreas = 0x90; // Vector
            public const nint m_nFlags = 0x9C; // uint32
            public const nint m_nDebugFlags = 0xA0; // uint32
        }
        // Parent: None
        // Field count: 2
        public static class VertexPositionNormal_t {
            public const nint m_vPosition = 0x0; // Vector
            public const nint m_vNormal = 0xC; // Vector
        }
        // Parent: FeSDFRigid_t
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeBuildSDFRigid_t {
            public const nint m_nPriority = 0x50; // int32
            public const nint m_nVertexMapHash = 0x54; // uint32
        }
        // Parent: None
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnBlendVertex_t {
            public const nint m_nWeight0 = 0x0; // uint16
            public const nint m_nIndex0 = 0x2; // uint16
            public const nint m_nWeight1 = 0x4; // uint16
            public const nint m_nIndex1 = 0x6; // uint16
            public const nint m_nWeight2 = 0x8; // uint16
            public const nint m_nIndex2 = 0xA; // uint16
            public const nint m_nFlags = 0xC; // uint16
            public const nint m_nTargetIndex = 0xE; // uint16
        }
        // Parent: None
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CFeMorphLayer {
            public const nint m_Name = 0x0; // CUtlString
            public const nint m_nNameHash = 0x8; // uint32
            public const nint m_Nodes = 0x10; // CUtlVector<uint16>
            public const nint m_InitPos = 0x28; // CUtlVector<Vector>
            public const nint m_Gravity = 0x40; // CUtlVector<float32>
            public const nint m_GoalStrength = 0x58; // CUtlVector<float32>
            public const nint m_GoalDamping = 0x70; // CUtlVector<float32>
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeCtrlSoftOffset_t {
            public const nint nCtrlParent = 0x0; // uint16
            public const nint nCtrlChild = 0x2; // uint16
            public const nint vOffset = 0x4; // Vector
            public const nint flAlpha = 0x10; // float32
        }
        // Parent: None
        // Field count: 12
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeVertexMapDesc_t {
            public const nint sName = 0x0; // CUtlString
            public const nint nNameHash = 0x8; // uint32
            public const nint nColor = 0xC; // uint32
            public const nint nFlags = 0x10; // uint32
            public const nint nVertexBase = 0x14; // uint16
            public const nint nVertexCount = 0x16; // uint16
            public const nint nMapOffset = 0x18; // uint32
            public const nint nNodeListOffset = 0x1C; // uint32
            public const nint vCenterOfMass = 0x20; // Vector
            public const nint flVolumetricSolveStrength = 0x2C; // float32
            public const nint nScaleSourceNode = 0x30; // int16
            public const nint nNodeListCount = 0x32; // uint16
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeTaperedCapsuleRigid_t {
            public const nint vSphere = 0x0; // fltx4[2]
            public const nint nNode = 0x20; // uint16
            public const nint nCollisionMask = 0x22; // uint16
            public const nint nVertexMapIndex = 0x24; // uint16
            public const nint nFlags = 0x26; // uint16
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeAnimStrayRadius_t {
            public const nint nNode = 0x0; // uint16[2]
            public const nint flMaxDist = 0x4; // float32
            public const nint flRelaxationFactor = 0x8; // float32
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeEdgeDesc_t {
            public const nint nEdge = 0x0; // uint16[2]
            public const nint nSide = 0x4; // uint16[2][2]
            public const nint nVirtElem = 0xC; // uint16[2]
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeNodeReverseOffset_t {
            public const nint vOffset = 0x0; // Vector
            public const nint nBoneCtrl = 0xC; // uint16
            public const nint nTargetNode = 0xE; // uint16
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnPlane_t {
            public const nint m_vNormal = 0x0; // Vector
            public const nint m_flOffset = 0xC; // float32
        }
        // Parent: None
        // Field count: 11
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeSDFRigid_t {
            public const nint vLocalMin = 0x0; // Vector
            public const nint vLocalMax = 0xC; // Vector
            public const nint flBounciness = 0x18; // float32
            public const nint nNode = 0x1C; // uint16
            public const nint nCollisionMask = 0x1E; // uint16
            public const nint nVertexMapIndex = 0x20; // uint16
            public const nint nFlags = 0x22; // uint16
            public const nint m_Distances = 0x28; // CUtlVector<float32>
            public const nint m_nWidth = 0x40; // int32
            public const nint m_nHeight = 0x44; // int32
            public const nint m_nDepth = 0x48; // int32
        }
        // Parent: None
        // Field count: 35
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CFeJiggleBone {
            public const nint m_nFlags = 0x0; // uint32
            public const nint m_flLength = 0x4; // float32
            public const nint m_flTipMass = 0x8; // float32
            public const nint m_flYawStiffness = 0xC; // float32
            public const nint m_flYawDamping = 0x10; // float32
            public const nint m_flPitchStiffness = 0x14; // float32
            public const nint m_flPitchDamping = 0x18; // float32
            public const nint m_flAlongStiffness = 0x1C; // float32
            public const nint m_flAlongDamping = 0x20; // float32
            public const nint m_flAngleLimit = 0x24; // float32
            public const nint m_flMinYaw = 0x28; // float32
            public const nint m_flMaxYaw = 0x2C; // float32
            public const nint m_flYawFriction = 0x30; // float32
            public const nint m_flYawBounce = 0x34; // float32
            public const nint m_flMinPitch = 0x38; // float32
            public const nint m_flMaxPitch = 0x3C; // float32
            public const nint m_flPitchFriction = 0x40; // float32
            public const nint m_flPitchBounce = 0x44; // float32
            public const nint m_flBaseMass = 0x48; // float32
            public const nint m_flBaseStiffness = 0x4C; // float32
            public const nint m_flBaseDamping = 0x50; // float32
            public const nint m_flBaseMinLeft = 0x54; // float32
            public const nint m_flBaseMaxLeft = 0x58; // float32
            public const nint m_flBaseLeftFriction = 0x5C; // float32
            public const nint m_flBaseMinUp = 0x60; // float32
            public const nint m_flBaseMaxUp = 0x64; // float32
            public const nint m_flBaseUpFriction = 0x68; // float32
            public const nint m_flBaseMinForward = 0x6C; // float32
            public const nint m_flBaseMaxForward = 0x70; // float32
            public const nint m_flBaseForwardFriction = 0x74; // float32
            public const nint m_flRadius0 = 0x78; // float32
            public const nint m_flRadius1 = 0x7C; // float32
            public const nint m_vPoint0 = 0x80; // Vector
            public const nint m_vPoint1 = 0x8C; // Vector
            public const nint m_nCollisionMask = 0x98; // uint16
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CRegionSVM {
            public const nint m_Planes = 0x0; // CUtlVector<RnPlane_t>
            public const nint m_Nodes = 0x18; // CUtlVector<uint32>
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeWorldCollisionParams_t {
            public const nint flWorldFriction = 0x0; // float32
            public const nint flGroundFriction = 0x4; // float32
            public const nint nListBegin = 0x8; // uint16
            public const nint nListEnd = 0xA; // uint16
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnNode_t {
            public const nint m_vMin = 0x0; // Vector
            public const nint m_nChildren = 0xC; // uint32
            public const nint m_vMax = 0x10; // Vector
            public const nint m_nTriangleOffset = 0x1C; // uint32
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeFitMatrix_t {
            public const nint bone = 0x0; // CTransform
            public const nint vCenter = 0x20; // Vector
            public const nint nEnd = 0x2C; // uint16
            public const nint nNode = 0x2E; // uint16
            public const nint nBeginDynamic = 0x30; // uint16
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeSimdQuad_t {
            public const nint nNode = 0x0; // uint16[4][4]
            public const nint f4Slack = 0x20; // fltx4
            public const nint vShape = 0x30; // FourVectors[4]
            public const nint f4Weights = 0xF0; // fltx4[4]
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeSimdSpringIntegrator_t {
            public const nint nNode = 0x0; // uint16[4][2]
            public const nint flSpringRestLength = 0x10; // fltx4
            public const nint flSpringConstant = 0x20; // fltx4
            public const nint flSpringDamping = 0x30; // fltx4
            public const nint flNodeWeight0 = 0x40; // fltx4
        }
        // Parent: None
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeSimdNodeBase_t {
            public const nint nNode = 0x0; // uint16[4]
            public const nint nNodeX0 = 0x8; // uint16[4]
            public const nint nNodeX1 = 0x10; // uint16[4]
            public const nint nNodeY0 = 0x18; // uint16[4]
            public const nint nNodeY1 = 0x20; // uint16[4]
            public const nint nDummy = 0x28; // uint16[4]
            public const nint qAdjust = 0x30; // FourQuaternions
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeQuad_t {
            public const nint nNode = 0x0; // uint16[4]
            public const nint flSlack = 0x8; // float32
            public const nint vShape = 0xC; // Vector4D[4]
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeHingeLimit_t {
            public const nint nNode = 0x0; // uint16[6]
            public const nint nFlags = 0xC; // uint32
            public const nint flWeight4 = 0x10; // float32
            public const nint flWeight5 = 0x14; // float32
            public const nint flAngleCenter = 0x18; // float32
            public const nint flAngleExtents = 0x1C; // float32
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnWing_t {
            public const nint m_nIndex = 0x0; // int32[3]
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeWeightedNode_t {
            public const nint nNode = 0x0; // uint16
            public const nint nWeight = 0x2; // uint16
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeEffectDesc_t {
            public const nint sName = 0x0; // CUtlString
            public const nint nNameHash = 0x8; // uint32
            public const nint nType = 0xC; // int32
            public const nint m_Params = 0x10; // KeyValues3
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeSpringIntegrator_t {
            public const nint nNode = 0x0; // uint16[2]
            public const nint flSpringRestLength = 0x4; // float32
            public const nint flSpringConstant = 0x8; // float32
            public const nint flSpringDamping = 0xC; // float32
            public const nint flNodeWeight0 = 0x10; // float32
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FourVectors2D {
            public const nint x = 0x0; // fltx4
            public const nint y = 0x10; // fltx4
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeKelagerBend2_t {
            public const nint flWeight = 0x0; // float32[3]
            public const nint flHeight0 = 0xC; // float32
            public const nint nNode = 0x10; // uint16[3]
            public const nint nReserved = 0x16; // uint16
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CastSphereSATParams_t {
            public const nint m_vRayStart = 0x0; // Vector
            public const nint m_vRayDelta = 0xC; // Vector
            public const nint m_flRadius = 0x18; // float32
            public const nint m_flMaxFraction = 0x1C; // float32
            public const nint m_flScale = 0x20; // float32
            public const nint m_pHull = 0x28; // RnHull_t*
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeRigidColliderIndices_t {
            public const nint m_nTaperedCapsuleRigidIndex = 0x0; // uint16
            public const nint m_nSphereRigidIndex = 0x2; // uint16
            public const nint m_nBoxRigidIndex = 0x4; // uint16
            public const nint m_nSDFRigidIndex = 0x6; // uint16
            public const nint m_nCollisionPlaneIndex = 0x8; // uint16
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeCollisionPlane_t {
            public const nint nCtrlParent = 0x0; // uint16
            public const nint nChildNode = 0x2; // uint16
            public const nint m_Plane = 0x4; // RnPlane_t
            public const nint flStrength = 0x14; // float32
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeStiffHingeBuild_t {
            public const nint flMaxAngle = 0x0; // float32
            public const nint flStrength = 0x4; // float32
            public const nint flMotionBias = 0x8; // float32[3]
            public const nint nNode = 0x14; // uint16[3]
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeBoxRigid_t {
            public const nint tmFrame2 = 0x0; // CTransform
            public const nint nNode = 0x20; // uint16
            public const nint nCollisionMask = 0x22; // uint16
            public const nint vSize = 0x24; // Vector
            public const nint nVertexMapIndex = 0x30; // uint16
            public const nint nFlags = 0x32; // uint16
        }
        // Parent: None
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeMorphLayerDepr_t {
            public const nint m_Name = 0x0; // CUtlString
            public const nint m_nNameHash = 0x8; // uint32
            public const nint m_Nodes = 0x10; // CUtlVector<uint16>
            public const nint m_InitPos = 0x28; // CUtlVector<Vector>
            public const nint m_Gravity = 0x40; // CUtlVector<float32>
            public const nint m_GoalStrength = 0x58; // CUtlVector<float32>
            public const nint m_GoalDamping = 0x70; // CUtlVector<float32>
            public const nint m_nFlags = 0x88; // uint32
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeCtrlOffset_t {
            public const nint vOffset = 0x0; // Vector
            public const nint nCtrlParent = 0xC; // uint16
            public const nint nCtrlChild = 0xE; // uint16
        }
        // Parent: None
        // Field count: 0
        public static class IPhysicsPlayerController {
        }
        // Parent: None
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeNodeBase_t {
            public const nint nNode = 0x0; // uint16
            public const nint nDummy = 0x2; // uint16[3]
            public const nint nNodeX0 = 0x8; // uint16
            public const nint nNodeX1 = 0xA; // uint16
            public const nint nNodeY0 = 0xC; // uint16
            public const nint nNodeY1 = 0xE; // uint16
            public const nint qAdjust = 0x10; // QuaternionStorage
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeVertexMapBuild_t {
            public const nint m_VertexMapName = 0x0; // CUtlString
            public const nint m_nNameHash = 0x8; // uint32
            public const nint m_Color = 0xC; // Color
            public const nint m_flVolumetricSolveStrength = 0x10; // float32
            public const nint m_nScaleSourceNode = 0x14; // int32
            public const nint m_Weights = 0x18; // CUtlVector<float32>
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CFeVertexMapBuildArray {
            public const nint m_Array = 0x0; // CUtlVector<FeVertexMapBuild_t*>
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeTri_t {
            public const nint nNode = 0x0; // uint16[3]
            public const nint w1 = 0x8; // float32
            public const nint w2 = 0xC; // float32
            public const nint v1x = 0x10; // float32
            public const nint v2 = 0x14; // Vector2D
        }
        // Parent: None
        // Field count: 14
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnHull_t {
            public const nint m_vCentroid = 0x0; // Vector
            public const nint m_flMaxAngularRadius = 0xC; // float32
            public const nint m_Bounds = 0x10; // AABB_t
            public const nint m_vOrthographicAreas = 0x28; // Vector
            public const nint m_MassProperties = 0x34; // matrix3x4_t
            public const nint m_flVolume = 0x64; // float32
            public const nint m_flSurfaceArea = 0x68; // float32
            public const nint m_Vertices = 0x70; // CUtlVector<RnVertex_t>
            public const nint m_VertexPositions = 0x88; // CUtlVector<Vector>
            public const nint m_Edges = 0xA0; // CUtlVector<RnHalfEdge_t>
            public const nint m_Faces = 0xB8; // CUtlVector<RnFace_t>
            public const nint m_FacePlanes = 0xD0; // CUtlVector<RnPlane_t>
            public const nint m_nFlags = 0xE8; // uint32
            public const nint m_pRegionSVM = 0xF0; // CRegionSVM*
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CovMatrix3 {
            public const nint m_vDiag = 0x0; // Vector
            public const nint m_flXY = 0xC; // float32
            public const nint m_flXZ = 0x10; // float32
            public const nint m_flYZ = 0x14; // float32
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnVertex_t {
            public const nint m_nEdge = 0x0; // uint8
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class Dop26_t {
            public const nint m_flSupport = 0x0; // float32[26]
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnFace_t {
            public const nint m_nEdge = 0x0; // uint8
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeCtrlOsOffset_t {
            public const nint nCtrlParent = 0x0; // uint16
            public const nint nCtrlChild = 0x2; // uint16
        }
        // Parent: None
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeAntiTunnelProbe_t {
            public const nint flWeight = 0x0; // float32
            public const nint nFlags = 0x4; // uint32
            public const nint nProbeNode = 0x8; // uint16
            public const nint nCount = 0xA; // uint16
            public const nint nBegin = 0xC; // uint32
            public const nint flActivationDistance = 0x10; // float32
            public const nint flCurvatureRadius = 0x14; // float32
            public const nint flBias = 0x18; // float32
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeSourceEdge_t {
            public const nint nNode = 0x0; // uint16[2]
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeTwistConstraint_t {
            public const nint nNodeOrient = 0x0; // uint16
            public const nint nNodeEnd = 0x2; // uint16
            public const nint flTwistRelax = 0x4; // float32
            public const nint flSwingRelax = 0x8; // float32
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeNodeWindBase_t {
            public const nint nNodeX0 = 0x0; // uint16
            public const nint nNodeX1 = 0x2; // uint16
            public const nint nNodeY0 = 0x4; // uint16
            public const nint nNodeY1 = 0x6; // uint16
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeAxialEdgeBend_t {
            public const nint te = 0x0; // float32
            public const nint tv = 0x4; // float32
            public const nint flDist = 0x8; // float32
            public const nint flWeight = 0xC; // float32[4]
            public const nint nNode = 0x1C; // uint16[6]
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FourCovMatrices3 {
            public const nint m_vDiag = 0x0; // FourVectors
            public const nint m_flXY = 0x30; // fltx4
            public const nint m_flXZ = 0x40; // fltx4
            public const nint m_flYZ = 0x50; // fltx4
        }
        // Parent: None
        // Field count: 5
        public static class constraint_breakableparams_t {
            public const nint strength = 0x0; // float32
            public const nint forceLimit = 0x4; // float32
            public const nint torqueLimit = 0x8; // float32
            public const nint bodyMassScale = 0xC; // 
            public const nint isActive = 0x14; // bool
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeSphereRigid_t {
            public const nint vSphere = 0x0; // fltx4
            public const nint nNode = 0x10; // uint16
            public const nint nCollisionMask = 0x12; // uint16
            public const nint nVertexMapIndex = 0x14; // uint16
            public const nint nFlags = 0x16; // uint16
        }
        // Parent: FeTaperedCapsuleRigid_t
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeBuildTaperedCapsuleRigid_t {
            public const nint m_nPriority = 0x30; // int32
            public const nint m_nVertexMapHash = 0x34; // uint32
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeSoftParent_t {
            public const nint nParent = 0x0; // int32
            public const nint flAlpha = 0x4; // float32
        }
        // Parent: None
        // Field count: 6
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnShapeDesc_t {
            public const nint m_nCollisionAttributeIndex = 0x0; // uint32
            public const nint m_nSurfacePropertyIndex = 0x4; // uint32
            public const nint m_UserFriendlyName = 0x8; // CUtlString
            public const nint m_bUserFriendlyNameSealed = 0x10; // bool
            public const nint m_bUserFriendlyNameLong = 0x11; // bool
            public const nint m_nToolMaterialHash = 0x14; // uint32
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeTreeChildren_t {
            public const nint nChild = 0x0; // uint16[2]
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeRodConstraint_t {
            public const nint nNode = 0x0; // uint16[2]
            public const nint flMaxDist = 0x4; // float32
            public const nint flMinDist = 0x8; // float32
            public const nint flWeight0 = 0xC; // float32
            public const nint flRelaxationFactor = 0x10; // float32
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeFitWeight_t {
            public const nint flWeight = 0x0; // float32
            public const nint nNode = 0x4; // uint16
            public const nint nDummy = 0x6; // uint16
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class RnHalfEdge_t {
            public const nint m_nNext = 0x0; // uint8
            public const nint m_nTwin = 0x1; // uint8
            public const nint m_nOrigin = 0x2; // uint8
            public const nint m_nFace = 0x3; // uint8
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeSimdTri_t {
            public const nint nNode = 0x0; // uint32[4][3]
            public const nint w1 = 0x30; // fltx4
            public const nint w2 = 0x40; // fltx4
            public const nint v1x = 0x50; // fltx4
            public const nint v2 = 0x60; // FourVectors2D
        }
        // Parent: None
        // Field count: 1
        public static class VertexPositionColor_t {
            public const nint m_vPosition = 0x0; // Vector
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeFitInfluence_t {
            public const nint nVertexNode = 0x0; // uint32
            public const nint flWeight = 0x4; // float32
            public const nint nMatrixNode = 0x8; // uint32
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class FeHingeLimitBuild_t {
            public const nint nNode = 0x0; // uint16[6]
            public const nint nFlags = 0xC; // uint32
            public const nint flLimitCW = 0x10; // float32
            public const nint flLimitCCW = 0x14; // float32
        }
    }
}


// Generated using https://github.com/a2x/cs2-dumper
// 2025-02-23 21:31:54.101826500 UTC

namespace CS2Dumper.Schemas {
    // Module: worldrenderer.dll
    // Class count: 23
    // Enum count: 1
    public static class WorldrendererDll {
        // Alignment: 4
        // Member count: 15
        public enum ObjectTypeFlags_t : uint {
            OBJECT_TYPE_NONE = 0x0,
            OBJECT_TYPE_MODEL = 0x8,
            OBJECT_TYPE_BLOCK_LIGHT = 0x10,
            OBJECT_TYPE_NO_SHADOWS = 0x20,
            OBJECT_TYPE_WORLDSPACE_TEXURE_BLEND = 0x40,
            OBJECT_TYPE_DISABLED_IN_LOW_QUALITY = 0x80,
            OBJECT_TYPE_NO_SUN_SHADOWS = 0x100,
            OBJECT_TYPE_RENDER_WITH_DYNAMIC = 0x200,
            OBJECT_TYPE_RENDER_TO_CUBEMAPS = 0x400,
            OBJECT_TYPE_MODEL_HAS_LODS = 0x800,
            OBJECT_TYPE_OVERLAY = 0x2000,
            OBJECT_TYPE_PRECOMPUTED_VISMEMBERS = 0x4000,
            OBJECT_TYPE_STATIC_CUBE_MAP = 0x8000,
            OBJECT_TYPE_DISABLE_VIS_CULLING = 0x10000,
            OBJECT_TYPE_BAKED_GEOMETRY = 0x20000
        }
        // Parent: None
        // Field count: 14
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class SceneObject_t {
            public const nint m_nObjectID = 0x0; // uint32
            public const nint m_vTransform = 0x4; // Vector4D[3]
            public const nint m_flFadeStartDistance = 0x34; // float32
            public const nint m_flFadeEndDistance = 0x38; // float32
            public const nint m_vTintColor = 0x3C; // Vector4D
            public const nint m_skin = 0x50; // CUtlString
            public const nint m_nObjectTypeFlags = 0x58; // ObjectTypeFlags_t
            public const nint m_vLightingOrigin = 0x5C; // Vector
            public const nint m_nOverlayRenderOrder = 0x68; // int16
            public const nint m_nLODOverride = 0x6A; // int16
            public const nint m_nCubeMapPrecomputedHandshake = 0x6C; // int32
            public const nint m_nLightProbeVolumePrecomputedHandshake = 0x70; // int32
            public const nint m_renderableModel = 0x78; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_renderable = 0x80; // CStrongHandle<InfoForResourceTypeCRenderMesh>
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class AggregateLODSetup_t {
            public const nint m_vLODOrigin = 0x0; // Vector
            public const nint m_fMaxObjectScale = 0xC; // float32
            public const nint m_fSwitchDistances = 0x10; // CUtlVector<float32>
        }
        // Parent: BaseSceneObjectOverride_t
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ExtraVertexStreamOverride_t {
            public const nint m_nSubSceneObject = 0x4; // uint32
            public const nint m_nDrawCallIndex = 0x8; // uint32
            public const nint m_nAdditionalMeshDrawPrimitiveFlags = 0xC; // MeshDrawPrimitiveFlags_t
            public const nint m_extraBufferBinding = 0x10; // 
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ClutterTile_t {
            public const nint m_nFirstInstance = 0x0; // uint32
            public const nint m_nLastInstance = 0x4; // uint32
            public const nint m_BoundsWs = 0x8; // AABB_t
        }
        // Parent: None
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class AggregateSceneObject_t {
            public const nint m_allFlags = 0x0; // ObjectTypeFlags_t
            public const nint m_anyFlags = 0x4; // ObjectTypeFlags_t
            public const nint m_nLayer = 0x8; // int16
            public const nint m_aggregateMeshes = 0x10; // CUtlVector<AggregateMeshInfo_t>
            public const nint m_lodSetups = 0x28; // CUtlVector<AggregateLODSetup_t>
            public const nint m_visClusterMembership = 0x40; // CUtlVector<uint16>
            public const nint m_fragmentTransforms = 0x58; // CUtlVector<matrix3x4_t>
            public const nint m_renderableModel = 0x70; // CStrongHandle<InfoForResourceTypeCModel>
        }
        // Parent: None
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class NodeData_t {
            public const nint m_nParent = 0x0; // int32
            public const nint m_vOrigin = 0x4; // Vector
            public const nint m_vMinBounds = 0x10; // Vector
            public const nint m_vMaxBounds = 0x1C; // Vector
            public const nint m_flMinimumDistance = 0x28; // float32
            public const nint m_ChildNodeIndices = 0x30; // CUtlVector<int32>
            public const nint m_worldNodePrefix = 0x48; // CUtlString
        }
        // Parent: None
        // Field count: 0
        public static class VMapResourceData_t {
        }
        // Parent: None
        // Field count: 8
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class ClutterSceneObject_t {
            public const nint m_Bounds = 0x0; // AABB_t
            public const nint m_flags = 0x18; // ObjectTypeFlags_t
            public const nint m_nLayer = 0x1C; // int16
            public const nint m_instancePositions = 0x20; // CUtlVector<Vector>
            public const nint m_instanceScales = 0x50; // CUtlVector<float32>
            public const nint m_instanceTintSrgb = 0x68; // CUtlVector<Color>
            public const nint m_tiles = 0x80; // CUtlVector<ClutterTile_t>
            public const nint m_renderableModel = 0x98; // CStrongHandle<InfoForResourceTypeCModel>
        }
        // Parent: None
        // Field count: 5
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class WorldBuilderParams_t {
            public const nint m_flMinDrawVolumeSize = 0x0; // float32
            public const nint m_bBuildBakedLighting = 0x4; // bool
            public const nint m_bakedLightingInfo = 0x8; // BakedLightingInfo_t
            public const nint m_nCompileTimestamp = 0x38; // uint64
            public const nint m_nCompileFingerprint = 0x40; // uint64
        }
        // Parent: None
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class PermEntityLumpData_t {
            public const nint m_name = 0x8; // CUtlString
            public const nint m_childLumps = 0x10; // CUtlVector<CStrongHandleCopyable<InfoForResourceTypeCEntityLump>>
            public const nint m_entityKeyValues = 0x28; // CUtlLeanVector<EntityKeyValueData_t>
        }
        // Parent: None
        // Field count: 14
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class WorldNode_t {
            public const nint m_sceneObjects = 0x0; // CUtlVector<SceneObject_t>
            public const nint m_infoOverlays = 0x18; // CUtlVector<InfoOverlayData_t>
            public const nint m_visClusterMembership = 0x30; // CUtlVector<uint16>
            public const nint m_aggregateSceneObjects = 0x48; // CUtlVector<AggregateSceneObject_t>
            public const nint m_clutterSceneObjects = 0x60; // CUtlVector<ClutterSceneObject_t>
            public const nint m_extraVertexStreamOverrides = 0x78; // CUtlVector<ExtraVertexStreamOverride_t>
            public const nint m_materialOverrides = 0x90; // CUtlVector<MaterialOverride_t>
            public const nint m_extraVertexStreams = 0xA8; // CUtlVector<WorldNodeOnDiskBufferData_t>
            public const nint m_layerNames = 0xC0; // CUtlVector<CUtlString>
            public const nint m_sceneObjectLayerIndices = 0xD8; // CUtlVector<uint8>
            public const nint m_overlayLayerIndices = 0xF0; // CUtlVector<uint8>
            public const nint m_grassFileName = 0x108; // CUtlString
            public const nint m_nodeLightingInfo = 0x110; // BakedLightingInfo_t
            public const nint m_bHasBakedGeometryFlag = 0x140; // bool
        }
        // Parent: None
        // Field count: 1
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class BaseSceneObjectOverride_t {
            public const nint m_nSceneObjectIndex = 0x0; // uint32
        }
        // Parent: None
        // Field count: 7
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class EntityIOConnectionData_t {
            public const nint m_outputName = 0x0; // CUtlString
            public const nint m_targetType = 0x8; // uint32
            public const nint m_targetName = 0x10; // CUtlString
            public const nint m_inputName = 0x18; // CUtlString
            public const nint m_overrideParam = 0x20; // CUtlString
            public const nint m_flDelay = 0x28; // float32
            public const nint m_nTimesToFire = 0x2C; // int32
        }
        // Parent: None
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class BakedLightingInfo_t {
            public const nint m_nLightmapVersionNumber = 0x0; // uint32
            public const nint m_nLightmapGameVersionNumber = 0x4; // uint32
            public const nint m_vLightmapUvScale = 0x8; // Vector2D
            public const nint m_bHasLightmaps = 0x10; // bool
            public const nint m_bBakedShadowsGamma20 = 0x11; // bool
            public const nint m_bCompressionEnabled = 0x12; // bool
            public const nint m_nChartPackIterations = 0x13; // uint8
            public const nint m_nVradQuality = 0x14; // uint8
            public const nint m_lightMaps = 0x18; // CUtlVector<CStrongHandle<InfoForResourceTypeCTextureBase>>
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class VoxelVisBlockOffset_t {
            public const nint m_nOffset = 0x0; // uint32
            public const nint m_nElementCount = 0x4; // uint32
        }
        // Parent: None
        // Field count: 0
        //
        // Metadata:
        // MResourceTypeForInfoType
        public static class InfoForResourceTypeVMapResourceData_t {
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class WorldNodeOnDiskBufferData_t {
            public const nint m_nElementCount = 0x0; // int32
            public const nint m_nElementSizeInBytes = 0x4; // int32
            public const nint m_inputLayoutFields = 0x8; // CUtlVector<RenderInputLayoutField_t>
            public const nint m_pData = 0x20; // CUtlVector<uint8>
        }
        // Parent: None
        // Field count: 9
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class AggregateMeshInfo_t {
            public const nint m_nVisClusterMemberOffset = 0x0; // uint32
            public const nint m_nVisClusterMemberCount = 0x4; // uint8
            public const nint m_bHasTransform = 0x5; // bool
            public const nint m_nDrawCallIndex = 0x6; // int16
            public const nint m_nLODSetupIndex = 0x8; // int16
            public const nint m_nLODGroupMask = 0xA; // uint8
            public const nint m_vTintColor = 0xB; // Color
            public const nint m_objectFlags = 0x10; // ObjectTypeFlags_t
            public const nint m_nLightProbeVolumePrecomputedHandshake = 0x14; // int32
        }
        // Parent: None
        // Field count: 4
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class World_t {
            public const nint m_builderParams = 0x0; // WorldBuilderParams_t
            public const nint m_worldNodes = 0x48; // CUtlVector<NodeData_t>
            public const nint m_worldLightingInfo = 0x60; // BakedLightingInfo_t
            public const nint m_entityLumps = 0x90; // CUtlVector<CStrongHandleCopyable<InfoForResourceTypeCEntityLump>>
        }
        // Parent: None
        // Field count: 10
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class InfoOverlayData_t {
            public const nint m_transform = 0x0; // matrix3x4_t
            public const nint m_flWidth = 0x30; // float32
            public const nint m_flHeight = 0x34; // float32
            public const nint m_flDepth = 0x38; // float32
            public const nint m_vUVStart = 0x3C; // Vector2D
            public const nint m_vUVEnd = 0x44; // Vector2D
            public const nint m_pMaterial = 0x50; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_nRenderOrder = 0x58; // int32
            public const nint m_vTintColor = 0x5C; // Vector4D
            public const nint m_nSequenceOverride = 0x6C; // int32
        }
        // Parent: BaseSceneObjectOverride_t
        // Field count: 3
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class MaterialOverride_t {
            public const nint m_nSubSceneObject = 0x4; // uint32
            public const nint m_nDrawCallIndex = 0x8; // uint32
            public const nint m_pMaterial = 0x10; // CStrongHandle<InfoForResourceTypeIMaterial2>
        }
        // Parent: None
        // Field count: 2
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class EntityKeyValueData_t {
            public const nint m_connections = 0x8; // CUtlVector<EntityIOConnectionData_t>
            public const nint m_keyValuesData = 0x20; // CUtlBinaryBlock
        }
        // Parent: None
        // Field count: 13
        //
        // Metadata:
        // MGetKV3ClassDefaults
        public static class CVoxelVisibility {
            public const nint m_nBaseClusterCount = 0x40; // uint32
            public const nint m_nPVSBytesPerCluster = 0x44; // uint32
            public const nint m_vMinBounds = 0x48; // Vector
            public const nint m_vMaxBounds = 0x54; // Vector
            public const nint m_flGridSize = 0x60; // float32
            public const nint m_nSkyVisibilityCluster = 0x64; // uint32
            public const nint m_nSunVisibilityCluster = 0x68; // uint32
            public const nint m_NodeBlock = 0x6C; // VoxelVisBlockOffset_t
            public const nint m_RegionBlock = 0x74; // VoxelVisBlockOffset_t
            public const nint m_EnclosedClusterListBlock = 0x7C; // VoxelVisBlockOffset_t
            public const nint m_EnclosedClustersBlock = 0x84; // VoxelVisBlockOffset_t
            public const nint m_MasksBlock = 0x8C; // VoxelVisBlockOffset_t
            public const nint m_nVisBlocks = 0x94; // VoxelVisBlockOffset_t
        }
    }
}





